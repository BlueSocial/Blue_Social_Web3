//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
    fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
    fileprivate static let hostingBundle = Bundle(for: R.Class.self)
    
    /// Find first language and bundle for which the table exists
    fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
        // Filter preferredLanguages to localizations, use first locale
        var languages = preferredLanguages
            .map { Locale(identifier: $0) }
            .prefix(1)
            .flatMap { locale -> [String] in
                if hostingBundle.localizations.contains(locale.identifier) {
                    if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
                        return [locale.identifier, language]
                    } else {
                        return [locale.identifier]
                    }
                } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
                    return [language]
                } else {
                    return []
                }
            }
        
        // If there's no languages, use development language as backstop
        if languages.isEmpty {
            if let developmentLocalization = hostingBundle.developmentLocalization {
                languages = [developmentLocalization]
            }
        } else {
            // Insert Base as second item (between locale identifier and languageCode)
            languages.insert("Base", at: 1)
            
            // Add development language as backstop
            if let developmentLocalization = hostingBundle.developmentLocalization {
                languages.append(developmentLocalization)
            }
        }
        
        // Find first language for which table exists
        // Note: key might not exist in chosen language (in that case, key will be shown)
        for language in languages {
            if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
               let lbundle = Bundle(url: lproj)
            {
                let strings = lbundle.url(forResource: tableName, withExtension: "strings")
                let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")
                
                if strings != nil || stringsdict != nil {
                    return (Locale(identifier: language), lbundle)
                }
            }
        }
        
        // If table is available in main bundle, don't look for localized resources
        let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
        let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)
        
        if strings != nil || stringsdict != nil {
            return (applicationLocale, hostingBundle)
        }
        
        // If table is not found for requested languages, key will be shown
        return nil
    }
    
    /// Load string from Info.plist file
    fileprivate static func infoPlistString(path: [String], key: String) -> String? {
        var dict = hostingBundle.infoDictionary
        for step in path {
            guard let obj = dict?[step] as? [String: Any] else { return nil }
            dict = obj
        }
        return dict?[key] as? String
    }
    
    static func validate() throws {
        try font.validate()
        try intern.validate()
    }
    
#if os(iOS) || os(tvOS)
    /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
    struct storyboard {
        
        /// Storyboard `LaunchScreen`.
        static let launchScreen = _R.storyboard.launchScreen()
        
        /// Storyboard `Login`.
        static let login = _R.storyboard.login()
        
        /// Storyboard `UserProfile`.
        static let userProfile = _R.storyboard.userProfile()
        
        /// Storyboard `Main`.
        static let main = _R.storyboard.main()
        
        /// Storyboard `BluePro`.
        static let bluePro = _R.storyboard.bluePro()
        
        /// Storyboard `BlueProUserProfile`.
        static let blueProUserProfile = _R.storyboard.blueProUserProfile()
        
        /// Storyboard `Discover`.
        static let discover = _R.storyboard.discover()
        
        /// Storyboard `Tour`.
        static let tour = _R.storyboard.tour()
        
        /// Storyboard `NearbyInteraction`.
        static let nearbyInteraction = _R.storyboard.nearbyInteraction()
        
#if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
        static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "Login", bundle: ...)`
        static func login(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.login)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "UserProfile", bundle: ...)`
        static func userProfile(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.userProfile)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "Main", bundle: ...)`
        static func main(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.main)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "BluePro", bundle: ...)`
        static func bluePro(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.bluePro)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "BlueProUserProfile", bundle: ...)`
        static func blueProUserProfile(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.blueProUserProfile)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "Discover", bundle: ...)`
        static func discover(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.discover)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "Tour", bundle: ...)`
        static func tour(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.tour)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIStoryboard(name: "NearbyInteraction", bundle: ...)`
        static func nearbyInteraction(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.nearbyInteraction)
        }
#endif
        
        fileprivate init() {}
    }
#endif
    
    /// This `R.color` struct is generated, and contains static references to 30 colors.
    struct color {
        
        /// Color `AccountOptionBGColor_(255,255,255,1.0)`.
        static let accountOptionBGColor_25525525510 = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccountOptionBGColor_(255,255,255,1.0)")
        
        /// Color `AddnetworkBG`.
        static let addnetworkBG = Rswift.ColorResource(bundle: R.hostingBundle, name: "AddnetworkBG")
        
        /// Color `AddressBGColor`.
        static let addressBGColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AddressBGColor")
        
        /// Color `DarkmodeTextColor`.
        static let darkmodeTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkmodeTextColor")
        
        /// Color `DashboardColor_(0,125,250)`.
        static let dashboardColor_0125250 = Rswift.ColorResource(bundle: R.hostingBundle, name: "DashboardColor_(0,125,250)")
        
        /// Color `DashboardColor_(0,125,250,0.1)`.
        static let dashboardColor_012525001 = Rswift.ColorResource(bundle: R.hostingBundle, name: "DashboardColor_(0,125,250,0.1)")
        
        /// Color `DashboardUpdatedTextColor_(0,130,253)`.
        static let dashboardUpdatedTextColor_0130253 = Rswift.ColorResource(bundle: R.hostingBundle, name: "DashboardUpdatedTextColor_(0,130,253)")
        
        /// Color `Grey(18,18,18,0.3)`.
        static let grey18181803 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey(18,18,18,0.3)")
        
        /// Color `Grey_(138,138,139)`.
        static let grey_138138139 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey_(138,138,139)")
        
        /// Color `Grey_TextColor`.
        static let grey_TextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey_TextColor")
        
        /// Color `NoNearbyuserColor_(170,170,170)`.
        static let noNearbyuserColor_170170170 = Rswift.ColorResource(bundle: R.hostingBundle, name: "NoNearbyuserColor_(170,170,170)")
        
        /// Color `ScanBorderColor_(216,215,215)`.
        static let scanBorderColor_216215215 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ScanBorderColor_(216,215,215)")
        
        /// Color `ScanProfileColor_(74,74,74)`.
        static let scanProfileColor_747474 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ScanProfileColor_(74,74,74)")
        
        /// Color `SearchbarBGColor_(226,226,231)`.
        static let searchbarBGColor_226226231 = Rswift.ColorResource(bundle: R.hostingBundle, name: "SearchbarBGColor_(226,226,231)")
        
        /// Color `ShadowColor_(170,170,170)`.
        static let shadowColor_170170170 = Rswift.ColorResource(bundle: R.hostingBundle, name: "ShadowColor_(170,170,170)")
        
        /// Color `SharBGcolor_(234,234,234)`.
        static let sharBGcolor_234234234 = Rswift.ColorResource(bundle: R.hostingBundle, name: "SharBGcolor_(234,234,234)")
        
        /// Color `SidemenuLineColor_(203,203,203)`.
        static let sidemenuLineColor_203203203 = Rswift.ColorResource(bundle: R.hostingBundle, name: "SidemenuLineColor_(203,203,203)")
        
        /// Color `SubTitleTextColor_(93,93,93)`.
        static let subTitleTextColor_939393 = Rswift.ColorResource(bundle: R.hostingBundle, name: "SubTitleTextColor_(93,93,93)")
        
        /// Color `TableViewHeaderBGColor_(229,229,229)`.
        static let tableViewHeaderBGColor_229229229 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TableViewHeaderBGColor_(229,229,229)")
        
        /// Color `TaptoscanColor(0,125,250)`.
        static let taptoscanColor0125250 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TaptoscanColor(0,125,250)")
        
        /// Color `TextColor_(49,49,49)`.
        static let textColor_494949 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextColor_(49,49,49)")
        
        /// Color `TextLightColor_(138,138,139)`.
        static let textLightColor_138138139 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextLightColor_(138,138,139)")
        
        /// Color `TextfieldBGColor_(227,221,221)`.
        static let textfieldBGColor_227221221 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextfieldBGColor_(227,221,221)")
        
        /// Color `TextfieldNewBGColor_(226,226,231)`.
        static let textfieldNewBGColor_226226231 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextfieldNewBGColor_(226,226,231)")
        
        /// Color `TextfieldborderColor_(0,0,0,0)`.
        static let textfieldborderColor_0000 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextfieldborderColor_(0,0,0,0)")
        
        /// Color `TitleLightColor_(138,138,142)`.
        static let titleLightColor_138138142 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TitleLightColor_(138,138,142)")
        
        /// Color `TitleTextColor1_(43,43,43)`.
        static let titleTextColor1_434343 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TitleTextColor1_(43,43,43)")
        
        /// Color `White_(255,255,255,0.2)`.
        static let white_25525525502 = Rswift.ColorResource(bundle: R.hostingBundle, name: "White_(255,255,255,0.2)")
        
        /// Color `White`.
        static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "White")
        
        /// Color `textWhiteBlackColor_(0,0,0,1)`.
        static let textWhiteBlackColor_0001 = Rswift.ColorResource(bundle: R.hostingBundle, name: "textWhiteBlackColor_(0,0,0,1)")
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "AccountOptionBGColor_(255,255,255,1.0)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func accountOptionBGColor_25525525510(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.accountOptionBGColor_25525525510, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "AddnetworkBG", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func addnetworkBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.addnetworkBG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "AddressBGColor", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func addressBGColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.addressBGColor, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "DarkmodeTextColor", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func darkmodeTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.darkmodeTextColor, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "DashboardColor_(0,125,250)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func dashboardColor_0125250(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.dashboardColor_0125250, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "DashboardColor_(0,125,250,0.1)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func dashboardColor_012525001(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.dashboardColor_012525001, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func dashboardUpdatedTextColor_0130253(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.dashboardUpdatedTextColor_0130253, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "Grey(18,18,18,0.3)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func grey18181803(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.grey18181803, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "Grey_(138,138,139)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func grey_138138139(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.grey_138138139, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "Grey_TextColor", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func grey_TextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.grey_TextColor, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "NoNearbyuserColor_(170,170,170)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func noNearbyuserColor_170170170(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.noNearbyuserColor_170170170, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "ScanBorderColor_(216,215,215)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func scanBorderColor_216215215(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.scanBorderColor_216215215, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "ScanProfileColor_(74,74,74)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func scanProfileColor_747474(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.scanProfileColor_747474, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "SearchbarBGColor_(226,226,231)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func searchbarBGColor_226226231(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.searchbarBGColor_226226231, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "ShadowColor_(170,170,170)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func shadowColor_170170170(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.shadowColor_170170170, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "SharBGcolor_(234,234,234)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func sharBGcolor_234234234(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.sharBGcolor_234234234, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "SidemenuLineColor_(203,203,203)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func sidemenuLineColor_203203203(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.sidemenuLineColor_203203203, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "SubTitleTextColor_(93,93,93)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func subTitleTextColor_939393(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.subTitleTextColor_939393, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "TableViewHeaderBGColor_(229,229,229)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tableViewHeaderBGColor_229229229(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.tableViewHeaderBGColor_229229229, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "TaptoscanColor(0,125,250)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func taptoscanColor0125250(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.taptoscanColor0125250, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "TextColor_(49,49,49)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func textColor_494949(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.textColor_494949, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "TextLightColor_(138,138,139)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func textLightColor_138138139(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.textLightColor_138138139, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "TextfieldBGColor_(227,221,221)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func textfieldBGColor_227221221(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.textfieldBGColor_227221221, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "TextfieldNewBGColor_(226,226,231)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func textfieldNewBGColor_226226231(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.textfieldNewBGColor_226226231, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "TextfieldborderColor_(0,0,0,0)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func textfieldborderColor_0000(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.textfieldborderColor_0000, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "TitleLightColor_(138,138,142)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func titleLightColor_138138142(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.titleLightColor_138138142, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "TitleTextColor1_(43,43,43)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func titleTextColor1_434343(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.titleTextColor1_434343, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "White", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "White_(255,255,255,0.2)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func white_25525525502(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.white_25525525502, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIColor(named: "textWhiteBlackColor_(0,0,0,1)", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func textWhiteBlackColor_0001(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.textWhiteBlackColor_0001, compatibleWith: traitCollection)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "AccountOptionBGColor_(255,255,255,1.0)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func accountOptionBGColor_25525525510(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.accountOptionBGColor_25525525510.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "AddnetworkBG", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func addnetworkBG(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.addnetworkBG.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "AddressBGColor", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func addressBGColor(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.addressBGColor.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "DarkmodeTextColor", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func darkmodeTextColor(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.darkmodeTextColor.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "DashboardColor_(0,125,250)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func dashboardColor_0125250(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.dashboardColor_0125250.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "DashboardColor_(0,125,250,0.1)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func dashboardColor_012525001(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.dashboardColor_012525001.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func dashboardUpdatedTextColor_0130253(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.dashboardUpdatedTextColor_0130253.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "Grey(18,18,18,0.3)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func grey18181803(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.grey18181803.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "Grey_(138,138,139)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func grey_138138139(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.grey_138138139.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "Grey_TextColor", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func grey_TextColor(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.grey_TextColor.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "NoNearbyuserColor_(170,170,170)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func noNearbyuserColor_170170170(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.noNearbyuserColor_170170170.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "ScanBorderColor_(216,215,215)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func scanBorderColor_216215215(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.scanBorderColor_216215215.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "ScanProfileColor_(74,74,74)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func scanProfileColor_747474(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.scanProfileColor_747474.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "SearchbarBGColor_(226,226,231)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func searchbarBGColor_226226231(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.searchbarBGColor_226226231.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "ShadowColor_(170,170,170)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func shadowColor_170170170(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.shadowColor_170170170.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "SharBGcolor_(234,234,234)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func sharBGcolor_234234234(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.sharBGcolor_234234234.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "SidemenuLineColor_(203,203,203)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func sidemenuLineColor_203203203(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.sidemenuLineColor_203203203.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "SubTitleTextColor_(93,93,93)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func subTitleTextColor_939393(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.subTitleTextColor_939393.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "TableViewHeaderBGColor_(229,229,229)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func tableViewHeaderBGColor_229229229(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.tableViewHeaderBGColor_229229229.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "TaptoscanColor(0,125,250)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func taptoscanColor0125250(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.taptoscanColor0125250.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "TextColor_(49,49,49)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func textColor_494949(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.textColor_494949.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "TextLightColor_(138,138,139)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func textLightColor_138138139(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.textLightColor_138138139.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "TextfieldBGColor_(227,221,221)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func textfieldBGColor_227221221(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.textfieldBGColor_227221221.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "TextfieldNewBGColor_(226,226,231)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func textfieldNewBGColor_226226231(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.textfieldNewBGColor_226226231.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "TextfieldborderColor_(0,0,0,0)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func textfieldborderColor_0000(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.textfieldborderColor_0000.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "TitleLightColor_(138,138,142)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func titleLightColor_138138142(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.titleLightColor_138138142.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "TitleTextColor1_(43,43,43)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func titleTextColor1_434343(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.titleTextColor1_434343.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "White", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func white(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.white.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "White_(255,255,255,0.2)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func white_25525525502(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.white_25525525502.name)
        }
#endif
        
#if os(watchOS)
        /// `UIColor(named: "textWhiteBlackColor_(0,0,0,1)", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func textWhiteBlackColor_0001(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.textWhiteBlackColor_0001.name)
        }
#endif
        
        fileprivate init() {}
    }
    
    /// This `R.entitlements` struct is generated, and contains static references to 7 properties.
    struct entitlements {
        static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"
        static let comAppleDeveloperUbiquityKvstoreIdentifier = infoPlistString(path: [], key: "com.apple.developer.ubiquity-kvstore-identifier") ?? "$(TeamIdentifierPrefix)$(CFBundleIdentifier)"
        
        struct comAppleDeveloperAssociatedDomains {
            static let applinksLinksProfilesBlue = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:links.profiles.blue") ?? "applinks:links.profiles.blue"
            
            fileprivate init() {}
        }
        
        struct comAppleDeveloperIcloudContainerIdentifiers {
            static let iCloudSocialBlueApp = infoPlistString(path: ["com.apple.developer.icloud-container-identifiers"], key: "iCloud.social.blue.app") ?? "iCloud.social.blue.app"
            
            fileprivate init() {}
        }
        
        struct comAppleDeveloperIcloudServices {
            static let cloudDocuments = infoPlistString(path: ["com.apple.developer.icloud-services"], key: "CloudDocuments") ?? "CloudDocuments"
            
            fileprivate init() {}
        }
        
        struct comAppleDeveloperNfcReadersessionFormats {
            static let taG = infoPlistString(path: ["com.apple.developer.nfc.readersession.formats"], key: "TAG") ?? "TAG"
            
            fileprivate init() {}
        }
        
        struct comAppleDeveloperUbiquityContainerIdentifiers {
            static let iCloudSocialBlueApp = infoPlistString(path: ["com.apple.developer.ubiquity-container-identifiers"], key: "iCloud.social.blue.app") ?? "iCloud.social.blue.app"
            
            fileprivate init() {}
        }
        
        fileprivate init() {}
    }
    
    /// This `R.file` struct is generated, and contains static references to 172 files.
    struct file {
        
        /// Resource file `ActivateBlueSmartDevice.mp4`.
        static let activateBlueSmartDeviceMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "ActivateBlueSmartDevice", pathExtension: "mp4")
        
        /// Resource file `ActivateBlueSmartDeviceDark.mp4`.
        static let activateBlueSmartDeviceDarkMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "ActivateBlueSmartDeviceDark", pathExtension: "mp4")
        
        /// Resource file `ActivateNFC.gif`.
        static let activateNFCGif = Rswift.FileResource(bundle: R.hostingBundle, name: "ActivateNFC", pathExtension: "gif")
        
        /// Resource file `BlueApp.sqlite`.
        static let blueAppSqlite = Rswift.FileResource(bundle: R.hostingBundle, name: "BlueApp", pathExtension: "sqlite")
        
        /// Resource file `Download_on_the_App_Store.png`.
        static let download_on_the_App_StorePng = Rswift.FileResource(bundle: R.hostingBundle, name: "Download_on_the_App_Store", pathExtension: "png")
        
        /// Resource file `Download_on_the_Play_Store.png`.
        static let download_on_the_Play_StorePng = Rswift.FileResource(bundle: R.hostingBundle, name: "Download_on_the_Play_Store", pathExtension: "png")
        
        /// Resource file `GoogleService-Info.plist`.
        static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
        
        /// Resource file `LICENSE`.
        static let licensE = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "")
        
        /// Resource file `README.md`.
        static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
        
        /// Resource file `SF-Font-Pro.dmg`.
        static let sfFontProDmg = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Font-Pro", pathExtension: "dmg")
        
        /// Resource file `SF-Pro-Rounded-Black.otf`.
        static let sfProRoundedBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Black", pathExtension: "otf")
        
        /// Resource file `SF-Pro-Rounded-Bold.otf`.
        static let sfProRoundedBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Bold", pathExtension: "otf")
        
        /// Resource file `SF-Pro-Rounded-Heavy.otf`.
        static let sfProRoundedHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Heavy", pathExtension: "otf")
        
        /// Resource file `SF-Pro-Rounded-Light.otf`.
        static let sfProRoundedLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Light", pathExtension: "otf")
        
        /// Resource file `SF-Pro-Rounded-Medium.otf`.
        static let sfProRoundedMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Medium", pathExtension: "otf")
        
        /// Resource file `SF-Pro-Rounded-Regular.otf`.
        static let sfProRoundedRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Regular", pathExtension: "otf")
        
        /// Resource file `SF-Pro-Rounded-Semibold.otf`.
        static let sfProRoundedSemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Semibold", pathExtension: "otf")
        
        /// Resource file `SF-Pro-Rounded-Thin.otf`.
        static let sfProRoundedThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Thin", pathExtension: "otf")
        
        /// Resource file `SF-Pro-Rounded-Ultralight.otf`.
        static let sfProRoundedUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Rounded-Ultralight", pathExtension: "otf")
        
        /// Resource file `SFProText-Bold.ttf`.
        static let sfProTextBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProText-Bold", pathExtension: "ttf")
        
        /// Resource file `SFProText-Medium.ttf`.
        static let sfProTextMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProText-Medium", pathExtension: "ttf")
        
        /// Resource file `SFProText-Regular.ttf`.
        static let sfProTextRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProText-Regular", pathExtension: "ttf")
        
        /// Resource file `SFProText-Semibold.ttf`.
        static let sfProTextSemiboldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProText-Semibold", pathExtension: "ttf")
        
        /// Resource file `TourScreenPanel1.mp4`.
        static let tourScreenPanel1Mp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "TourScreenPanel1", pathExtension: "mp4")
        
        /// Resource file `TourScreenPanel2.mp4`.
        static let tourScreenPanel2Mp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "TourScreenPanel2", pathExtension: "mp4")
        
        /// Resource file `TourScreenPanel3.mp4`.
        static let tourScreenPanel3Mp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "TourScreenPanel3", pathExtension: "mp4")
        
        /// Resource file `TourScreenPanel4.mp4`.
        static let tourScreenPanel4Mp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "TourScreenPanel4", pathExtension: "mp4")
        
        /// Resource file `TourScreenPanel5.mp4`.
        static let tourScreenPanel5Mp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "TourScreenPanel5", pathExtension: "mp4")
        
        /// Resource file `add-image.png`.
        static let addImagePng = Rswift.FileResource(bundle: R.hostingBundle, name: "add-image", pathExtension: "png")
        
        /// Resource file `all.css`.
        static let allCss = Rswift.FileResource(bundle: R.hostingBundle, name: "all", pathExtension: "css")
        
        /// Resource file `android-icon-144x144.png`.
        static let androidIcon144x144Png = Rswift.FileResource(bundle: R.hostingBundle, name: "android-icon-144x144", pathExtension: "png")
        
        /// Resource file `android-icon-192x192.png`.
        static let androidIcon192x192Png = Rswift.FileResource(bundle: R.hostingBundle, name: "android-icon-192x192", pathExtension: "png")
        
        /// Resource file `android-icon-36x36.png`.
        static let androidIcon36x36Png = Rswift.FileResource(bundle: R.hostingBundle, name: "android-icon-36x36", pathExtension: "png")
        
        /// Resource file `android-icon-48x48.png`.
        static let androidIcon48x48Png = Rswift.FileResource(bundle: R.hostingBundle, name: "android-icon-48x48", pathExtension: "png")
        
        /// Resource file `android-icon-72x72.png`.
        static let androidIcon72x72Png = Rswift.FileResource(bundle: R.hostingBundle, name: "android-icon-72x72", pathExtension: "png")
        
        /// Resource file `android-icon-96x96.png`.
        static let androidIcon96x96Png = Rswift.FileResource(bundle: R.hostingBundle, name: "android-icon-96x96", pathExtension: "png")
        
        /// Resource file `apple-icon-114x114.png`.
        static let appleIcon114x114Png = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-114x114", pathExtension: "png")
        
        /// Resource file `apple-icon-120x120.png`.
        static let appleIcon120x120Png = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-120x120", pathExtension: "png")
        
        /// Resource file `apple-icon-144x144.png`.
        static let appleIcon144x144Png = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-144x144", pathExtension: "png")
        
        /// Resource file `apple-icon-152x152.png`.
        static let appleIcon152x152Png = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-152x152", pathExtension: "png")
        
        /// Resource file `apple-icon-180x180.png`.
        static let appleIcon180x180Png = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-180x180", pathExtension: "png")
        
        /// Resource file `apple-icon-57x57.png`.
        static let appleIcon57x57Png = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-57x57", pathExtension: "png")
        
        /// Resource file `apple-icon-60x60.png`.
        static let appleIcon60x60Png = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-60x60", pathExtension: "png")
        
        /// Resource file `apple-icon-72x72.png`.
        static let appleIcon72x72Png = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-72x72", pathExtension: "png")
        
        /// Resource file `apple-icon-76x76.png`.
        static let appleIcon76x76Png = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-76x76", pathExtension: "png")
        
        /// Resource file `apple-icon-precomposed.png`.
        static let appleIconPrecomposedPng = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon-precomposed", pathExtension: "png")
        
        /// Resource file `apple-icon.png`.
        static let appleIconPng = Rswift.FileResource(bundle: R.hostingBundle, name: "apple-icon", pathExtension: "png")
        
        /// Resource file `auto-type.js`.
        static let autoTypeJs = Rswift.FileResource(bundle: R.hostingBundle, name: "auto-type", pathExtension: "js")
        
        /// Resource file `bg1.png`.
        static let bg1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "bg1", pathExtension: "png")
        
        /// Resource file `blue-1.png`.
        static let blue1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "blue-1", pathExtension: "png")
        
        /// Resource file `blue-logo.png`.
        static let blueLogoPng = Rswift.FileResource(bundle: R.hostingBundle, name: "blue-logo", pathExtension: "png")
        
        /// Resource file `blue-team.png`.
        static let blueTeamPng = Rswift.FileResource(bundle: R.hostingBundle, name: "blue-team", pathExtension: "png")
        
        /// Resource file `bluetooth.png`.
        static let bluetoothPng = Rswift.FileResource(bundle: R.hostingBundle, name: "bluetooth", pathExtension: "png")
        
        /// Resource file `bootstrap.css`.
        static let bootstrapCss = Rswift.FileResource(bundle: R.hostingBundle, name: "bootstrap", pathExtension: "css")
        
        /// Resource file `bootstrap.min.css`.
        static let bootstrapMinCss = Rswift.FileResource(bundle: R.hostingBundle, name: "bootstrap.min", pathExtension: "css")
        
        /// Resource file `bootstrap.min.js`.
        static let bootstrapMinJs = Rswift.FileResource(bundle: R.hostingBundle, name: "bootstrap.min", pathExtension: "js")
        
        /// Resource file `browserconfig.xml`.
        static let browserconfigXml = Rswift.FileResource(bundle: R.hostingBundle, name: "browserconfig", pathExtension: "xml")
        
        /// Resource file `careAnimation.mp4`.
        static let careAnimationMp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "careAnimation", pathExtension: "mp4")
        
        /// Resource file `checkbox.css`.
        static let checkboxCss = Rswift.FileResource(bundle: R.hostingBundle, name: "checkbox", pathExtension: "css")
        
        /// Resource file `effect.js`.
        static let effectJs = Rswift.FileResource(bundle: R.hostingBundle, name: "effect", pathExtension: "js")
        
        /// Resource file `fa-brands-400.eot`.
        static let faBrands400Eot = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-brands-400", pathExtension: "eot")
        
        /// Resource file `fa-brands-400.svg`.
        static let faBrands400Svg = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-brands-400", pathExtension: "svg")
        
        /// Resource file `fa-brands-400.ttf`.
        static let faBrands400Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-brands-400", pathExtension: "ttf")
        
        /// Resource file `fa-brands-400.woff2`.
        static let faBrands400Woff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-brands-400", pathExtension: "woff2")
        
        /// Resource file `fa-brands-400.woff`.
        static let faBrands400Woff = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-brands-400", pathExtension: "woff")
        
        /// Resource file `fa-light-300.eot`.
        static let faLight300Eot = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-light-300", pathExtension: "eot")
        
        /// Resource file `fa-light-300.svg`.
        static let faLight300Svg = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-light-300", pathExtension: "svg")
        
        /// Resource file `fa-light-300.ttf`.
        static let faLight300Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-light-300", pathExtension: "ttf")
        
        /// Resource file `fa-light-300.woff2`.
        static let faLight300Woff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-light-300", pathExtension: "woff2")
        
        /// Resource file `fa-light-300.woff`.
        static let faLight300Woff = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-light-300", pathExtension: "woff")
        
        /// Resource file `fa-regular-400.eot`.
        static let faRegular400Eot = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-regular-400", pathExtension: "eot")
        
        /// Resource file `fa-regular-400.svg`.
        static let faRegular400Svg = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-regular-400", pathExtension: "svg")
        
        /// Resource file `fa-regular-400.ttf`.
        static let faRegular400Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-regular-400", pathExtension: "ttf")
        
        /// Resource file `fa-regular-400.woff2`.
        static let faRegular400Woff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-regular-400", pathExtension: "woff2")
        
        /// Resource file `fa-regular-400.woff`.
        static let faRegular400Woff = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-regular-400", pathExtension: "woff")
        
        /// Resource file `fa-solid-900.eot`.
        static let faSolid900Eot = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-solid-900", pathExtension: "eot")
        
        /// Resource file `fa-solid-900.svg`.
        static let faSolid900Svg = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-solid-900", pathExtension: "svg")
        
        /// Resource file `fa-solid-900.ttf`.
        static let faSolid900Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-solid-900", pathExtension: "ttf")
        
        /// Resource file `fa-solid-900.woff2`.
        static let faSolid900Woff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-solid-900", pathExtension: "woff2")
        
        /// Resource file `fa-solid-900.woff`.
        static let faSolid900Woff = Rswift.FileResource(bundle: R.hostingBundle, name: "fa-solid-900", pathExtension: "woff")
        
        /// Resource file `favicon-16x16.png`.
        static let favicon16x16Png = Rswift.FileResource(bundle: R.hostingBundle, name: "favicon-16x16", pathExtension: "png")
        
        /// Resource file `favicon-32x32.png`.
        static let favicon32x32Png = Rswift.FileResource(bundle: R.hostingBundle, name: "favicon-32x32", pathExtension: "png")
        
        /// Resource file `favicon-96x96.png`.
        static let favicon96x96Png = Rswift.FileResource(bundle: R.hostingBundle, name: "favicon-96x96", pathExtension: "png")
        
        /// Resource file `favicon.ico`.
        static let faviconIco = Rswift.FileResource(bundle: R.hostingBundle, name: "favicon", pathExtension: "ico")
        
        /// Resource file `help.html`.
        static let helpHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "help", pathExtension: "html")
        
        /// Resource file `img_TutorialScreen1.gif`.
        static let img_TutorialScreen1Gif = Rswift.FileResource(bundle: R.hostingBundle, name: "img_TutorialScreen1", pathExtension: "gif")
        
        /// Resource file `jquery.min.js`.
        static let jqueryMinJs = Rswift.FileResource(bundle: R.hostingBundle, name: "jquery.min", pathExtension: "js")
        
        /// Resource file `jquery.ui.mouse.js`.
        static let jqueryUiMouseJs = Rswift.FileResource(bundle: R.hostingBundle, name: "jquery.ui.mouse", pathExtension: "js")
        
        /// Resource file `jquery.ui.touch-punch.js`.
        static let jqueryUiTouchPunchJs = Rswift.FileResource(bundle: R.hostingBundle, name: "jquery.ui.touch-punch", pathExtension: "js")
        
        /// Resource file `kloader.gif`.
        static let kloaderGif = Rswift.FileResource(bundle: R.hostingBundle, name: "kloader", pathExtension: "gif")
        
        /// Resource file `l.png`.
        static let lPng = Rswift.FileResource(bundle: R.hostingBundle, name: "l", pathExtension: "png")
        
        /// Resource file `logo-hello.png`.
        static let logoHelloPng = Rswift.FileResource(bundle: R.hostingBundle, name: "logo-hello", pathExtension: "png")
        
        /// Resource file `logout.svg`.
        static let logoutSvg = Rswift.FileResource(bundle: R.hostingBundle, name: "logout", pathExtension: "svg")
        
        /// Resource file `manifest.json`.
        static let manifestJson = Rswift.FileResource(bundle: R.hostingBundle, name: "manifest", pathExtension: "json")
        
        /// Resource file `ms-icon-144x144.png`.
        static let msIcon144x144Png = Rswift.FileResource(bundle: R.hostingBundle, name: "ms-icon-144x144", pathExtension: "png")
        
        /// Resource file `ms-icon-150x150.png`.
        static let msIcon150x150Png = Rswift.FileResource(bundle: R.hostingBundle, name: "ms-icon-150x150", pathExtension: "png")
        
        /// Resource file `ms-icon-310x310.png`.
        static let msIcon310x310Png = Rswift.FileResource(bundle: R.hostingBundle, name: "ms-icon-310x310", pathExtension: "png")
        
        /// Resource file `ms-icon-70x70.png`.
        static let msIcon70x70Png = Rswift.FileResource(bundle: R.hostingBundle, name: "ms-icon-70x70", pathExtension: "png")
        
        /// Resource file `photo.png`.
        static let photoPng = Rswift.FileResource(bundle: R.hostingBundle, name: "photo", pathExtension: "png")
        
        /// Resource file `placeholder.js`.
        static let placeholderJs = Rswift.FileResource(bundle: R.hostingBundle, name: "placeholder", pathExtension: "js")
        
        /// Resource file `privacy.html`.
        static let privacyHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "privacy", pathExtension: "html")
        
        /// Resource file `privacy.svg`.
        static let privacySvg = Rswift.FileResource(bundle: R.hostingBundle, name: "privacy", pathExtension: "svg")
        
        /// Resource file `progressBar.js`.
        static let progressBarJs = Rswift.FileResource(bundle: R.hostingBundle, name: "progressBar", pathExtension: "js")
        
        /// Resource file `set.png`.
        static let setPng = Rswift.FileResource(bundle: R.hostingBundle, name: "set", pathExtension: "png")
        
        /// Resource file `sfdisplay-black-webfont.woff2`.
        static let sfdisplayBlackWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-black-webfont", pathExtension: "woff2")
        
        /// Resource file `sfdisplay-black-webfont.woff`.
        static let sfdisplayBlackWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-black-webfont", pathExtension: "woff")
        
        /// Resource file `sfdisplay-bold-webfont.woff2`.
        static let sfdisplayBoldWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-bold-webfont", pathExtension: "woff2")
        
        /// Resource file `sfdisplay-bold-webfont.woff`.
        static let sfdisplayBoldWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-bold-webfont", pathExtension: "woff")
        
        /// Resource file `sfdisplay-heavy-webfont.woff2`.
        static let sfdisplayHeavyWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-heavy-webfont", pathExtension: "woff2")
        
        /// Resource file `sfdisplay-heavy-webfont.woff`.
        static let sfdisplayHeavyWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-heavy-webfont", pathExtension: "woff")
        
        /// Resource file `sfdisplay-light-webfont.woff2`.
        static let sfdisplayLightWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-light-webfont", pathExtension: "woff2")
        
        /// Resource file `sfdisplay-light-webfont.woff`.
        static let sfdisplayLightWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-light-webfont", pathExtension: "woff")
        
        /// Resource file `sfdisplay-medium-webfont.woff2`.
        static let sfdisplayMediumWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-medium-webfont", pathExtension: "woff2")
        
        /// Resource file `sfdisplay-medium-webfont.woff`.
        static let sfdisplayMediumWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-medium-webfont", pathExtension: "woff")
        
        /// Resource file `sfdisplay-regular-webfont.woff2`.
        static let sfdisplayRegularWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-regular-webfont", pathExtension: "woff2")
        
        /// Resource file `sfdisplay-regular-webfont.woff`.
        static let sfdisplayRegularWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-regular-webfont", pathExtension: "woff")
        
        /// Resource file `sfdisplay-semibold-webfont.woff2`.
        static let sfdisplaySemiboldWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-semibold-webfont", pathExtension: "woff2")
        
        /// Resource file `sfdisplay-semibold-webfont.woff`.
        static let sfdisplaySemiboldWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-semibold-webfont", pathExtension: "woff")
        
        /// Resource file `sfdisplay-thin-webfont.woff2`.
        static let sfdisplayThinWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-thin-webfont", pathExtension: "woff2")
        
        /// Resource file `sfdisplay-thin-webfont.woff`.
        static let sfdisplayThinWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-thin-webfont", pathExtension: "woff")
        
        /// Resource file `sfdisplay-ultralight-webfont.woff2`.
        static let sfdisplayUltralightWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-ultralight-webfont", pathExtension: "woff2")
        
        /// Resource file `sfdisplay-ultralight-webfont.woff`.
        static let sfdisplayUltralightWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sfdisplay-ultralight-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-bold-webfont.woff2`.
        static let sftextBoldWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-bold-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-bold-webfont.woff`.
        static let sftextBoldWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-bold-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-bolditalic-webfont.ttf`.
        static let sftextBolditalicWebfontTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-bolditalic-webfont", pathExtension: "ttf")
        
        /// Resource file `sftext-bolditalic-webfont.woff2`.
        static let sftextBolditalicWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-bolditalic-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-bolditalic-webfont.woff`.
        static let sftextBolditalicWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-bolditalic-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-heavy-webfont.woff2`.
        static let sftextHeavyWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-heavy-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-heavy-webfont.woff`.
        static let sftextHeavyWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-heavy-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-heavyitalic-webfont.woff2`.
        static let sftextHeavyitalicWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-heavyitalic-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-heavyitalic-webfont.woff`.
        static let sftextHeavyitalicWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-heavyitalic-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-light-webfont.woff2`.
        static let sftextLightWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-light-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-light-webfont.woff`.
        static let sftextLightWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-light-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-lightitalic-webfont.woff2`.
        static let sftextLightitalicWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-lightitalic-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-lightitalic-webfont.woff`.
        static let sftextLightitalicWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-lightitalic-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-medium-webfont.woff2`.
        static let sftextMediumWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-medium-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-medium-webfont.woff`.
        static let sftextMediumWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-medium-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-mediumitalic-webfont.ttf`.
        static let sftextMediumitalicWebfontTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-mediumitalic-webfont", pathExtension: "ttf")
        
        /// Resource file `sftext-mediumitalic-webfont.woff2`.
        static let sftextMediumitalicWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-mediumitalic-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-mediumitalic-webfont.woff`.
        static let sftextMediumitalicWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-mediumitalic-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-regular-webfont.woff2`.
        static let sftextRegularWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-regular-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-regular-webfont.woff`.
        static let sftextRegularWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-regular-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-regularitalic-webfont.woff2`.
        static let sftextRegularitalicWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-regularitalic-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-regularitalic-webfont.woff`.
        static let sftextRegularitalicWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-regularitalic-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-semibold-webfont.woff2`.
        static let sftextSemiboldWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-semibold-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-semibold-webfont.woff`.
        static let sftextSemiboldWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-semibold-webfont", pathExtension: "woff")
        
        /// Resource file `sftext-semibolditalic-webfont.woff2`.
        static let sftextSemibolditalicWebfontWoff2 = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-semibolditalic-webfont", pathExtension: "woff2")
        
        /// Resource file `sftext-semibolditalic-webfont.woff`.
        static let sftextSemibolditalicWebfontWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "sftext-semibolditalic-webfont", pathExtension: "woff")
        
        /// Resource file `share-email.png`.
        static let shareEmailPng = Rswift.FileResource(bundle: R.hostingBundle, name: "share-email", pathExtension: "png")
        
        /// Resource file `share-facebook.png`.
        static let shareFacebookPng = Rswift.FileResource(bundle: R.hostingBundle, name: "share-facebook", pathExtension: "png")
        
        /// Resource file `share-googleplus.png`.
        static let shareGoogleplusPng = Rswift.FileResource(bundle: R.hostingBundle, name: "share-googleplus", pathExtension: "png")
        
        /// Resource file `share-message.png`.
        static let shareMessagePng = Rswift.FileResource(bundle: R.hostingBundle, name: "share-message", pathExtension: "png")
        
        /// Resource file `share-pinterest.png`.
        static let sharePinterestPng = Rswift.FileResource(bundle: R.hostingBundle, name: "share-pinterest", pathExtension: "png")
        
        /// Resource file `share-safari.png`.
        static let shareSafariPng = Rswift.FileResource(bundle: R.hostingBundle, name: "share-safari", pathExtension: "png")
        
        /// Resource file `share-twitter.png`.
        static let shareTwitterPng = Rswift.FileResource(bundle: R.hostingBundle, name: "share-twitter", pathExtension: "png")
        
        /// Resource file `social-network-facebook.png`.
        static let socialNetworkFacebookPng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-facebook", pathExtension: "png")
        
        /// Resource file `social-network-googleplus.png`.
        static let socialNetworkGoogleplusPng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-googleplus", pathExtension: "png")
        
        /// Resource file `social-network-instagram.png`.
        static let socialNetworkInstagramPng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-instagram", pathExtension: "png")
        
        /// Resource file `social-network-linkedin.png`.
        static let socialNetworkLinkedinPng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-linkedin", pathExtension: "png")
        
        /// Resource file `social-network-pinterest.png`.
        static let socialNetworkPinterestPng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-pinterest", pathExtension: "png")
        
        /// Resource file `social-network-skype.png`.
        static let socialNetworkSkypePng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-skype", pathExtension: "png")
        
        /// Resource file `social-network-snapchat.png`.
        static let socialNetworkSnapchatPng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-snapchat", pathExtension: "png")
        
        /// Resource file `social-network-soundcloud.png`.
        static let socialNetworkSoundcloudPng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-soundcloud", pathExtension: "png")
        
        /// Resource file `social-network-tumblr.png`.
        static let socialNetworkTumblrPng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-tumblr", pathExtension: "png")
        
        /// Resource file `social-network-twitter.png`.
        static let socialNetworkTwitterPng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-twitter", pathExtension: "png")
        
        /// Resource file `social-network-youtube.png`.
        static let socialNetworkYoutubePng = Rswift.FileResource(bundle: R.hostingBundle, name: "social-network-youtube", pathExtension: "png")
        
        /// Resource file `style.css`.
        static let styleCss = Rswift.FileResource(bundle: R.hostingBundle, name: "style", pathExtension: "css")
        
        /// Resource file `stylesheet.css`.
        static let stylesheetCss = Rswift.FileResource(bundle: R.hostingBundle, name: "stylesheet", pathExtension: "css")
        
        /// Resource file `terms.html`.
        static let termsHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "terms", pathExtension: "html")
        
        /// Resource file `terms.svg`.
        static let termsSvg = Rswift.FileResource(bundle: R.hostingBundle, name: "terms", pathExtension: "svg")
        
        /// Resource file `tip.png`.
        static let tipPng = Rswift.FileResource(bundle: R.hostingBundle, name: "tip", pathExtension: "png")
        
        /// Resource file `tween.js`.
        static let tweenJs = Rswift.FileResource(bundle: R.hostingBundle, name: "tween", pathExtension: "js")
        
        /// `bundle.url(forResource: "ActivateBlueSmartDevice", withExtension: "mp4")`
        static func activateBlueSmartDeviceMp4(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.activateBlueSmartDeviceMp4
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "ActivateBlueSmartDeviceDark", withExtension: "mp4")`
        static func activateBlueSmartDeviceDarkMp4(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.activateBlueSmartDeviceDarkMp4
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "ActivateNFC", withExtension: "gif")`
        static func activateNFCGif(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.activateNFCGif
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "BlueApp", withExtension: "sqlite")`
        static func blueAppSqlite(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.blueAppSqlite
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "Download_on_the_App_Store", withExtension: "png")`
        static func download_on_the_App_StorePng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.download_on_the_App_StorePng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "Download_on_the_Play_Store", withExtension: "png")`
        static func download_on_the_Play_StorePng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.download_on_the_Play_StorePng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
        static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.googleServiceInfoPlist
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "LICENSE", withExtension: "")`
        static func licensE(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.licensE
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "README", withExtension: "md")`
        static func readmeMd(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.readmeMd
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Font-Pro", withExtension: "dmg")`
        static func sfFontProDmg(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfFontProDmg
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Pro-Rounded-Black", withExtension: "otf")`
        static func sfProRoundedBlackOtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProRoundedBlackOtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Pro-Rounded-Bold", withExtension: "otf")`
        static func sfProRoundedBoldOtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProRoundedBoldOtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Pro-Rounded-Heavy", withExtension: "otf")`
        static func sfProRoundedHeavyOtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProRoundedHeavyOtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Pro-Rounded-Light", withExtension: "otf")`
        static func sfProRoundedLightOtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProRoundedLightOtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Pro-Rounded-Medium", withExtension: "otf")`
        static func sfProRoundedMediumOtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProRoundedMediumOtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Pro-Rounded-Regular", withExtension: "otf")`
        static func sfProRoundedRegularOtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProRoundedRegularOtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Pro-Rounded-Semibold", withExtension: "otf")`
        static func sfProRoundedSemiboldOtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProRoundedSemiboldOtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Pro-Rounded-Thin", withExtension: "otf")`
        static func sfProRoundedThinOtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProRoundedThinOtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SF-Pro-Rounded-Ultralight", withExtension: "otf")`
        static func sfProRoundedUltralightOtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProRoundedUltralightOtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SFProText-Bold", withExtension: "ttf")`
        static func sfProTextBoldTtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProTextBoldTtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SFProText-Medium", withExtension: "ttf")`
        static func sfProTextMediumTtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProTextMediumTtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SFProText-Regular", withExtension: "ttf")`
        static func sfProTextRegularTtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProTextRegularTtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "SFProText-Semibold", withExtension: "ttf")`
        static func sfProTextSemiboldTtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfProTextSemiboldTtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "TourScreenPanel1", withExtension: "mp4")`
        static func tourScreenPanel1Mp4(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.tourScreenPanel1Mp4
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "TourScreenPanel2", withExtension: "mp4")`
        static func tourScreenPanel2Mp4(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.tourScreenPanel2Mp4
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "TourScreenPanel3", withExtension: "mp4")`
        static func tourScreenPanel3Mp4(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.tourScreenPanel3Mp4
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "TourScreenPanel4", withExtension: "mp4")`
        static func tourScreenPanel4Mp4(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.tourScreenPanel4Mp4
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "TourScreenPanel5", withExtension: "mp4")`
        static func tourScreenPanel5Mp4(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.tourScreenPanel5Mp4
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "add-image", withExtension: "png")`
        static func addImagePng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.addImagePng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "all", withExtension: "css")`
        static func allCss(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.allCss
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "android-icon-144x144", withExtension: "png")`
        static func androidIcon144x144Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.androidIcon144x144Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "android-icon-192x192", withExtension: "png")`
        static func androidIcon192x192Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.androidIcon192x192Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "android-icon-36x36", withExtension: "png")`
        static func androidIcon36x36Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.androidIcon36x36Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "android-icon-48x48", withExtension: "png")`
        static func androidIcon48x48Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.androidIcon48x48Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "android-icon-72x72", withExtension: "png")`
        static func androidIcon72x72Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.androidIcon72x72Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "android-icon-96x96", withExtension: "png")`
        static func androidIcon96x96Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.androidIcon96x96Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon", withExtension: "png")`
        static func appleIconPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIconPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-114x114", withExtension: "png")`
        static func appleIcon114x114Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIcon114x114Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-120x120", withExtension: "png")`
        static func appleIcon120x120Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIcon120x120Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-144x144", withExtension: "png")`
        static func appleIcon144x144Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIcon144x144Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-152x152", withExtension: "png")`
        static func appleIcon152x152Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIcon152x152Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-180x180", withExtension: "png")`
        static func appleIcon180x180Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIcon180x180Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-57x57", withExtension: "png")`
        static func appleIcon57x57Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIcon57x57Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-60x60", withExtension: "png")`
        static func appleIcon60x60Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIcon60x60Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-72x72", withExtension: "png")`
        static func appleIcon72x72Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIcon72x72Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-76x76", withExtension: "png")`
        static func appleIcon76x76Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIcon76x76Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "apple-icon-precomposed", withExtension: "png")`
        static func appleIconPrecomposedPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.appleIconPrecomposedPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "auto-type", withExtension: "js")`
        static func autoTypeJs(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.autoTypeJs
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "bg1", withExtension: "png")`
        static func bg1Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.bg1Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "blue-1", withExtension: "png")`
        static func blue1Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.blue1Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "blue-logo", withExtension: "png")`
        static func blueLogoPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.blueLogoPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "blue-team", withExtension: "png")`
        static func blueTeamPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.blueTeamPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "bluetooth", withExtension: "png")`
        static func bluetoothPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.bluetoothPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "bootstrap", withExtension: "css")`
        static func bootstrapCss(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.bootstrapCss
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "bootstrap.min", withExtension: "css")`
        static func bootstrapMinCss(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.bootstrapMinCss
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "bootstrap.min", withExtension: "js")`
        static func bootstrapMinJs(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.bootstrapMinJs
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "browserconfig", withExtension: "xml")`
        static func browserconfigXml(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.browserconfigXml
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "careAnimation", withExtension: "mp4")`
        static func careAnimationMp4(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.careAnimationMp4
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "checkbox", withExtension: "css")`
        static func checkboxCss(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.checkboxCss
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "effect", withExtension: "js")`
        static func effectJs(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.effectJs
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-brands-400", withExtension: "eot")`
        static func faBrands400Eot(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faBrands400Eot
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-brands-400", withExtension: "svg")`
        static func faBrands400Svg(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faBrands400Svg
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-brands-400", withExtension: "ttf")`
        static func faBrands400Ttf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faBrands400Ttf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-brands-400", withExtension: "woff")`
        static func faBrands400Woff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faBrands400Woff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-brands-400", withExtension: "woff2")`
        static func faBrands400Woff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faBrands400Woff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-light-300", withExtension: "eot")`
        static func faLight300Eot(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faLight300Eot
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-light-300", withExtension: "svg")`
        static func faLight300Svg(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faLight300Svg
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-light-300", withExtension: "ttf")`
        static func faLight300Ttf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faLight300Ttf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-light-300", withExtension: "woff")`
        static func faLight300Woff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faLight300Woff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-light-300", withExtension: "woff2")`
        static func faLight300Woff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faLight300Woff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-regular-400", withExtension: "eot")`
        static func faRegular400Eot(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faRegular400Eot
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-regular-400", withExtension: "svg")`
        static func faRegular400Svg(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faRegular400Svg
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-regular-400", withExtension: "ttf")`
        static func faRegular400Ttf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faRegular400Ttf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-regular-400", withExtension: "woff")`
        static func faRegular400Woff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faRegular400Woff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-regular-400", withExtension: "woff2")`
        static func faRegular400Woff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faRegular400Woff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-solid-900", withExtension: "eot")`
        static func faSolid900Eot(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faSolid900Eot
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-solid-900", withExtension: "svg")`
        static func faSolid900Svg(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faSolid900Svg
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-solid-900", withExtension: "ttf")`
        static func faSolid900Ttf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faSolid900Ttf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-solid-900", withExtension: "woff")`
        static func faSolid900Woff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faSolid900Woff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "fa-solid-900", withExtension: "woff2")`
        static func faSolid900Woff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faSolid900Woff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "favicon", withExtension: "ico")`
        static func faviconIco(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.faviconIco
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "favicon-16x16", withExtension: "png")`
        static func favicon16x16Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.favicon16x16Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "favicon-32x32", withExtension: "png")`
        static func favicon32x32Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.favicon32x32Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "favicon-96x96", withExtension: "png")`
        static func favicon96x96Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.favicon96x96Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "help", withExtension: "html")`
        static func helpHtml(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.helpHtml
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "img_TutorialScreen1", withExtension: "gif")`
        static func img_TutorialScreen1Gif(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.img_TutorialScreen1Gif
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "jquery.min", withExtension: "js")`
        static func jqueryMinJs(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.jqueryMinJs
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "jquery.ui.mouse", withExtension: "js")`
        static func jqueryUiMouseJs(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.jqueryUiMouseJs
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "jquery.ui.touch-punch", withExtension: "js")`
        static func jqueryUiTouchPunchJs(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.jqueryUiTouchPunchJs
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "kloader", withExtension: "gif")`
        static func kloaderGif(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.kloaderGif
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "l", withExtension: "png")`
        static func lPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.lPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "logo-hello", withExtension: "png")`
        static func logoHelloPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.logoHelloPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "logout", withExtension: "svg")`
        static func logoutSvg(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.logoutSvg
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "manifest", withExtension: "json")`
        static func manifestJson(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.manifestJson
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "ms-icon-144x144", withExtension: "png")`
        static func msIcon144x144Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.msIcon144x144Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "ms-icon-150x150", withExtension: "png")`
        static func msIcon150x150Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.msIcon150x150Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "ms-icon-310x310", withExtension: "png")`
        static func msIcon310x310Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.msIcon310x310Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "ms-icon-70x70", withExtension: "png")`
        static func msIcon70x70Png(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.msIcon70x70Png
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "photo", withExtension: "png")`
        static func photoPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.photoPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "placeholder", withExtension: "js")`
        static func placeholderJs(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.placeholderJs
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "privacy", withExtension: "html")`
        static func privacyHtml(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.privacyHtml
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "privacy", withExtension: "svg")`
        static func privacySvg(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.privacySvg
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "progressBar", withExtension: "js")`
        static func progressBarJs(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.progressBarJs
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "set", withExtension: "png")`
        static func setPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.setPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-black-webfont", withExtension: "woff")`
        static func sfdisplayBlackWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayBlackWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-black-webfont", withExtension: "woff2")`
        static func sfdisplayBlackWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayBlackWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-bold-webfont", withExtension: "woff")`
        static func sfdisplayBoldWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayBoldWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-bold-webfont", withExtension: "woff2")`
        static func sfdisplayBoldWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayBoldWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-heavy-webfont", withExtension: "woff")`
        static func sfdisplayHeavyWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayHeavyWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-heavy-webfont", withExtension: "woff2")`
        static func sfdisplayHeavyWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayHeavyWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-light-webfont", withExtension: "woff")`
        static func sfdisplayLightWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayLightWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-light-webfont", withExtension: "woff2")`
        static func sfdisplayLightWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayLightWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-medium-webfont", withExtension: "woff")`
        static func sfdisplayMediumWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayMediumWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-medium-webfont", withExtension: "woff2")`
        static func sfdisplayMediumWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayMediumWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-regular-webfont", withExtension: "woff")`
        static func sfdisplayRegularWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayRegularWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-regular-webfont", withExtension: "woff2")`
        static func sfdisplayRegularWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayRegularWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-semibold-webfont", withExtension: "woff")`
        static func sfdisplaySemiboldWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplaySemiboldWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-semibold-webfont", withExtension: "woff2")`
        static func sfdisplaySemiboldWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplaySemiboldWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-thin-webfont", withExtension: "woff")`
        static func sfdisplayThinWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayThinWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-thin-webfont", withExtension: "woff2")`
        static func sfdisplayThinWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayThinWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-ultralight-webfont", withExtension: "woff")`
        static func sfdisplayUltralightWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayUltralightWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sfdisplay-ultralight-webfont", withExtension: "woff2")`
        static func sfdisplayUltralightWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sfdisplayUltralightWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-bold-webfont", withExtension: "woff")`
        static func sftextBoldWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextBoldWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-bold-webfont", withExtension: "woff2")`
        static func sftextBoldWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextBoldWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-bolditalic-webfont", withExtension: "ttf")`
        static func sftextBolditalicWebfontTtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextBolditalicWebfontTtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-bolditalic-webfont", withExtension: "woff")`
        static func sftextBolditalicWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextBolditalicWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-bolditalic-webfont", withExtension: "woff2")`
        static func sftextBolditalicWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextBolditalicWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-heavy-webfont", withExtension: "woff")`
        static func sftextHeavyWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextHeavyWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-heavy-webfont", withExtension: "woff2")`
        static func sftextHeavyWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextHeavyWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-heavyitalic-webfont", withExtension: "woff")`
        static func sftextHeavyitalicWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextHeavyitalicWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-heavyitalic-webfont", withExtension: "woff2")`
        static func sftextHeavyitalicWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextHeavyitalicWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-light-webfont", withExtension: "woff")`
        static func sftextLightWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextLightWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-light-webfont", withExtension: "woff2")`
        static func sftextLightWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextLightWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-lightitalic-webfont", withExtension: "woff")`
        static func sftextLightitalicWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextLightitalicWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-lightitalic-webfont", withExtension: "woff2")`
        static func sftextLightitalicWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextLightitalicWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-medium-webfont", withExtension: "woff")`
        static func sftextMediumWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextMediumWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-medium-webfont", withExtension: "woff2")`
        static func sftextMediumWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextMediumWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-mediumitalic-webfont", withExtension: "ttf")`
        static func sftextMediumitalicWebfontTtf(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextMediumitalicWebfontTtf
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-mediumitalic-webfont", withExtension: "woff")`
        static func sftextMediumitalicWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextMediumitalicWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-mediumitalic-webfont", withExtension: "woff2")`
        static func sftextMediumitalicWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextMediumitalicWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-regular-webfont", withExtension: "woff")`
        static func sftextRegularWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextRegularWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-regular-webfont", withExtension: "woff2")`
        static func sftextRegularWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextRegularWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-regularitalic-webfont", withExtension: "woff")`
        static func sftextRegularitalicWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextRegularitalicWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-regularitalic-webfont", withExtension: "woff2")`
        static func sftextRegularitalicWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextRegularitalicWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-semibold-webfont", withExtension: "woff")`
        static func sftextSemiboldWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextSemiboldWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-semibold-webfont", withExtension: "woff2")`
        static func sftextSemiboldWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextSemiboldWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-semibolditalic-webfont", withExtension: "woff")`
        static func sftextSemibolditalicWebfontWoff(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextSemibolditalicWebfontWoff
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "sftext-semibolditalic-webfont", withExtension: "woff2")`
        static func sftextSemibolditalicWebfontWoff2(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sftextSemibolditalicWebfontWoff2
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "share-email", withExtension: "png")`
        static func shareEmailPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.shareEmailPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "share-facebook", withExtension: "png")`
        static func shareFacebookPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.shareFacebookPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "share-googleplus", withExtension: "png")`
        static func shareGoogleplusPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.shareGoogleplusPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "share-message", withExtension: "png")`
        static func shareMessagePng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.shareMessagePng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "share-pinterest", withExtension: "png")`
        static func sharePinterestPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.sharePinterestPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "share-safari", withExtension: "png")`
        static func shareSafariPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.shareSafariPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "share-twitter", withExtension: "png")`
        static func shareTwitterPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.shareTwitterPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-facebook", withExtension: "png")`
        static func socialNetworkFacebookPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkFacebookPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-googleplus", withExtension: "png")`
        static func socialNetworkGoogleplusPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkGoogleplusPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-instagram", withExtension: "png")`
        static func socialNetworkInstagramPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkInstagramPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-linkedin", withExtension: "png")`
        static func socialNetworkLinkedinPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkLinkedinPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-pinterest", withExtension: "png")`
        static func socialNetworkPinterestPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkPinterestPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-skype", withExtension: "png")`
        static func socialNetworkSkypePng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkSkypePng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-snapchat", withExtension: "png")`
        static func socialNetworkSnapchatPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkSnapchatPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-soundcloud", withExtension: "png")`
        static func socialNetworkSoundcloudPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkSoundcloudPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-tumblr", withExtension: "png")`
        static func socialNetworkTumblrPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkTumblrPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-twitter", withExtension: "png")`
        static func socialNetworkTwitterPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkTwitterPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "social-network-youtube", withExtension: "png")`
        static func socialNetworkYoutubePng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.socialNetworkYoutubePng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "style", withExtension: "css")`
        static func styleCss(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.styleCss
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "stylesheet", withExtension: "css")`
        static func stylesheetCss(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.stylesheetCss
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "terms", withExtension: "html")`
        static func termsHtml(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.termsHtml
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "terms", withExtension: "svg")`
        static func termsSvg(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.termsSvg
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "tip", withExtension: "png")`
        static func tipPng(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.tipPng
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        /// `bundle.url(forResource: "tween", withExtension: "js")`
        static func tweenJs(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.tweenJs
            return fileResource.bundle.url(forResource: fileResource)
        }
        
        fileprivate init() {}
    }
    
    /// This `R.font` struct is generated, and contains static references to 19 fonts.
    struct font: Rswift.Validatable {
        
        /// Font `FontAwesome5BrandsRegular`.
        static let fontAwesome5BrandsRegular = Rswift.FontResource(fontName: "FontAwesome5BrandsRegular")
        
        /// Font `FontAwesome5ProLight`.
        static let fontAwesome5ProLight = Rswift.FontResource(fontName: "FontAwesome5ProLight")
        
        /// Font `FontAwesome5ProRegular`.
        static let fontAwesome5ProRegular = Rswift.FontResource(fontName: "FontAwesome5ProRegular")
        
        /// Font `FontAwesome5ProSolid`.
        static let fontAwesome5ProSolid = Rswift.FontResource(fontName: "FontAwesome5ProSolid")
        
        /// Font `SFProRounded-Black`.
        static let sfProRoundedBlack = Rswift.FontResource(fontName: "SFProRounded-Black")
        
        /// Font `SFProRounded-Bold`.
        static let sfProRoundedBold = Rswift.FontResource(fontName: "SFProRounded-Bold")
        
        /// Font `SFProRounded-Heavy`.
        static let sfProRoundedHeavy = Rswift.FontResource(fontName: "SFProRounded-Heavy")
        
        /// Font `SFProRounded-Light`.
        static let sfProRoundedLight = Rswift.FontResource(fontName: "SFProRounded-Light")
        
        /// Font `SFProRounded-Medium`.
        static let sfProRoundedMedium = Rswift.FontResource(fontName: "SFProRounded-Medium")
        
        /// Font `SFProRounded-Regular`.
        static let sfProRoundedRegular = Rswift.FontResource(fontName: "SFProRounded-Regular")
        
        /// Font `SFProRounded-Semibold`.
        static let sfProRoundedSemibold = Rswift.FontResource(fontName: "SFProRounded-Semibold")
        
        /// Font `SFProRounded-Thin`.
        static let sfProRoundedThin = Rswift.FontResource(fontName: "SFProRounded-Thin")
        
        /// Font `SFProRounded-Ultralight`.
        static let sfProRoundedUltralight = Rswift.FontResource(fontName: "SFProRounded-Ultralight")
        
        /// Font `SFProText-Bold`.
        static let sfProTextBold = Rswift.FontResource(fontName: "SFProText-Bold")
        
        /// Font `SFProText-Medium`.
        static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
        
        /// Font `SFProText-Regular`.
        static let sfProTextRegular = Rswift.FontResource(fontName: "SFProText-Regular")
        
        /// Font `SFProText-Semibold`.
        static let sfProTextSemibold = Rswift.FontResource(fontName: "SFProText-Semibold")
        
        /// Font `SFUIText-BoldItalic`.
        static let sfuiTextBoldItalic = Rswift.FontResource(fontName: "SFUIText-BoldItalic")
        
        /// Font `SFUIText-MediumItalic`.
        static let sfuiTextMediumItalic = Rswift.FontResource(fontName: "SFUIText-MediumItalic")
        
        /// `UIFont(name: "FontAwesome5BrandsRegular", size: ...)`
        static func fontAwesome5BrandsRegular(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: fontAwesome5BrandsRegular, size: size)
        }
        
        /// `UIFont(name: "FontAwesome5ProLight", size: ...)`
        static func fontAwesome5ProLight(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: fontAwesome5ProLight, size: size)
        }
        
        /// `UIFont(name: "FontAwesome5ProRegular", size: ...)`
        static func fontAwesome5ProRegular(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: fontAwesome5ProRegular, size: size)
        }
        
        /// `UIFont(name: "FontAwesome5ProSolid", size: ...)`
        static func fontAwesome5ProSolid(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: fontAwesome5ProSolid, size: size)
        }
        
        /// `UIFont(name: "SFProRounded-Black", size: ...)`
        static func sfProRoundedBlack(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProRoundedBlack, size: size)
        }
        
        /// `UIFont(name: "SFProRounded-Bold", size: ...)`
        static func sfProRoundedBold(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProRoundedBold, size: size)
        }
        
        /// `UIFont(name: "SFProRounded-Heavy", size: ...)`
        static func sfProRoundedHeavy(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProRoundedHeavy, size: size)
        }
        
        /// `UIFont(name: "SFProRounded-Light", size: ...)`
        static func sfProRoundedLight(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProRoundedLight, size: size)
        }
        
        /// `UIFont(name: "SFProRounded-Medium", size: ...)`
        static func sfProRoundedMedium(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProRoundedMedium, size: size)
        }
        
        /// `UIFont(name: "SFProRounded-Regular", size: ...)`
        static func sfProRoundedRegular(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProRoundedRegular, size: size)
        }
        
        /// `UIFont(name: "SFProRounded-Semibold", size: ...)`
        static func sfProRoundedSemibold(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProRoundedSemibold, size: size)
        }
        
        /// `UIFont(name: "SFProRounded-Thin", size: ...)`
        static func sfProRoundedThin(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProRoundedThin, size: size)
        }
        
        /// `UIFont(name: "SFProRounded-Ultralight", size: ...)`
        static func sfProRoundedUltralight(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProRoundedUltralight, size: size)
        }
        
        /// `UIFont(name: "SFProText-Bold", size: ...)`
        static func sfProTextBold(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProTextBold, size: size)
        }
        
        /// `UIFont(name: "SFProText-Medium", size: ...)`
        static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProTextMedium, size: size)
        }
        
        /// `UIFont(name: "SFProText-Regular", size: ...)`
        static func sfProTextRegular(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProTextRegular, size: size)
        }
        
        /// `UIFont(name: "SFProText-Semibold", size: ...)`
        static func sfProTextSemibold(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfProTextSemibold, size: size)
        }
        
        /// `UIFont(name: "SFUIText-BoldItalic", size: ...)`
        static func sfuiTextBoldItalic(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfuiTextBoldItalic, size: size)
        }
        
        /// `UIFont(name: "SFUIText-MediumItalic", size: ...)`
        static func sfuiTextMediumItalic(size: CGFloat) -> UIKit.UIFont? {
            return UIKit.UIFont(resource: sfuiTextMediumItalic, size: size)
        }
        
        static func validate() throws {
            
            if R.font.fontAwesome5BrandsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FontAwesome5BrandsRegular' could not be loaded, is 'fa-brands-400.ttf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.fontAwesome5ProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FontAwesome5ProLight' could not be loaded, is 'fa-light-300.ttf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.fontAwesome5ProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FontAwesome5ProRegular' could not be loaded, is 'fa-regular-400.ttf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.fontAwesome5ProSolid(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FontAwesome5ProSolid' could not be loaded, is 'fa-solid-900.ttf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProRoundedBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Black' could not be loaded, is 'SF-Pro-Rounded-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProRoundedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Bold' could not be loaded, is 'SF-Pro-Rounded-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProRoundedHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Heavy' could not be loaded, is 'SF-Pro-Rounded-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProRoundedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Light' could not be loaded, is 'SF-Pro-Rounded-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProRoundedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Medium' could not be loaded, is 'SF-Pro-Rounded-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProRoundedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Regular' could not be loaded, is 'SF-Pro-Rounded-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProRoundedSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Semibold' could not be loaded, is 'SF-Pro-Rounded-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProRoundedThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Thin' could not be loaded, is 'SF-Pro-Rounded-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProRoundedUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProRounded-Ultralight' could not be loaded, is 'SF-Pro-Rounded-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Bold' could not be loaded, is 'SFProText-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SFProText-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Regular' could not be loaded, is 'SFProText-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfProTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Semibold' could not be loaded, is 'SFProText-Semibold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfuiTextBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-BoldItalic' could not be loaded, is 'sftext-bolditalic-webfont.ttf' added to the UIAppFonts array in this targets Info.plist?") }
            
            if R.font.sfuiTextMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-MediumItalic' could not be loaded, is 'sftext-mediumitalic-webfont.ttf' added to the UIAppFonts array in this targets Info.plist?") }
        }
        
        fileprivate init() {}
    }
    
    /// This `R.image` struct is generated, and contains static references to 480 images.
    struct image {
        
        /// Image `AC`.
        static let aC = Rswift.ImageResource(bundle: R.hostingBundle, name: "AC")
        
        /// Image `AD`.
        static let aD = Rswift.ImageResource(bundle: R.hostingBundle, name: "AD")
        
        /// Image `AE`.
        static let aE = Rswift.ImageResource(bundle: R.hostingBundle, name: "AE")
        
        /// Image `AF`.
        static let aF = Rswift.ImageResource(bundle: R.hostingBundle, name: "AF")
        
        /// Image `AG`.
        static let aG = Rswift.ImageResource(bundle: R.hostingBundle, name: "AG")
        
        /// Image `AI`.
        static let aI = Rswift.ImageResource(bundle: R.hostingBundle, name: "AI")
        
        /// Image `AL`.
        static let aL = Rswift.ImageResource(bundle: R.hostingBundle, name: "AL")
        
        /// Image `AM`.
        static let aM = Rswift.ImageResource(bundle: R.hostingBundle, name: "AM")
        
        /// Image `AN`.
        static let aN = Rswift.ImageResource(bundle: R.hostingBundle, name: "AN")
        
        /// Image `AO`.
        static let aO = Rswift.ImageResource(bundle: R.hostingBundle, name: "AO")
        
        /// Image `AQ`.
        static let aQ = Rswift.ImageResource(bundle: R.hostingBundle, name: "AQ")
        
        /// Image `AR`.
        static let aR = Rswift.ImageResource(bundle: R.hostingBundle, name: "AR")
        
        /// Image `AS`.
        static let aS = Rswift.ImageResource(bundle: R.hostingBundle, name: "AS")
        
        /// Image `AT`.
        static let aT = Rswift.ImageResource(bundle: R.hostingBundle, name: "AT")
        
        /// Image `AU`.
        static let aU = Rswift.ImageResource(bundle: R.hostingBundle, name: "AU")
        
        /// Image `AW`.
        static let aW = Rswift.ImageResource(bundle: R.hostingBundle, name: "AW")
        
        /// Image `AX`.
        static let aX = Rswift.ImageResource(bundle: R.hostingBundle, name: "AX")
        
        /// Image `AZ`.
        static let aZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "AZ")
        
        /// Image `ActivateNFC.gif`.
        static let activateNFCGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "ActivateNFC.gif")
        
        /// Image `AddAnotherPlus`.
        static let addAnotherPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddAnotherPlus")
        
        /// Image `AddContact`.
        static let addContact = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddContact")
        
        /// Image `BA`.
        static let bA = Rswift.ImageResource(bundle: R.hostingBundle, name: "BA")
        
        /// Image `BB`.
        static let bB = Rswift.ImageResource(bundle: R.hostingBundle, name: "BB")
        
        /// Image `BD`.
        static let bD = Rswift.ImageResource(bundle: R.hostingBundle, name: "BD")
        
        /// Image `BE`.
        static let bE = Rswift.ImageResource(bundle: R.hostingBundle, name: "BE")
        
        /// Image `BF`.
        static let bF = Rswift.ImageResource(bundle: R.hostingBundle, name: "BF")
        
        /// Image `BG`.
        static let bG = Rswift.ImageResource(bundle: R.hostingBundle, name: "BG")
        
        /// Image `BH`.
        static let bH = Rswift.ImageResource(bundle: R.hostingBundle, name: "BH")
        
        /// Image `BI`.
        static let bI = Rswift.ImageResource(bundle: R.hostingBundle, name: "BI")
        
        /// Image `BJ`.
        static let bJ = Rswift.ImageResource(bundle: R.hostingBundle, name: "BJ")
        
        /// Image `BL`.
        static let bL = Rswift.ImageResource(bundle: R.hostingBundle, name: "BL")
        
        /// Image `BM`.
        static let bM = Rswift.ImageResource(bundle: R.hostingBundle, name: "BM")
        
        /// Image `BN`.
        static let bN = Rswift.ImageResource(bundle: R.hostingBundle, name: "BN")
        
        /// Image `BO`.
        static let bO = Rswift.ImageResource(bundle: R.hostingBundle, name: "BO")
        
        /// Image `BQ`.
        static let bQ = Rswift.ImageResource(bundle: R.hostingBundle, name: "BQ")
        
        /// Image `BR`.
        static let bR = Rswift.ImageResource(bundle: R.hostingBundle, name: "BR")
        
        /// Image `BS`.
        static let bS = Rswift.ImageResource(bundle: R.hostingBundle, name: "BS")
        
        /// Image `BT`.
        static let bT = Rswift.ImageResource(bundle: R.hostingBundle, name: "BT")
        
        /// Image `BV`.
        static let bV = Rswift.ImageResource(bundle: R.hostingBundle, name: "BV")
        
        /// Image `BW`.
        static let bW = Rswift.ImageResource(bundle: R.hostingBundle, name: "BW")
        
        /// Image `BY`.
        static let bY = Rswift.ImageResource(bundle: R.hostingBundle, name: "BY")
        
        /// Image `BZ`.
        static let bZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "BZ")
        
        /// Image `BackArrow`.
        static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackArrow")
        
        /// Image `BlueProLargeIcon`.
        static let blueProLargeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlueProLargeIcon")
        
        /// Image `BluePro`.
        static let bluePro = Rswift.ImageResource(bundle: R.hostingBundle, name: "BluePro")
        
        /// Image `BreakTheIceWhite`.
        static let breakTheIceWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "BreakTheIceWhite")
        
        /// Image `CA`.
        static let cA = Rswift.ImageResource(bundle: R.hostingBundle, name: "CA")
        
        /// Image `CC`.
        static let cC = Rswift.ImageResource(bundle: R.hostingBundle, name: "CC")
        
        /// Image `CD`.
        static let cD = Rswift.ImageResource(bundle: R.hostingBundle, name: "CD")
        
        /// Image `CF`.
        static let cF = Rswift.ImageResource(bundle: R.hostingBundle, name: "CF")
        
        /// Image `CG`.
        static let cG = Rswift.ImageResource(bundle: R.hostingBundle, name: "CG")
        
        /// Image `CH`.
        static let cH = Rswift.ImageResource(bundle: R.hostingBundle, name: "CH")
        
        /// Image `CI`.
        static let cI = Rswift.ImageResource(bundle: R.hostingBundle, name: "CI")
        
        /// Image `CK`.
        static let cK = Rswift.ImageResource(bundle: R.hostingBundle, name: "CK")
        
        /// Image `CL`.
        static let cL = Rswift.ImageResource(bundle: R.hostingBundle, name: "CL")
        
        /// Image `CM`.
        static let cM = Rswift.ImageResource(bundle: R.hostingBundle, name: "CM")
        
        /// Image `CN`.
        static let cN = Rswift.ImageResource(bundle: R.hostingBundle, name: "CN")
        
        /// Image `CO`.
        static let cO = Rswift.ImageResource(bundle: R.hostingBundle, name: "CO")
        
        /// Image `CR`.
        static let cR = Rswift.ImageResource(bundle: R.hostingBundle, name: "CR")
        
        /// Image `CU`.
        static let cU = Rswift.ImageResource(bundle: R.hostingBundle, name: "CU")
        
        /// Image `CV`.
        static let cV = Rswift.ImageResource(bundle: R.hostingBundle, name: "CV")
        
        /// Image `CW`.
        static let cW = Rswift.ImageResource(bundle: R.hostingBundle, name: "CW")
        
        /// Image `CX`.
        static let cX = Rswift.ImageResource(bundle: R.hostingBundle, name: "CX")
        
        /// Image `CY`.
        static let cY = Rswift.ImageResource(bundle: R.hostingBundle, name: "CY")
        
        /// Image `CZ`.
        static let cZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "CZ")
        
        /// Image `DE`.
        static let dE = Rswift.ImageResource(bundle: R.hostingBundle, name: "DE")
        
        /// Image `DJ`.
        static let dJ = Rswift.ImageResource(bundle: R.hostingBundle, name: "DJ")
        
        /// Image `DK`.
        static let dK = Rswift.ImageResource(bundle: R.hostingBundle, name: "DK")
        
        /// Image `DM`.
        static let dM = Rswift.ImageResource(bundle: R.hostingBundle, name: "DM")
        
        /// Image `DO`.
        static let dO = Rswift.ImageResource(bundle: R.hostingBundle, name: "DO")
        
        /// Image `DZ`.
        static let dZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "DZ")
        
        /// Image `DashboardArrow`.
        static let dashboardArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "DashboardArrow")
        
        /// Image `DiscoverModeWhite`.
        static let discoverModeWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "DiscoverModeWhite")
        
        /// Image `DiscoverSelected`.
        static let discoverSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "DiscoverSelected")
        
        /// Image `Discover`.
        static let discover = Rswift.ImageResource(bundle: R.hostingBundle, name: "Discover")
        
        /// Image `DownloadInteraction`.
        static let downloadInteraction = Rswift.ImageResource(bundle: R.hostingBundle, name: "DownloadInteraction")
        
        /// Image `DownloadQRCode`.
        static let downloadQRCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "DownloadQRCode")
        
        /// Image `Download_on_the_App_Store`.
        static let download_on_the_App_Store = Rswift.ImageResource(bundle: R.hostingBundle, name: "Download_on_the_App_Store")
        
        /// Image `Download_on_the_Play_Store`.
        static let download_on_the_Play_Store = Rswift.ImageResource(bundle: R.hostingBundle, name: "Download_on_the_Play_Store")
        
        /// Image `EC`.
        static let eC = Rswift.ImageResource(bundle: R.hostingBundle, name: "EC")
        
        /// Image `EE`.
        static let eE = Rswift.ImageResource(bundle: R.hostingBundle, name: "EE")
        
        /// Image `EG`.
        static let eG = Rswift.ImageResource(bundle: R.hostingBundle, name: "EG")
        
        /// Image `EH`.
        static let eH = Rswift.ImageResource(bundle: R.hostingBundle, name: "EH")
        
        /// Image `ER`.
        static let eR = Rswift.ImageResource(bundle: R.hostingBundle, name: "ER")
        
        /// Image `ES`.
        static let eS = Rswift.ImageResource(bundle: R.hostingBundle, name: "ES")
        
        /// Image `ET`.
        static let eT = Rswift.ImageResource(bundle: R.hostingBundle, name: "ET")
        
        /// Image `EditTitlePencil`.
        static let editTitlePencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditTitlePencil")
        
        /// Image `ExpandNetworkOptions`.
        static let expandNetworkOptions = Rswift.ImageResource(bundle: R.hostingBundle, name: "ExpandNetworkOptions")
        
        /// Image `FAQ`.
        static let faQ = Rswift.ImageResource(bundle: R.hostingBundle, name: "FAQ")
        
        /// Image `FI`.
        static let fI = Rswift.ImageResource(bundle: R.hostingBundle, name: "FI")
        
        /// Image `FJ`.
        static let fJ = Rswift.ImageResource(bundle: R.hostingBundle, name: "FJ")
        
        /// Image `FK`.
        static let fK = Rswift.ImageResource(bundle: R.hostingBundle, name: "FK")
        
        /// Image `FM`.
        static let fM = Rswift.ImageResource(bundle: R.hostingBundle, name: "FM")
        
        /// Image `FO`.
        static let fO = Rswift.ImageResource(bundle: R.hostingBundle, name: "FO")
        
        /// Image `FR`.
        static let fR = Rswift.ImageResource(bundle: R.hostingBundle, name: "FR")
        
        /// Image `FX`.
        static let fX = Rswift.ImageResource(bundle: R.hostingBundle, name: "FX")
        
        /// Image `Feedback`.
        static let feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "Feedback")
        
        /// Image `tellAFriend`.
        static let tellAFriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "tellAFriend")
        
        /// Image `GA`.
        static let gA = Rswift.ImageResource(bundle: R.hostingBundle, name: "GA")
        
        /// Image `GB`.
        static let gB = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB")
        
        /// Image `GD`.
        static let gD = Rswift.ImageResource(bundle: R.hostingBundle, name: "GD")
        
        /// Image `GE`.
        static let gE = Rswift.ImageResource(bundle: R.hostingBundle, name: "GE")
        
        /// Image `GF`.
        static let gF = Rswift.ImageResource(bundle: R.hostingBundle, name: "GF")
        
        /// Image `GG`.
        static let gG = Rswift.ImageResource(bundle: R.hostingBundle, name: "GG")
        
        /// Image `GH`.
        static let gH = Rswift.ImageResource(bundle: R.hostingBundle, name: "GH")
        
        /// Image `GI`.
        static let gI = Rswift.ImageResource(bundle: R.hostingBundle, name: "GI")
        
        /// Image `GL`.
        static let gL = Rswift.ImageResource(bundle: R.hostingBundle, name: "GL")
        
        /// Image `GM`.
        static let gM = Rswift.ImageResource(bundle: R.hostingBundle, name: "GM")
        
        /// Image `GN`.
        static let gN = Rswift.ImageResource(bundle: R.hostingBundle, name: "GN")
        
        /// Image `GP`.
        static let gP = Rswift.ImageResource(bundle: R.hostingBundle, name: "GP")
        
        /// Image `GQ`.
        static let gQ = Rswift.ImageResource(bundle: R.hostingBundle, name: "GQ")
        
        /// Image `GR`.
        static let gR = Rswift.ImageResource(bundle: R.hostingBundle, name: "GR")
        
        /// Image `GS`.
        static let gS = Rswift.ImageResource(bundle: R.hostingBundle, name: "GS")
        
        /// Image `GT`.
        static let gT = Rswift.ImageResource(bundle: R.hostingBundle, name: "GT")
        
        /// Image `GU`.
        static let gU = Rswift.ImageResource(bundle: R.hostingBundle, name: "GU")
        
        /// Image `GW`.
        static let gW = Rswift.ImageResource(bundle: R.hostingBundle, name: "GW")
        
        /// Image `GY`.
        static let gY = Rswift.ImageResource(bundle: R.hostingBundle, name: "GY")
        
        /// Image `GetPaid`.
        static let getPaid = Rswift.ImageResource(bundle: R.hostingBundle, name: "GetPaid")
        
        /// Image `GoPro`.
        static let goPro = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoPro")
        
        /// Image `HK`.
        static let hK = Rswift.ImageResource(bundle: R.hostingBundle, name: "HK")
        
        /// Image `HM`.
        static let hM = Rswift.ImageResource(bundle: R.hostingBundle, name: "HM")
        
        /// Image `HN`.
        static let hN = Rswift.ImageResource(bundle: R.hostingBundle, name: "HN")
        
        /// Image `HR`.
        static let hR = Rswift.ImageResource(bundle: R.hostingBundle, name: "HR")
        
        /// Image `HT`.
        static let hT = Rswift.ImageResource(bundle: R.hostingBundle, name: "HT")
        
        /// Image `HU`.
        static let hU = Rswift.ImageResource(bundle: R.hostingBundle, name: "HU")
        
        /// Image `HidePassword`.
        static let hidePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "HidePassword")
        
        /// Image `ID`.
        static let iD = Rswift.ImageResource(bundle: R.hostingBundle, name: "ID")
        
        /// Image `IE`.
        static let iE = Rswift.ImageResource(bundle: R.hostingBundle, name: "IE")
        
        /// Image `IL`.
        static let iL = Rswift.ImageResource(bundle: R.hostingBundle, name: "IL")
        
        /// Image `IM`.
        static let iM = Rswift.ImageResource(bundle: R.hostingBundle, name: "IM")
        
        /// Image `IN`.
        static let iN = Rswift.ImageResource(bundle: R.hostingBundle, name: "IN")
        
        /// Image `IO`.
        static let iO = Rswift.ImageResource(bundle: R.hostingBundle, name: "IO")
        
        /// Image `IQ`.
        static let iQ = Rswift.ImageResource(bundle: R.hostingBundle, name: "IQ")
        
        /// Image `IR`.
        static let iR = Rswift.ImageResource(bundle: R.hostingBundle, name: "IR")
        
        /// Image `IS`.
        static let iS = Rswift.ImageResource(bundle: R.hostingBundle, name: "IS")
        
        /// Image `IT`.
        static let iT = Rswift.ImageResource(bundle: R.hostingBundle, name: "IT")
        
        /// Image `InsightsSelected`.
        static let insightsSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "InsightsSelected")
        
        /// Image `Insights`.
        static let insights = Rswift.ImageResource(bundle: R.hostingBundle, name: "Insights")
        
        /// Image `InteractionsSelected`.
        static let interactionsSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "InteractionsSelected")
        
        /// Image `Interactions`.
        static let interactions = Rswift.ImageResource(bundle: R.hostingBundle, name: "Interactions")
        
        /// Image `InvalidUsername`.
        static let invalidUsername = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvalidUsername")
        
        /// Image `IsPremiumUserDefault`.
        static let isPremiumUserDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "IsPremiumUserDefault")
        
        /// Image `IsPremiumUser`.
        static let isPremiumUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "IsPremiumUser")
        
        /// Image `JE`.
        static let jE = Rswift.ImageResource(bundle: R.hostingBundle, name: "JE")
        
        /// Image `JM`.
        static let jM = Rswift.ImageResource(bundle: R.hostingBundle, name: "JM")
        
        /// Image `JO`.
        static let jO = Rswift.ImageResource(bundle: R.hostingBundle, name: "JO")
        
        /// Image `JP`.
        static let jP = Rswift.ImageResource(bundle: R.hostingBundle, name: "JP")
        
        /// Image `KE`.
        static let kE = Rswift.ImageResource(bundle: R.hostingBundle, name: "KE")
        
        /// Image `KG`.
        static let kG = Rswift.ImageResource(bundle: R.hostingBundle, name: "KG")
        
        /// Image `KH`.
        static let kH = Rswift.ImageResource(bundle: R.hostingBundle, name: "KH")
        
        /// Image `KI`.
        static let kI = Rswift.ImageResource(bundle: R.hostingBundle, name: "KI")
        
        /// Image `KM`.
        static let kM = Rswift.ImageResource(bundle: R.hostingBundle, name: "KM")
        
        /// Image `KN`.
        static let kN = Rswift.ImageResource(bundle: R.hostingBundle, name: "KN")
        
        /// Image `KP`.
        static let kP = Rswift.ImageResource(bundle: R.hostingBundle, name: "KP")
        
        /// Image `KR`.
        static let kR = Rswift.ImageResource(bundle: R.hostingBundle, name: "KR")
        
        /// Image `KW`.
        static let kW = Rswift.ImageResource(bundle: R.hostingBundle, name: "KW")
        
        /// Image `KY`.
        static let kY = Rswift.ImageResource(bundle: R.hostingBundle, name: "KY")
        
        /// Image `KZ`.
        static let kZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "KZ")
        
        /// Image `LA`.
        static let lA = Rswift.ImageResource(bundle: R.hostingBundle, name: "LA")
        
        /// Image `LB`.
        static let lB = Rswift.ImageResource(bundle: R.hostingBundle, name: "LB")
        
        /// Image `LC`.
        static let lC = Rswift.ImageResource(bundle: R.hostingBundle, name: "LC")
        
        /// Image `LI`.
        static let lI = Rswift.ImageResource(bundle: R.hostingBundle, name: "LI")
        
        /// Image `LK`.
        static let lK = Rswift.ImageResource(bundle: R.hostingBundle, name: "LK")
        
        /// Image `LR`.
        static let lR = Rswift.ImageResource(bundle: R.hostingBundle, name: "LR")
        
        /// Image `LS`.
        static let lS = Rswift.ImageResource(bundle: R.hostingBundle, name: "LS")
        
        /// Image `LT`.
        static let lT = Rswift.ImageResource(bundle: R.hostingBundle, name: "LT")
        
        /// Image `LU`.
        static let lU = Rswift.ImageResource(bundle: R.hostingBundle, name: "LU")
        
        /// Image `LV`.
        static let lV = Rswift.ImageResource(bundle: R.hostingBundle, name: "LV")
        
        /// Image `LY`.
        static let lY = Rswift.ImageResource(bundle: R.hostingBundle, name: "LY")
        
        /// Image `LaunchScreenLogo`.
        static let launchScreenLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchScreenLogo")
        
        /// Image `LeftArrow_blue`.
        static let leftArrow_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "LeftArrow_blue")
        
        /// Image `LeftArrow`.
        static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "LeftArrow")
        
        /// Image `Logout`.
        static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logout")
        
        /// Image `MA`.
        static let mA = Rswift.ImageResource(bundle: R.hostingBundle, name: "MA")
        
        /// Image `MC`.
        static let mC = Rswift.ImageResource(bundle: R.hostingBundle, name: "MC")
        
        /// Image `MD`.
        static let mD = Rswift.ImageResource(bundle: R.hostingBundle, name: "MD")
        
        /// Image `ME`.
        static let mE = Rswift.ImageResource(bundle: R.hostingBundle, name: "ME")
        
        /// Image `MF`.
        static let mF = Rswift.ImageResource(bundle: R.hostingBundle, name: "MF")
        
        /// Image `MG`.
        static let mG = Rswift.ImageResource(bundle: R.hostingBundle, name: "MG")
        
        /// Image `MH`.
        static let mH = Rswift.ImageResource(bundle: R.hostingBundle, name: "MH")
        
        /// Image `MK`.
        static let mK = Rswift.ImageResource(bundle: R.hostingBundle, name: "MK")
        
        /// Image `ML`.
        static let mL = Rswift.ImageResource(bundle: R.hostingBundle, name: "ML")
        
        /// Image `MM`.
        static let mM = Rswift.ImageResource(bundle: R.hostingBundle, name: "MM")
        
        /// Image `MN`.
        static let mN = Rswift.ImageResource(bundle: R.hostingBundle, name: "MN")
        
        /// Image `MO`.
        static let mO = Rswift.ImageResource(bundle: R.hostingBundle, name: "MO")
        
        /// Image `MP`.
        static let mP = Rswift.ImageResource(bundle: R.hostingBundle, name: "MP")
        
        /// Image `MQ`.
        static let mQ = Rswift.ImageResource(bundle: R.hostingBundle, name: "MQ")
        
        /// Image `MR`.
        static let mR = Rswift.ImageResource(bundle: R.hostingBundle, name: "MR")
        
        /// Image `MS`.
        static let mS = Rswift.ImageResource(bundle: R.hostingBundle, name: "MS")
        
        /// Image `MT`.
        static let mT = Rswift.ImageResource(bundle: R.hostingBundle, name: "MT")
        
        /// Image `MU`.
        static let mU = Rswift.ImageResource(bundle: R.hostingBundle, name: "MU")
        
        /// Image `MV`.
        static let mV = Rswift.ImageResource(bundle: R.hostingBundle, name: "MV")
        
        /// Image `MW`.
        static let mW = Rswift.ImageResource(bundle: R.hostingBundle, name: "MW")
        
        /// Image `MX`.
        static let mX = Rswift.ImageResource(bundle: R.hostingBundle, name: "MX")
        
        /// Image `MY`.
        static let mY = Rswift.ImageResource(bundle: R.hostingBundle, name: "MY")
        
        /// Image `MZ`.
        static let mZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "MZ")
        
        /// Image `MailQRCode`.
        static let mailQRCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "MailQRCode")
        
        /// Image `NA`.
        static let nA = Rswift.ImageResource(bundle: R.hostingBundle, name: "NA")
        
        /// Image `NC`.
        static let nC = Rswift.ImageResource(bundle: R.hostingBundle, name: "NC")
        
        /// Image `NE`.
        static let nE = Rswift.ImageResource(bundle: R.hostingBundle, name: "NE")
        
        /// Image `NFCWhite`.
        static let nfcWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "NFCWhite")
        
        /// Image `NFC`.
        static let nfC = Rswift.ImageResource(bundle: R.hostingBundle, name: "NFC")
        
        /// Image `NF`.
        static let nF = Rswift.ImageResource(bundle: R.hostingBundle, name: "NF")
        
        /// Image `NG`.
        static let nG = Rswift.ImageResource(bundle: R.hostingBundle, name: "NG")
        
        /// Image `NI`.
        static let nI = Rswift.ImageResource(bundle: R.hostingBundle, name: "NI")
        
        /// Image `NL`.
        static let nL = Rswift.ImageResource(bundle: R.hostingBundle, name: "NL")
        
        /// Image `NO`.
        static let nO = Rswift.ImageResource(bundle: R.hostingBundle, name: "NO")
        
        /// Image `NP`.
        static let nP = Rswift.ImageResource(bundle: R.hostingBundle, name: "NP")
        
        /// Image `NR`.
        static let nR = Rswift.ImageResource(bundle: R.hostingBundle, name: "NR")
        
        /// Image `NU`.
        static let nU = Rswift.ImageResource(bundle: R.hostingBundle, name: "NU")
        
        /// Image `NZ`.
        static let nZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "NZ")
        
        /// Image `OM`.
        static let oM = Rswift.ImageResource(bundle: R.hostingBundle, name: "OM")
        
        /// Image `PA`.
        static let pA = Rswift.ImageResource(bundle: R.hostingBundle, name: "PA")
        
        /// Image `PE`.
        static let pE = Rswift.ImageResource(bundle: R.hostingBundle, name: "PE")
        
        /// Image `PF`.
        static let pF = Rswift.ImageResource(bundle: R.hostingBundle, name: "PF")
        
        /// Image `PG`.
        static let pG = Rswift.ImageResource(bundle: R.hostingBundle, name: "PG")
        
        /// Image `PH`.
        static let pH = Rswift.ImageResource(bundle: R.hostingBundle, name: "PH")
        
        /// Image `PK`.
        static let pK = Rswift.ImageResource(bundle: R.hostingBundle, name: "PK")
        
        /// Image `PL`.
        static let pL = Rswift.ImageResource(bundle: R.hostingBundle, name: "PL")
        
        /// Image `PM`.
        static let pM = Rswift.ImageResource(bundle: R.hostingBundle, name: "PM")
        
        /// Image `PN`.
        static let pN = Rswift.ImageResource(bundle: R.hostingBundle, name: "PN")
        
        /// Image `PR`.
        static let pR = Rswift.ImageResource(bundle: R.hostingBundle, name: "PR")
        
        /// Image `PS`.
        static let pS = Rswift.ImageResource(bundle: R.hostingBundle, name: "PS")
        
        /// Image `PT`.
        static let pT = Rswift.ImageResource(bundle: R.hostingBundle, name: "PT")
        
        /// Image `PW`.
        static let pW = Rswift.ImageResource(bundle: R.hostingBundle, name: "PW")
        
        /// Image `PY`.
        static let pY = Rswift.ImageResource(bundle: R.hostingBundle, name: "PY")
        
        /// Image `PrintQRCode`.
        static let printQRCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "PrintQRCode")
        
        /// Image `PrivateModeLock`.
        static let privateModeLock = Rswift.ImageResource(bundle: R.hostingBundle, name: "PrivateModeLock")
        
        /// Image `ProfilePlaceholder`.
        static let profilePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfilePlaceholder")
        
        /// Image `ProfileQRCode`.
        static let profileQRCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileQRCode")
        
        /// Image `QA`.
        static let qA = Rswift.ImageResource(bundle: R.hostingBundle, name: "QA")
        
        /// Image `RE`.
        static let rE = Rswift.ImageResource(bundle: R.hostingBundle, name: "RE")
        
        /// Image `RO`.
        static let rO = Rswift.ImageResource(bundle: R.hostingBundle, name: "RO")
        
        /// Image `RS`.
        static let rS = Rswift.ImageResource(bundle: R.hostingBundle, name: "RS")
        
        /// Image `RU`.
        static let rU = Rswift.ImageResource(bundle: R.hostingBundle, name: "RU")
        
        /// Image `RW`.
        static let rW = Rswift.ImageResource(bundle: R.hostingBundle, name: "RW")
        
        /// Image `RightArrow`.
        static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "RightArrow")
        
        /// Image `SA`.
        static let sA = Rswift.ImageResource(bundle: R.hostingBundle, name: "SA")
        
        /// Image `SB`.
        static let sB = Rswift.ImageResource(bundle: R.hostingBundle, name: "SB")
        
        /// Image `SC`.
        static let sC = Rswift.ImageResource(bundle: R.hostingBundle, name: "SC")
        
        /// Image `SD`.
        static let sD = Rswift.ImageResource(bundle: R.hostingBundle, name: "SD")
        
        /// Image `SE`.
        static let sE = Rswift.ImageResource(bundle: R.hostingBundle, name: "SE")
        
        /// Image `SG`.
        static let sG = Rswift.ImageResource(bundle: R.hostingBundle, name: "SG")
        
        /// Image `SH`.
        static let sH = Rswift.ImageResource(bundle: R.hostingBundle, name: "SH")
        
        /// Image `SI`.
        static let sI = Rswift.ImageResource(bundle: R.hostingBundle, name: "SI")
        
        /// Image `SJ`.
        static let sJ = Rswift.ImageResource(bundle: R.hostingBundle, name: "SJ")
        
        /// Image `SK`.
        static let sK = Rswift.ImageResource(bundle: R.hostingBundle, name: "SK")
        
        /// Image `SL`.
        static let sL = Rswift.ImageResource(bundle: R.hostingBundle, name: "SL")
        
        /// Image `SM`.
        static let sM = Rswift.ImageResource(bundle: R.hostingBundle, name: "SM")
        
        /// Image `SN`.
        static let sN = Rswift.ImageResource(bundle: R.hostingBundle, name: "SN")
        
        /// Image `SO`.
        static let sO = Rswift.ImageResource(bundle: R.hostingBundle, name: "SO")
        
        /// Image `SR`.
        static let sR = Rswift.ImageResource(bundle: R.hostingBundle, name: "SR")
        
        /// Image `SS`.
        static let sS = Rswift.ImageResource(bundle: R.hostingBundle, name: "SS")
        
        /// Image `ST`.
        static let sT = Rswift.ImageResource(bundle: R.hostingBundle, name: "ST")
        
        /// Image `SV`.
        static let sV = Rswift.ImageResource(bundle: R.hostingBundle, name: "SV")
        
        /// Image `SX`.
        static let sX = Rswift.ImageResource(bundle: R.hostingBundle, name: "SX")
        
        /// Image `SY`.
        static let sY = Rswift.ImageResource(bundle: R.hostingBundle, name: "SY")
        
        /// Image `SZ`.
        static let sZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "SZ")
        
        /// Image `ShareQRCode`.
        static let shareQRCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShareQRCode")
        
        /// Image `Shop`.
        static let shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shop")
        
        /// Image `ShowPassword`.
        static let showPassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShowPassword")
        
        /// Image `SubscriptionScreenImage1`.
        static let subscriptionScreenImage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "SubscriptionScreenImage1")
        
        /// Image `SubscriptionScreenImage3`.
        static let subscriptionScreenImage3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "SubscriptionScreenImage3")
        
        /// Image `SubscriptionScreenImage4`.
        static let subscriptionScreenImage4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "SubscriptionScreenImage4")
        
        /// Image `TC`.
        static let tC = Rswift.ImageResource(bundle: R.hostingBundle, name: "TC")
        
        /// Image `TD`.
        static let tD = Rswift.ImageResource(bundle: R.hostingBundle, name: "TD")
        
        /// Image `TF`.
        static let tF = Rswift.ImageResource(bundle: R.hostingBundle, name: "TF")
        
        /// Image `TG`.
        static let tG = Rswift.ImageResource(bundle: R.hostingBundle, name: "TG")
        
        /// Image `TH`.
        static let tH = Rswift.ImageResource(bundle: R.hostingBundle, name: "TH")
        
        /// Image `TJ`.
        static let tJ = Rswift.ImageResource(bundle: R.hostingBundle, name: "TJ")
        
        /// Image `TK`.
        static let tK = Rswift.ImageResource(bundle: R.hostingBundle, name: "TK")
        
        /// Image `TL`.
        static let tL = Rswift.ImageResource(bundle: R.hostingBundle, name: "TL")
        
        /// Image `TM`.
        static let tM = Rswift.ImageResource(bundle: R.hostingBundle, name: "TM")
        
        /// Image `TN`.
        static let tN = Rswift.ImageResource(bundle: R.hostingBundle, name: "TN")
        
        /// Image `TO`.
        static let tO = Rswift.ImageResource(bundle: R.hostingBundle, name: "TO")
        
        /// Image `TR`.
        static let tR = Rswift.ImageResource(bundle: R.hostingBundle, name: "TR")
        
        /// Image `TT`.
        static let tT = Rswift.ImageResource(bundle: R.hostingBundle, name: "TT")
        
        /// Image `TV`.
        static let tV = Rswift.ImageResource(bundle: R.hostingBundle, name: "TV")
        
        /// Image `TW`.
        static let tW = Rswift.ImageResource(bundle: R.hostingBundle, name: "TW")
        
        /// Image `TZ`.
        static let tZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "TZ")
        
        /// Image `UA`.
        static let uA = Rswift.ImageResource(bundle: R.hostingBundle, name: "UA")
        
        /// Image `UG`.
        static let uG = Rswift.ImageResource(bundle: R.hostingBundle, name: "UG")
        
        /// Image `UM`.
        static let uM = Rswift.ImageResource(bundle: R.hostingBundle, name: "UM")
        
        /// Image `US`.
        static let uS = Rswift.ImageResource(bundle: R.hostingBundle, name: "US")
        
        /// Image `UY`.
        static let uY = Rswift.ImageResource(bundle: R.hostingBundle, name: "UY")
        
        /// Image `UZ`.
        static let uZ = Rswift.ImageResource(bundle: R.hostingBundle, name: "UZ")
        
        /// Image `UserImagePlaceholer`.
        static let userImagePlaceholer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_AppLogo")
        
        /// Image `VA`.
        static let vA = Rswift.ImageResource(bundle: R.hostingBundle, name: "VA")
        
        /// Image `VC`.
        static let vC = Rswift.ImageResource(bundle: R.hostingBundle, name: "VC")
        
        /// Image `VE`.
        static let vE = Rswift.ImageResource(bundle: R.hostingBundle, name: "VE")
        
        /// Image `VG`.
        static let vG = Rswift.ImageResource(bundle: R.hostingBundle, name: "VG")
        
        /// Image `VI`.
        static let vI = Rswift.ImageResource(bundle: R.hostingBundle, name: "VI")
        
        /// Image `VN`.
        static let vN = Rswift.ImageResource(bundle: R.hostingBundle, name: "VN")
        
        /// Image `VU`.
        static let vU = Rswift.ImageResource(bundle: R.hostingBundle, name: "VU")
        
        /// Image `ValidAccount`.
        static let validAccount = Rswift.ImageResource(bundle: R.hostingBundle, name: "ValidAccount")
        
        /// Image `WF`.
        static let wF = Rswift.ImageResource(bundle: R.hostingBundle, name: "WF")
        
        /// Image `WS`.
        static let wS = Rswift.ImageResource(bundle: R.hostingBundle, name: "WS")
        
        /// Image `WhiteDownArrow`.
        static let whiteDownArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhiteDownArrow")
        
        /// Image `WhiteQRCode`.
        static let whiteQRCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhiteQRCode")
        
        /// Image `White_close`.
        static let white_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "White_close")
        
        /// Image `XK`.
        static let xK = Rswift.ImageResource(bundle: R.hostingBundle, name: "XK")
        
        /// Image `YE`.
        static let yE = Rswift.ImageResource(bundle: R.hostingBundle, name: "YE")
        
        /// Image `YT`.
        static let yT = Rswift.ImageResource(bundle: R.hostingBundle, name: "YT")
        
        /// Image `YU`.
        static let yU = Rswift.ImageResource(bundle: R.hostingBundle, name: "YU")
        
        /// Image `ZA`.
        static let zA = Rswift.ImageResource(bundle: R.hostingBundle, name: "ZA")
        
        /// Image `ZM`.
        static let zM = Rswift.ImageResource(bundle: R.hostingBundle, name: "ZM")
        
        /// Image `ZW`.
        static let zW = Rswift.ImageResource(bundle: R.hostingBundle, name: "ZW")
        
        /// Image `add-image`.
        static let addImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "add-image")
        
        /// Image `android-icon-144x144`.
        static let androidIcon144x144 = Rswift.ImageResource(bundle: R.hostingBundle, name: "android-icon-144x144")
        
        /// Image `android-icon-192x192`.
        static let androidIcon192x192 = Rswift.ImageResource(bundle: R.hostingBundle, name: "android-icon-192x192")
        
        /// Image `android-icon-36x36`.
        static let androidIcon36x36 = Rswift.ImageResource(bundle: R.hostingBundle, name: "android-icon-36x36")
        
        /// Image `android-icon-48x48`.
        static let androidIcon48x48 = Rswift.ImageResource(bundle: R.hostingBundle, name: "android-icon-48x48")
        
        /// Image `android-icon-72x72`.
        static let androidIcon72x72 = Rswift.ImageResource(bundle: R.hostingBundle, name: "android-icon-72x72")
        
        /// Image `android-icon-96x96`.
        static let androidIcon96x96 = Rswift.ImageResource(bundle: R.hostingBundle, name: "android-icon-96x96")
        
        /// Image `apple-icon-114x114`.
        static let appleIcon114x114 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-114x114")
        
        /// Image `apple-icon-120x120`.
        static let appleIcon120x120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-120x120")
        
        /// Image `apple-icon-144x144`.
        static let appleIcon144x144 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-144x144")
        
        /// Image `apple-icon-152x152`.
        static let appleIcon152x152 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-152x152")
        
        /// Image `apple-icon-180x180`.
        static let appleIcon180x180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-180x180")
        
        /// Image `apple-icon-57x57`.
        static let appleIcon57x57 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-57x57")
        
        /// Image `apple-icon-60x60`.
        static let appleIcon60x60 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-60x60")
        
        /// Image `apple-icon-72x72`.
        static let appleIcon72x72 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-72x72")
        
        /// Image `apple-icon-76x76`.
        static let appleIcon76x76 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-76x76")
        
        /// Image `apple-icon-precomposed`.
        static let appleIconPrecomposed = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon-precomposed")
        
        /// Image `apple-icon`.
        static let appleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple-icon")
        
        /// Image `bg1`.
        static let bg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg1")
        
        /// Image `blue-logo`.
        static let blueLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue-logo")
        
        /// Image `blue-team`.
        static let blueTeam = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue-team")
        
        /// Image `blue2`.
        static let blue2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue2")
        
        /// Image `blue3`.
        static let blue3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue3")
        
        /// Image `blue4`.
        static let blue4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "blue4")
        
        /// Image `bluetooth`.
        static let bluetooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "bluetooth")
        
        /// Image `close`.
        static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
        
        /// Image `createAccountImage`.
        static let createAccountImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "createAccountImage")
        
        /// Image `favicon-16x16`.
        static let favicon16x16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "favicon-16x16")
        
        /// Image `favicon-32x32`.
        static let favicon32x32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "favicon-32x32")
        
        /// Image `favicon-96x96`.
        static let favicon96x96 = Rswift.ImageResource(bundle: R.hostingBundle, name: "favicon-96x96")
        
        /// Image `favicon.ico`.
        static let faviconIco = Rswift.ImageResource(bundle: R.hostingBundle, name: "favicon.ico")
        
        /// Image `ic_About_facebook`.
        static let ic_About_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_About_facebook")
        
        /// Image `ic_About_instagram`.
        static let ic_About_instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_About_instagram")
        
        /// Image `ic_About_linkedin`.
        static let ic_About_linkedin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_About_linkedin")
        
        /// Image `ic_About_twitter`.
        static let ic_About_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_About_twitter")
        
        /// Image `ic_AddAccount`.
        static let ic_AddAccount = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_AddAccount")
        
        /// Image `ic_Addressclose`.
        static let ic_Addressclose = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Addressclose")
        
        /// Image `ic_AppLogo`.
        static let ic_AppLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_AppLogo")
        
        /// Image `ic_Back`.
        static let ic_Back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Back")
        
        /// Image `ic_Blue`.
        static let ic_Blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Blue")
        
        /// Image `ic_Camera`.
        static let ic_Camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Camera")
        
        /// Image `ic_Edit`.
        static let ic_Edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Edit")
        
        /// Image `ic_Errors`.
        static let ic_Errors = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Errors")
        
        /// Image `ic_MenuBG`.
        static let ic_MenuBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_MenuBG")
        
        /// Image `ic_Selectedgrid`.
        static let ic_Selectedgrid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Selectedgrid")
        
        /// Image `ic_Selectedlist`.
        static let ic_Selectedlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Selectedlist")
        
        /// Image `ic_Shop_n`.
        static let ic_Shop_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Shop_n")
        
        /// Image `ic_about`.
        static let ic_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_about")
        
        /// Image `ic_addcontacts`.
        static let ic_addcontacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_addcontacts")
        
        /// Image `ic_animation`.
        static let ic_animation = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_animation")
        
        /// Image `ic_backarrow`.
        static let ic_backarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_backarrow")
        
        /// Image `ic_card`.
        static let ic_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card")
        
        /// Image `ic_closeBlue`.
        static let ic_closeBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_closeBlue")
        
        /// Image `ic_close`.
        static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
        
        /// Image `ic_copy`.
        static let ic_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_copy")
        
        /// Image `ic_copylink`.
        static let ic_copylink = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_copylink")
        
        /// Image `ic_correct`.
        static let ic_correct = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_correct")
        
        /// Image `ic_cross`.
        static let ic_cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cross")
        
        /// Image `ic_editprofile`.
        static let ic_editprofile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_editprofile")
        
        /// Image `ic_error`.
        static let ic_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_error")
        
        /// Image `ic_eye_close`.
        static let ic_eye_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eye_close")
        
        /// Image `ic_eye_open`.
        static let ic_eye_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eye_open")
        
        /// Image `ic_facebookpixel`.
        static let ic_facebookpixel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_facebookpixel")
        
        /// Image `ic_grid`.
        static let ic_grid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_grid")
        
        /// Image `ic_hello`.
        static let ic_hello = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_hello")
        
        /// Image `ic_history`.
        static let ic_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_history")
        
        /// Image `ic_list`.
        static let ic_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_list")
        
        /// Image `ic_menu`.
        static let ic_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu")
        
        /// Image `ic_nextArrow`.
        static let ic_nextArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nextArrow")
        
        /// Image `ic_qr_code`.
        static let ic_qr_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qr_code")
        
        /// Image `ic_coin_piles`.
        static let ic_coin_piles = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_CoinPiles")
        
        /// Image `ic_selected`.
        static let ic_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_selected")
        
        /// Image `ic_share_blue`.
        static let ic_share_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_blue")
        
        /// Image `ic_tick`.
        static let ic_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tick")
        
        /// Image `ic_tickblue`.
        static let ic_tickblue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tickblue")
        
        /// Image `ic_unselected`.
        static let ic_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unselected")
        
        /// Image `ic_upArrow`.
        static let ic_upArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_upArrow")
        
        /// Image `ic_wechat`.
        static let ic_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wechat")
        
        /// Image `ic_zelle`.
        static let ic_zelle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_zelle")
        
        /// Image `img_Dashboard`.
        static let img_Dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_Dashboard")
        
        /// Image `img_TutorialScreen1.gif`.
        static let img_TutorialScreen1Gif = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_TutorialScreen1.gif")
        
        /// Image `img_background`.
        static let img_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_background")
        
        /// Image `img_profileBG`.
        static let img_profileBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_profileBG")
        
        /// Image `kloader.gif`.
        static let kloaderGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "kloader.gif")
        
        /// Image `l`.
        static let l = Rswift.ImageResource(bundle: R.hostingBundle, name: "l")
        
        /// Image `logo-hello`.
        static let logoHello = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-hello")
        
        /// Image `ms-icon-144x144`.
        static let msIcon144x144 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ms-icon-144x144")
        
        /// Image `ms-icon-150x150`.
        static let msIcon150x150 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ms-icon-150x150")
        
        /// Image `ms-icon-310x310`.
        static let msIcon310x310 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ms-icon-310x310")
        
        /// Image `ms-icon-70x70`.
        static let msIcon70x70 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ms-icon-70x70")
        
        /// Image `next_arrow`.
        static let next_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "next_arrow")
        
        /// Image `photo`.
        static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
        
        /// Image `set`.
        static let set = Rswift.ImageResource(bundle: R.hostingBundle, name: "set")
        
        /// Image `settings`.
        static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
        
        /// Image `share-email`.
        static let shareEmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "share-email")
        
        /// Image `share-facebook`.
        static let shareFacebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "share-facebook")
        
        /// Image `share-googleplus`.
        static let shareGoogleplus = Rswift.ImageResource(bundle: R.hostingBundle, name: "share-googleplus")
        
        /// Image `share-message`.
        static let shareMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "share-message")
        
        /// Image `share-pinterest`.
        static let sharePinterest = Rswift.ImageResource(bundle: R.hostingBundle, name: "share-pinterest")
        
        /// Image `share-safari`.
        static let shareSafari = Rswift.ImageResource(bundle: R.hostingBundle, name: "share-safari")
        
        /// Image `share-twitter`.
        static let shareTwitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "share-twitter")
        
        /// Image `shareYourProfileWhite`.
        static let shareYourProfileWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareYourProfileWhite")
        
        /// Image `share`.
        static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
        
        /// Image `social-network-facebook`.
        static let socialNetworkFacebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-facebook")
        
        /// Image `social-network-googleplus`.
        static let socialNetworkGoogleplus = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-googleplus")
        
        /// Image `social-network-instagram`.
        static let socialNetworkInstagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-instagram")
        
        /// Image `social-network-linkedin`.
        static let socialNetworkLinkedin = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-linkedin")
        
        /// Image `social-network-pinterest`.
        static let socialNetworkPinterest = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-pinterest")
        
        /// Image `social-network-skype`.
        static let socialNetworkSkype = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-skype")
        
        /// Image `social-network-snapchat`.
        static let socialNetworkSnapchat = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-snapchat")
        
        /// Image `social-network-soundcloud`.
        static let socialNetworkSoundcloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-soundcloud")
        
        /// Image `social-network-tumblr`.
        static let socialNetworkTumblr = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-tumblr")
        
        /// Image `social-network-twitter`.
        static let socialNetworkTwitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-twitter")
        
        /// Image `social-network-youtube`.
        static let socialNetworkYoutube = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-network-youtube")
        
        /// Image `tip`.
        static let tip = Rswift.ImageResource(bundle: R.hostingBundle, name: "tip")
        
        /// Image `up-arrow`.
        static let upArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "up-arrow")
        
        /// Image `zapier`.
        static let zapier = Rswift.ImageResource(bundle: R.hostingBundle, name: "zapier")
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AC", bundle: ..., traitCollection: ...)`
        static func aC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AD", bundle: ..., traitCollection: ...)`
        static func aD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aD, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AE", bundle: ..., traitCollection: ...)`
        static func aE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AF", bundle: ..., traitCollection: ...)`
        static func aF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aF, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AG", bundle: ..., traitCollection: ...)`
        static func aG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AI", bundle: ..., traitCollection: ...)`
        static func aI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AL", bundle: ..., traitCollection: ...)`
        static func aL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AM", bundle: ..., traitCollection: ...)`
        static func aM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AN", bundle: ..., traitCollection: ...)`
        static func aN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AO", bundle: ..., traitCollection: ...)`
        static func aO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AQ", bundle: ..., traitCollection: ...)`
        static func aQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aQ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AR", bundle: ..., traitCollection: ...)`
        static func aR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AS", bundle: ..., traitCollection: ...)`
        static func aS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AT", bundle: ..., traitCollection: ...)`
        static func aT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AU", bundle: ..., traitCollection: ...)`
        static func aU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AW", bundle: ..., traitCollection: ...)`
        static func aW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AX", bundle: ..., traitCollection: ...)`
        static func aX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aX, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AZ", bundle: ..., traitCollection: ...)`
        static func aZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.aZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ActivateNFC.gif", bundle: ..., traitCollection: ...)`
        static func activateNFCGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.activateNFCGif, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AddAnotherPlus", bundle: ..., traitCollection: ...)`
        static func addAnotherPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.addAnotherPlus, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "AddContact", bundle: ..., traitCollection: ...)`
        static func addContact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.addContact, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BA", bundle: ..., traitCollection: ...)`
        static func bA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BB", bundle: ..., traitCollection: ...)`
        static func bB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bB, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BD", bundle: ..., traitCollection: ...)`
        static func bD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bD, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BE", bundle: ..., traitCollection: ...)`
        static func bE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BF", bundle: ..., traitCollection: ...)`
        static func bF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bF, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BG", bundle: ..., traitCollection: ...)`
        static func bG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BH", bundle: ..., traitCollection: ...)`
        static func bH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bH, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BI", bundle: ..., traitCollection: ...)`
        static func bI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BJ", bundle: ..., traitCollection: ...)`
        static func bJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bJ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BL", bundle: ..., traitCollection: ...)`
        static func bL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BM", bundle: ..., traitCollection: ...)`
        static func bM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BN", bundle: ..., traitCollection: ...)`
        static func bN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BO", bundle: ..., traitCollection: ...)`
        static func bO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BQ", bundle: ..., traitCollection: ...)`
        static func bQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bQ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BR", bundle: ..., traitCollection: ...)`
        static func bR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BS", bundle: ..., traitCollection: ...)`
        static func bS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BT", bundle: ..., traitCollection: ...)`
        static func bT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BV", bundle: ..., traitCollection: ...)`
        static func bV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bV, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BW", bundle: ..., traitCollection: ...)`
        static func bW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BY", bundle: ..., traitCollection: ...)`
        static func bY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bY, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BZ", bundle: ..., traitCollection: ...)`
        static func bZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BackArrow", bundle: ..., traitCollection: ...)`
        static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BluePro", bundle: ..., traitCollection: ...)`
        static func bluePro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bluePro, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BlueProLargeIcon", bundle: ..., traitCollection: ...)`
        static func blueProLargeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.blueProLargeIcon, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "BreakTheIceWhite", bundle: ..., traitCollection: ...)`
        static func breakTheIceWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.breakTheIceWhite, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CA", bundle: ..., traitCollection: ...)`
        static func cA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CC", bundle: ..., traitCollection: ...)`
        static func cC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CD", bundle: ..., traitCollection: ...)`
        static func cD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cD, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CF", bundle: ..., traitCollection: ...)`
        static func cF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cF, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CG", bundle: ..., traitCollection: ...)`
        static func cG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CH", bundle: ..., traitCollection: ...)`
        static func cH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cH, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CI", bundle: ..., traitCollection: ...)`
        static func cI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CK", bundle: ..., traitCollection: ...)`
        static func cK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CL", bundle: ..., traitCollection: ...)`
        static func cL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CM", bundle: ..., traitCollection: ...)`
        static func cM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CN", bundle: ..., traitCollection: ...)`
        static func cN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CO", bundle: ..., traitCollection: ...)`
        static func cO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CR", bundle: ..., traitCollection: ...)`
        static func cR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CU", bundle: ..., traitCollection: ...)`
        static func cU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CV", bundle: ..., traitCollection: ...)`
        static func cV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cV, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CW", bundle: ..., traitCollection: ...)`
        static func cW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CX", bundle: ..., traitCollection: ...)`
        static func cX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cX, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CY", bundle: ..., traitCollection: ...)`
        static func cY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cY, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "CZ", bundle: ..., traitCollection: ...)`
        static func cZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.cZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DE", bundle: ..., traitCollection: ...)`
        static func dE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.dE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DJ", bundle: ..., traitCollection: ...)`
        static func dJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.dJ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DK", bundle: ..., traitCollection: ...)`
        static func dK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.dK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DM", bundle: ..., traitCollection: ...)`
        static func dM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.dM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DO", bundle: ..., traitCollection: ...)`
        static func dO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.dO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DZ", bundle: ..., traitCollection: ...)`
        static func dZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.dZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DashboardArrow", bundle: ..., traitCollection: ...)`
        static func dashboardArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.dashboardArrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "Discover", bundle: ..., traitCollection: ...)`
        static func discover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.discover, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DiscoverModeWhite", bundle: ..., traitCollection: ...)`
        static func discoverModeWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.discoverModeWhite, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DiscoverSelected", bundle: ..., traitCollection: ...)`
        static func discoverSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.discoverSelected, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DownloadInteraction", bundle: ..., traitCollection: ...)`
        static func downloadInteraction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.downloadInteraction, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "DownloadQRCode", bundle: ..., traitCollection: ...)`
        static func downloadQRCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.downloadQRCode, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "Download_on_the_App_Store", bundle: ..., traitCollection: ...)`
        static func download_on_the_App_Store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.download_on_the_App_Store, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "Download_on_the_Play_Store", bundle: ..., traitCollection: ...)`
        static func download_on_the_Play_Store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.download_on_the_Play_Store, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "EC", bundle: ..., traitCollection: ...)`
        static func eC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.eC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "EE", bundle: ..., traitCollection: ...)`
        static func eE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.eE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "EG", bundle: ..., traitCollection: ...)`
        static func eG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.eG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "EH", bundle: ..., traitCollection: ...)`
        static func eH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.eH, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ER", bundle: ..., traitCollection: ...)`
        static func eR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.eR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ES", bundle: ..., traitCollection: ...)`
        static func eS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.eS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ET", bundle: ..., traitCollection: ...)`
        static func eT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.eT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "EditTitlePencil", bundle: ..., traitCollection: ...)`
        static func editTitlePencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.editTitlePencil, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ExpandNetworkOptions", bundle: ..., traitCollection: ...)`
        static func expandNetworkOptions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.expandNetworkOptions, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "FAQ", bundle: ..., traitCollection: ...)`
        static func faQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.faQ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "FI", bundle: ..., traitCollection: ...)`
        static func fI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.fI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "FJ", bundle: ..., traitCollection: ...)`
        static func fJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.fJ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "FK", bundle: ..., traitCollection: ...)`
        static func fK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.fK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "FM", bundle: ..., traitCollection: ...)`
        static func fM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.fM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "FO", bundle: ..., traitCollection: ...)`
        static func fO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.fO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "FR", bundle: ..., traitCollection: ...)`
        static func fR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.fR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "FX", bundle: ..., traitCollection: ...)`
        static func fX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.fX, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "Feedback", bundle: ..., traitCollection: ...)`
        static func feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.feedback, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "tellAFriend", bundle: ..., traitCollection: ...)`
        static func tellAFriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tellAFriend, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GA", bundle: ..., traitCollection: ...)`
        static func gA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GB", bundle: ..., traitCollection: ...)`
        static func gB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gB, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GD", bundle: ..., traitCollection: ...)`
        static func gD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gD, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GE", bundle: ..., traitCollection: ...)`
        static func gE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GF", bundle: ..., traitCollection: ...)`
        static func gF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gF, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GG", bundle: ..., traitCollection: ...)`
        static func gG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GH", bundle: ..., traitCollection: ...)`
        static func gH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gH, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GI", bundle: ..., traitCollection: ...)`
        static func gI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GL", bundle: ..., traitCollection: ...)`
        static func gL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GM", bundle: ..., traitCollection: ...)`
        static func gM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GN", bundle: ..., traitCollection: ...)`
        static func gN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GP", bundle: ..., traitCollection: ...)`
        static func gP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gP, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GQ", bundle: ..., traitCollection: ...)`
        static func gQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gQ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GR", bundle: ..., traitCollection: ...)`
        static func gR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GS", bundle: ..., traitCollection: ...)`
        static func gS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GT", bundle: ..., traitCollection: ...)`
        static func gT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GU", bundle: ..., traitCollection: ...)`
        static func gU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GW", bundle: ..., traitCollection: ...)`
        static func gW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GY", bundle: ..., traitCollection: ...)`
        static func gY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.gY, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GetPaid", bundle: ..., traitCollection: ...)`
        static func getPaid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.getPaid, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "GoPro", bundle: ..., traitCollection: ...)`
        static func goPro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.goPro, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "HK", bundle: ..., traitCollection: ...)`
        static func hK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.hK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "HM", bundle: ..., traitCollection: ...)`
        static func hM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.hM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "HN", bundle: ..., traitCollection: ...)`
        static func hN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.hN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "HR", bundle: ..., traitCollection: ...)`
        static func hR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.hR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "HT", bundle: ..., traitCollection: ...)`
        static func hT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.hT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "HU", bundle: ..., traitCollection: ...)`
        static func hU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.hU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "HidePassword", bundle: ..., traitCollection: ...)`
        static func hidePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.hidePassword, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ID", bundle: ..., traitCollection: ...)`
        static func iD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iD, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IE", bundle: ..., traitCollection: ...)`
        static func iE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IL", bundle: ..., traitCollection: ...)`
        static func iL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IM", bundle: ..., traitCollection: ...)`
        static func iM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IN", bundle: ..., traitCollection: ...)`
        static func iN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IO", bundle: ..., traitCollection: ...)`
        static func iO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IQ", bundle: ..., traitCollection: ...)`
        static func iQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iQ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IR", bundle: ..., traitCollection: ...)`
        static func iR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IS", bundle: ..., traitCollection: ...)`
        static func iS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IT", bundle: ..., traitCollection: ...)`
        static func iT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.iT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "Insights", bundle: ..., traitCollection: ...)`
        static func insights(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.insights, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "InsightsSelected", bundle: ..., traitCollection: ...)`
        static func insightsSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.insightsSelected, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "Interactions", bundle: ..., traitCollection: ...)`
        static func interactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.interactions, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "InteractionsSelected", bundle: ..., traitCollection: ...)`
        static func interactionsSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.interactionsSelected, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "InvalidUsername", bundle: ..., traitCollection: ...)`
        static func invalidUsername(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.invalidUsername, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IsPremiumUser", bundle: ..., traitCollection: ...)`
        static func isPremiumUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.isPremiumUser, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "IsPremiumUserDefault", bundle: ..., traitCollection: ...)`
        static func isPremiumUserDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.isPremiumUserDefault, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "JE", bundle: ..., traitCollection: ...)`
        static func jE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.jE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "JM", bundle: ..., traitCollection: ...)`
        static func jM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.jM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "JO", bundle: ..., traitCollection: ...)`
        static func jO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.jO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "JP", bundle: ..., traitCollection: ...)`
        static func jP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.jP, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KE", bundle: ..., traitCollection: ...)`
        static func kE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KG", bundle: ..., traitCollection: ...)`
        static func kG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KH", bundle: ..., traitCollection: ...)`
        static func kH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kH, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KI", bundle: ..., traitCollection: ...)`
        static func kI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KM", bundle: ..., traitCollection: ...)`
        static func kM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KN", bundle: ..., traitCollection: ...)`
        static func kN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KP", bundle: ..., traitCollection: ...)`
        static func kP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kP, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KR", bundle: ..., traitCollection: ...)`
        static func kR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KW", bundle: ..., traitCollection: ...)`
        static func kW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KY", bundle: ..., traitCollection: ...)`
        static func kY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kY, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "KZ", bundle: ..., traitCollection: ...)`
        static func kZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LA", bundle: ..., traitCollection: ...)`
        static func lA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LB", bundle: ..., traitCollection: ...)`
        static func lB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lB, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LC", bundle: ..., traitCollection: ...)`
        static func lC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LI", bundle: ..., traitCollection: ...)`
        static func lI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LK", bundle: ..., traitCollection: ...)`
        static func lK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LR", bundle: ..., traitCollection: ...)`
        static func lR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LS", bundle: ..., traitCollection: ...)`
        static func lS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LT", bundle: ..., traitCollection: ...)`
        static func lT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LU", bundle: ..., traitCollection: ...)`
        static func lU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LV", bundle: ..., traitCollection: ...)`
        static func lV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lV, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LY", bundle: ..., traitCollection: ...)`
        static func lY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.lY, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LaunchScreenLogo", bundle: ..., traitCollection: ...)`
        static func launchScreenLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.launchScreenLogo, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LeftArrow", bundle: ..., traitCollection: ...)`
        static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "LeftArrow_blue", bundle: ..., traitCollection: ...)`
        static func leftArrow_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.leftArrow_blue, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "Logout", bundle: ..., traitCollection: ...)`
        static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MA", bundle: ..., traitCollection: ...)`
        static func mA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MC", bundle: ..., traitCollection: ...)`
        static func mC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MD", bundle: ..., traitCollection: ...)`
        static func mD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mD, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ME", bundle: ..., traitCollection: ...)`
        static func mE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MF", bundle: ..., traitCollection: ...)`
        static func mF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mF, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MG", bundle: ..., traitCollection: ...)`
        static func mG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MH", bundle: ..., traitCollection: ...)`
        static func mH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mH, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MK", bundle: ..., traitCollection: ...)`
        static func mK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ML", bundle: ..., traitCollection: ...)`
        static func mL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MM", bundle: ..., traitCollection: ...)`
        static func mM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MN", bundle: ..., traitCollection: ...)`
        static func mN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MO", bundle: ..., traitCollection: ...)`
        static func mO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MP", bundle: ..., traitCollection: ...)`
        static func mP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mP, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MQ", bundle: ..., traitCollection: ...)`
        static func mQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mQ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MR", bundle: ..., traitCollection: ...)`
        static func mR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MS", bundle: ..., traitCollection: ...)`
        static func mS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MT", bundle: ..., traitCollection: ...)`
        static func mT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MU", bundle: ..., traitCollection: ...)`
        static func mU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MV", bundle: ..., traitCollection: ...)`
        static func mV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mV, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MW", bundle: ..., traitCollection: ...)`
        static func mW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MX", bundle: ..., traitCollection: ...)`
        static func mX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mX, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MY", bundle: ..., traitCollection: ...)`
        static func mY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mY, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MZ", bundle: ..., traitCollection: ...)`
        static func mZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "MailQRCode", bundle: ..., traitCollection: ...)`
        static func mailQRCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.mailQRCode, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NA", bundle: ..., traitCollection: ...)`
        static func nA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NC", bundle: ..., traitCollection: ...)`
        static func nC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NE", bundle: ..., traitCollection: ...)`
        static func nE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NF", bundle: ..., traitCollection: ...)`
        static func nF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nF, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NFC", bundle: ..., traitCollection: ...)`
        static func nfC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nfC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NFCWhite", bundle: ..., traitCollection: ...)`
        static func nfcWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nfcWhite, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NG", bundle: ..., traitCollection: ...)`
        static func nG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NI", bundle: ..., traitCollection: ...)`
        static func nI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NL", bundle: ..., traitCollection: ...)`
        static func nL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NO", bundle: ..., traitCollection: ...)`
        static func nO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NP", bundle: ..., traitCollection: ...)`
        static func nP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nP, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NR", bundle: ..., traitCollection: ...)`
        static func nR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NU", bundle: ..., traitCollection: ...)`
        static func nU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "NZ", bundle: ..., traitCollection: ...)`
        static func nZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.nZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "OM", bundle: ..., traitCollection: ...)`
        static func oM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.oM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PA", bundle: ..., traitCollection: ...)`
        static func pA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PE", bundle: ..., traitCollection: ...)`
        static func pE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PF", bundle: ..., traitCollection: ...)`
        static func pF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pF, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PG", bundle: ..., traitCollection: ...)`
        static func pG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PH", bundle: ..., traitCollection: ...)`
        static func pH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pH, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PK", bundle: ..., traitCollection: ...)`
        static func pK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PL", bundle: ..., traitCollection: ...)`
        static func pL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PM", bundle: ..., traitCollection: ...)`
        static func pM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PN", bundle: ..., traitCollection: ...)`
        static func pN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PR", bundle: ..., traitCollection: ...)`
        static func pR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PS", bundle: ..., traitCollection: ...)`
        static func pS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PT", bundle: ..., traitCollection: ...)`
        static func pT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PW", bundle: ..., traitCollection: ...)`
        static func pW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PY", bundle: ..., traitCollection: ...)`
        static func pY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.pY, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PrintQRCode", bundle: ..., traitCollection: ...)`
        static func printQRCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.printQRCode, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "PrivateModeLock", bundle: ..., traitCollection: ...)`
        static func privateModeLock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.privateModeLock, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ProfilePlaceholder", bundle: ..., traitCollection: ...)`
        static func profilePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.profilePlaceholder, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ProfileQRCode", bundle: ..., traitCollection: ...)`
        static func profileQRCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.profileQRCode, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "QA", bundle: ..., traitCollection: ...)`
        static func qA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.qA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "RE", bundle: ..., traitCollection: ...)`
        static func rE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.rE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "RO", bundle: ..., traitCollection: ...)`
        static func rO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.rO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "RS", bundle: ..., traitCollection: ...)`
        static func rS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.rS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "RU", bundle: ..., traitCollection: ...)`
        static func rU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.rU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "RW", bundle: ..., traitCollection: ...)`
        static func rW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.rW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "RightArrow", bundle: ..., traitCollection: ...)`
        static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SA", bundle: ..., traitCollection: ...)`
        static func sA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SB", bundle: ..., traitCollection: ...)`
        static func sB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sB, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SC", bundle: ..., traitCollection: ...)`
        static func sC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SD", bundle: ..., traitCollection: ...)`
        static func sD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sD, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SE", bundle: ..., traitCollection: ...)`
        static func sE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SG", bundle: ..., traitCollection: ...)`
        static func sG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SH", bundle: ..., traitCollection: ...)`
        static func sH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sH, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SI", bundle: ..., traitCollection: ...)`
        static func sI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SJ", bundle: ..., traitCollection: ...)`
        static func sJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sJ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SK", bundle: ..., traitCollection: ...)`
        static func sK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SL", bundle: ..., traitCollection: ...)`
        static func sL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SM", bundle: ..., traitCollection: ...)`
        static func sM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SN", bundle: ..., traitCollection: ...)`
        static func sN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SO", bundle: ..., traitCollection: ...)`
        static func sO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SR", bundle: ..., traitCollection: ...)`
        static func sR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SS", bundle: ..., traitCollection: ...)`
        static func sS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ST", bundle: ..., traitCollection: ...)`
        static func sT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SV", bundle: ..., traitCollection: ...)`
        static func sV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sV, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SX", bundle: ..., traitCollection: ...)`
        static func sX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sX, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SY", bundle: ..., traitCollection: ...)`
        static func sY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sY, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SZ", bundle: ..., traitCollection: ...)`
        static func sZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ShareQRCode", bundle: ..., traitCollection: ...)`
        static func shareQRCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.shareQRCode, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "Shop", bundle: ..., traitCollection: ...)`
        static func shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.shop, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ShowPassword", bundle: ..., traitCollection: ...)`
        static func showPassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.showPassword, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SubscriptionScreenImage1", bundle: ..., traitCollection: ...)`
        static func subscriptionScreenImage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.subscriptionScreenImage1, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SubscriptionScreenImage3", bundle: ..., traitCollection: ...)`
        static func subscriptionScreenImage3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.subscriptionScreenImage3, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "SubscriptionScreenImage4", bundle: ..., traitCollection: ...)`
        static func subscriptionScreenImage4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.subscriptionScreenImage4, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TC", bundle: ..., traitCollection: ...)`
        static func tC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TD", bundle: ..., traitCollection: ...)`
        static func tD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tD, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TF", bundle: ..., traitCollection: ...)`
        static func tF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tF, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TG", bundle: ..., traitCollection: ...)`
        static func tG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TH", bundle: ..., traitCollection: ...)`
        static func tH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tH, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TJ", bundle: ..., traitCollection: ...)`
        static func tJ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tJ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TK", bundle: ..., traitCollection: ...)`
        static func tK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TL", bundle: ..., traitCollection: ...)`
        static func tL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tL, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TM", bundle: ..., traitCollection: ...)`
        static func tM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TN", bundle: ..., traitCollection: ...)`
        static func tN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TO", bundle: ..., traitCollection: ...)`
        static func tO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tO, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TR", bundle: ..., traitCollection: ...)`
        static func tR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tR, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TT", bundle: ..., traitCollection: ...)`
        static func tT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TV", bundle: ..., traitCollection: ...)`
        static func tV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tV, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TW", bundle: ..., traitCollection: ...)`
        static func tW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "TZ", bundle: ..., traitCollection: ...)`
        static func tZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "UA", bundle: ..., traitCollection: ...)`
        static func uA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.uA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "UG", bundle: ..., traitCollection: ...)`
        static func uG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.uG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "UM", bundle: ..., traitCollection: ...)`
        static func uM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.uM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "US", bundle: ..., traitCollection: ...)`
        static func uS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.uS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "UY", bundle: ..., traitCollection: ...)`
        static func uY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.uY, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "UZ", bundle: ..., traitCollection: ...)`
        static func uZ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.uZ, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "UserImagePlaceholer", bundle: ..., traitCollection: ...)`
        static func userImagePlaceholer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.userImagePlaceholer, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "VA", bundle: ..., traitCollection: ...)`
        static func vA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.vA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "VC", bundle: ..., traitCollection: ...)`
        static func vC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.vC, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "VE", bundle: ..., traitCollection: ...)`
        static func vE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.vE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "VG", bundle: ..., traitCollection: ...)`
        static func vG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.vG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "VI", bundle: ..., traitCollection: ...)`
        static func vI(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.vI, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "VN", bundle: ..., traitCollection: ...)`
        static func vN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.vN, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "VU", bundle: ..., traitCollection: ...)`
        static func vU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.vU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ValidAccount", bundle: ..., traitCollection: ...)`
        static func validAccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.validAccount, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "WF", bundle: ..., traitCollection: ...)`
        static func wF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.wF, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "WS", bundle: ..., traitCollection: ...)`
        static func wS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.wS, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "WhiteDownArrow", bundle: ..., traitCollection: ...)`
        static func whiteDownArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.whiteDownArrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "WhiteQRCode", bundle: ..., traitCollection: ...)`
        static func whiteQRCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.whiteQRCode, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "White_close", bundle: ..., traitCollection: ...)`
        static func white_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.white_close, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "XK", bundle: ..., traitCollection: ...)`
        static func xK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.xK, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "YE", bundle: ..., traitCollection: ...)`
        static func yE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.yE, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "YT", bundle: ..., traitCollection: ...)`
        static func yT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.yT, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "YU", bundle: ..., traitCollection: ...)`
        static func yU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.yU, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ZA", bundle: ..., traitCollection: ...)`
        static func zA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.zA, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ZM", bundle: ..., traitCollection: ...)`
        static func zM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.zM, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ZW", bundle: ..., traitCollection: ...)`
        static func zW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.zW, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "add-image", bundle: ..., traitCollection: ...)`
        static func addImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.addImage, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "android-icon-144x144", bundle: ..., traitCollection: ...)`
        static func androidIcon144x144(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.androidIcon144x144, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "android-icon-192x192", bundle: ..., traitCollection: ...)`
        static func androidIcon192x192(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.androidIcon192x192, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "android-icon-36x36", bundle: ..., traitCollection: ...)`
        static func androidIcon36x36(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.androidIcon36x36, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "android-icon-48x48", bundle: ..., traitCollection: ...)`
        static func androidIcon48x48(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.androidIcon48x48, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "android-icon-72x72", bundle: ..., traitCollection: ...)`
        static func androidIcon72x72(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.androidIcon72x72, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "android-icon-96x96", bundle: ..., traitCollection: ...)`
        static func androidIcon96x96(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.androidIcon96x96, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon", bundle: ..., traitCollection: ...)`
        static func appleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-114x114", bundle: ..., traitCollection: ...)`
        static func appleIcon114x114(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon114x114, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-120x120", bundle: ..., traitCollection: ...)`
        static func appleIcon120x120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon120x120, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-144x144", bundle: ..., traitCollection: ...)`
        static func appleIcon144x144(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon144x144, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-152x152", bundle: ..., traitCollection: ...)`
        static func appleIcon152x152(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon152x152, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-180x180", bundle: ..., traitCollection: ...)`
        static func appleIcon180x180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon180x180, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-57x57", bundle: ..., traitCollection: ...)`
        static func appleIcon57x57(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon57x57, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-60x60", bundle: ..., traitCollection: ...)`
        static func appleIcon60x60(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon60x60, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-72x72", bundle: ..., traitCollection: ...)`
        static func appleIcon72x72(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon72x72, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-76x76", bundle: ..., traitCollection: ...)`
        static func appleIcon76x76(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIcon76x76, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "apple-icon-precomposed", bundle: ..., traitCollection: ...)`
        static func appleIconPrecomposed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.appleIconPrecomposed, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "bg1", bundle: ..., traitCollection: ...)`
        static func bg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bg1, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "blue-logo", bundle: ..., traitCollection: ...)`
        static func blueLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.blueLogo, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "blue-team", bundle: ..., traitCollection: ...)`
        static func blueTeam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.blueTeam, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "blue2", bundle: ..., traitCollection: ...)`
        static func blue2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.blue2, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "blue3", bundle: ..., traitCollection: ...)`
        static func blue3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.blue3, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "blue4", bundle: ..., traitCollection: ...)`
        static func blue4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.blue4, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "bluetooth", bundle: ..., traitCollection: ...)`
        static func bluetooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.bluetooth, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
        static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "createAccountImage", bundle: ..., traitCollection: ...)`
        static func createAccountImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.createAccountImage, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "favicon-16x16", bundle: ..., traitCollection: ...)`
        static func favicon16x16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.favicon16x16, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "favicon-32x32", bundle: ..., traitCollection: ...)`
        static func favicon32x32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.favicon32x32, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "favicon-96x96", bundle: ..., traitCollection: ...)`
        static func favicon96x96(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.favicon96x96, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "favicon.ico", bundle: ..., traitCollection: ...)`
        static func faviconIco(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.faviconIco, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_About_facebook", bundle: ..., traitCollection: ...)`
        static func ic_About_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_About_facebook, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_About_instagram", bundle: ..., traitCollection: ...)`
        static func ic_About_instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_About_instagram, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_About_linkedin", bundle: ..., traitCollection: ...)`
        static func ic_About_linkedin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_About_linkedin, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_About_twitter", bundle: ..., traitCollection: ...)`
        static func ic_About_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_About_twitter, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_AddAccount", bundle: ..., traitCollection: ...)`
        static func ic_AddAccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_AddAccount, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_Addressclose", bundle: ..., traitCollection: ...)`
        static func ic_Addressclose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_Addressclose, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_AppLogo", bundle: ..., traitCollection: ...)`
        static func ic_AppLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_AppLogo, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_Back", bundle: ..., traitCollection: ...)`
        static func ic_Back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_Back, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_Blue", bundle: ..., traitCollection: ...)`
        static func ic_Blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_Blue, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_Camera", bundle: ..., traitCollection: ...)`
        static func ic_Camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_Camera, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_Edit", bundle: ..., traitCollection: ...)`
        static func ic_Edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_Edit, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_Errors", bundle: ..., traitCollection: ...)`
        static func ic_Errors(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_Errors, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_MenuBG", bundle: ..., traitCollection: ...)`
        static func ic_MenuBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_MenuBG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_Selectedgrid", bundle: ..., traitCollection: ...)`
        static func ic_Selectedgrid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_Selectedgrid, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_Selectedlist", bundle: ..., traitCollection: ...)`
        static func ic_Selectedlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_Selectedlist, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_Shop_n", bundle: ..., traitCollection: ...)`
        static func ic_Shop_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_Shop_n, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_about", bundle: ..., traitCollection: ...)`
        static func ic_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_about, compatibleWith: traitCollection)
        }
#endif

#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_coin_piles", bundle: ..., traitCollection: ...)`
        static func ic_coin_piles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_coin_piles, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_addcontacts", bundle: ..., traitCollection: ...)`
        static func ic_addcontacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_addcontacts, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_animation", bundle: ..., traitCollection: ...)`
        static func ic_animation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_animation, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_backarrow", bundle: ..., traitCollection: ...)`
        static func ic_backarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_backarrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_card", bundle: ..., traitCollection: ...)`
        static func ic_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_card, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
        static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_closeBlue", bundle: ..., traitCollection: ...)`
        static func ic_closeBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_closeBlue, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_copy", bundle: ..., traitCollection: ...)`
        static func ic_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_copy, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_copylink", bundle: ..., traitCollection: ...)`
        static func ic_copylink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_copylink, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_correct", bundle: ..., traitCollection: ...)`
        static func ic_correct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_correct, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_cross", bundle: ..., traitCollection: ...)`
        static func ic_cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_cross, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_editprofile", bundle: ..., traitCollection: ...)`
        static func ic_editprofile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_editprofile, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_error", bundle: ..., traitCollection: ...)`
        static func ic_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_error, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_eye_close", bundle: ..., traitCollection: ...)`
        static func ic_eye_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_eye_close, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_eye_open", bundle: ..., traitCollection: ...)`
        static func ic_eye_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_eye_open, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_facebookpixel", bundle: ..., traitCollection: ...)`
        static func ic_facebookpixel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_facebookpixel, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_grid", bundle: ..., traitCollection: ...)`
        static func ic_grid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_grid, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_hello", bundle: ..., traitCollection: ...)`
        static func ic_hello(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_hello, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_history", bundle: ..., traitCollection: ...)`
        static func ic_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_history, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_list", bundle: ..., traitCollection: ...)`
        static func ic_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_list, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_menu", bundle: ..., traitCollection: ...)`
        static func ic_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_menu, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_nextArrow", bundle: ..., traitCollection: ...)`
        static func ic_nextArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_nextArrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_qr_code", bundle: ..., traitCollection: ...)`
        static func ic_qr_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_qr_code, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_selected", bundle: ..., traitCollection: ...)`
        static func ic_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_selected, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_share_blue", bundle: ..., traitCollection: ...)`
        static func ic_share_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_share_blue, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_tick", bundle: ..., traitCollection: ...)`
        static func ic_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_tick, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_tickblue", bundle: ..., traitCollection: ...)`
        static func ic_tickblue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_tickblue, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_unselected", bundle: ..., traitCollection: ...)`
        static func ic_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_unselected, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_upArrow", bundle: ..., traitCollection: ...)`
        static func ic_upArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_upArrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_wechat", bundle: ..., traitCollection: ...)`
        static func ic_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_wechat, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ic_zelle", bundle: ..., traitCollection: ...)`
        static func ic_zelle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.ic_zelle, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "img_Dashboard", bundle: ..., traitCollection: ...)`
        static func img_Dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.img_Dashboard, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "img_TutorialScreen1.gif", bundle: ..., traitCollection: ...)`
        static func img_TutorialScreen1Gif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.img_TutorialScreen1Gif, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "img_background", bundle: ..., traitCollection: ...)`
        static func img_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.img_background, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "img_profileBG", bundle: ..., traitCollection: ...)`
        static func img_profileBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.img_profileBG, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "kloader.gif", bundle: ..., traitCollection: ...)`
        static func kloaderGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.kloaderGif, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "l", bundle: ..., traitCollection: ...)`
        static func l(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.l, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "logo-hello", bundle: ..., traitCollection: ...)`
        static func logoHello(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.logoHello, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ms-icon-144x144", bundle: ..., traitCollection: ...)`
        static func msIcon144x144(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.msIcon144x144, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ms-icon-150x150", bundle: ..., traitCollection: ...)`
        static func msIcon150x150(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.msIcon150x150, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ms-icon-310x310", bundle: ..., traitCollection: ...)`
        static func msIcon310x310(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.msIcon310x310, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "ms-icon-70x70", bundle: ..., traitCollection: ...)`
        static func msIcon70x70(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.msIcon70x70, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "next_arrow", bundle: ..., traitCollection: ...)`
        static func next_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.next_arrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
        static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "set", bundle: ..., traitCollection: ...)`
        static func set(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.set, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
        static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
        static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "share-email", bundle: ..., traitCollection: ...)`
        static func shareEmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.shareEmail, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "share-facebook", bundle: ..., traitCollection: ...)`
        static func shareFacebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.shareFacebook, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "share-googleplus", bundle: ..., traitCollection: ...)`
        static func shareGoogleplus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.shareGoogleplus, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "share-message", bundle: ..., traitCollection: ...)`
        static func shareMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.shareMessage, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "share-pinterest", bundle: ..., traitCollection: ...)`
        static func sharePinterest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.sharePinterest, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "share-safari", bundle: ..., traitCollection: ...)`
        static func shareSafari(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.shareSafari, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "share-twitter", bundle: ..., traitCollection: ...)`
        static func shareTwitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.shareTwitter, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "shareYourProfileWhite", bundle: ..., traitCollection: ...)`
        static func shareYourProfileWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.shareYourProfileWhite, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-facebook", bundle: ..., traitCollection: ...)`
        static func socialNetworkFacebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkFacebook, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-googleplus", bundle: ..., traitCollection: ...)`
        static func socialNetworkGoogleplus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkGoogleplus, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-instagram", bundle: ..., traitCollection: ...)`
        static func socialNetworkInstagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkInstagram, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-linkedin", bundle: ..., traitCollection: ...)`
        static func socialNetworkLinkedin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkLinkedin, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-pinterest", bundle: ..., traitCollection: ...)`
        static func socialNetworkPinterest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkPinterest, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-skype", bundle: ..., traitCollection: ...)`
        static func socialNetworkSkype(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkSkype, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-snapchat", bundle: ..., traitCollection: ...)`
        static func socialNetworkSnapchat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkSnapchat, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-soundcloud", bundle: ..., traitCollection: ...)`
        static func socialNetworkSoundcloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkSoundcloud, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-tumblr", bundle: ..., traitCollection: ...)`
        static func socialNetworkTumblr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkTumblr, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-twitter", bundle: ..., traitCollection: ...)`
        static func socialNetworkTwitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkTwitter, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "social-network-youtube", bundle: ..., traitCollection: ...)`
        static func socialNetworkYoutube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.socialNetworkYoutube, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "tip", bundle: ..., traitCollection: ...)`
        static func tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.tip, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "up-arrow", bundle: ..., traitCollection: ...)`
        static func upArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.upArrow, compatibleWith: traitCollection)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UIImage(named: "zapier", bundle: ..., traitCollection: ...)`
        static func zapier(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.zapier, compatibleWith: traitCollection)
        }
#endif
        
        fileprivate init() {}
    }
    
    /// This `R.nib` struct is generated, and contains static references to 5 nibs.
    struct nib {
        
        /// Nib `SocialLinkCountFooterTableViewCell`.
        static let socialLinkCountFooterTableViewCell = _R.nib._SocialLinkCountFooterTableViewCell()
        
        /// Nib `SocialLinkCountHeaderTableViewCell`.
        static let socialLinkCountHeaderTableViewCell = _R.nib._SocialLinkCountHeaderTableViewCell()
        
        /// Nib `SocialNetworkCollectionViewCell`.
        static let socialNetworkCollectionViewCell = _R.nib._SocialNetworkCollectionViewCell()
        
        /// Nib `SocialNetworkFooterCollectionReusableView`.
        static let socialNetworkFooterCollectionReusableView = _R.nib._SocialNetworkFooterCollectionReusableView()
        
        /// Nib `SocialNetworkHeaderCollectionReusableView`.
        static let socialNetworkHeaderCollectionReusableView = _R.nib._SocialNetworkHeaderCollectionReusableView()
        
#if os(iOS) || os(tvOS)
        /// `UINib(name: "SocialLinkCountFooterTableViewCell", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.socialLinkCountFooterTableViewCell) instead")
        static func socialLinkCountFooterTableViewCell(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.socialLinkCountFooterTableViewCell)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UINib(name: "SocialLinkCountHeaderTableViewCell", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.socialLinkCountHeaderTableViewCell) instead")
        static func socialLinkCountHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.socialLinkCountHeaderTableViewCell)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UINib(name: "SocialNetworkCollectionViewCell", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.socialNetworkCollectionViewCell) instead")
        static func socialNetworkCollectionViewCell(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.socialNetworkCollectionViewCell)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UINib(name: "SocialNetworkFooterCollectionReusableView", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.socialNetworkFooterCollectionReusableView) instead")
        static func socialNetworkFooterCollectionReusableView(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.socialNetworkFooterCollectionReusableView)
        }
#endif
        
#if os(iOS) || os(tvOS)
        /// `UINib(name: "SocialNetworkHeaderCollectionReusableView", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.socialNetworkHeaderCollectionReusableView) instead")
        static func socialNetworkHeaderCollectionReusableView(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.socialNetworkHeaderCollectionReusableView)
        }
#endif
        
        static func socialLinkCountFooterTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialLinkCountFooterTableViewCell? {
            return R.nib.socialLinkCountFooterTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialLinkCountFooterTableViewCell
        }
        
        static func socialLinkCountHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialLinkCountHeaderTableViewCell? {
            return R.nib.socialLinkCountHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialLinkCountHeaderTableViewCell
        }
        
        static func socialNetworkCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialNetworkCollectionViewCell? {
            return R.nib.socialNetworkCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialNetworkCollectionViewCell
        }
        
        static func socialNetworkFooterCollectionReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialNetworkFooterCollectionReusableView? {
            return R.nib.socialNetworkFooterCollectionReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialNetworkFooterCollectionReusableView
        }
        
        static func socialNetworkHeaderCollectionReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialNetworkHeaderCollectionReusableView? {
            return R.nib.socialNetworkHeaderCollectionReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialNetworkHeaderCollectionReusableView
        }
        
        fileprivate init() {}
    }
    
    /// This `R.reuseIdentifier` struct is generated, and contains static references to 32 reuse identifiers.
    struct reuseIdentifier {
        
        /// Reuse identifier `AboutProfileTableViewCell`.
        static let aboutProfileTableViewCell: Rswift.ReuseIdentifier<AboutProfileTableViewCell> = Rswift.ReuseIdentifier(identifier: "AboutProfileTableViewCell")
        
        /// Reuse identifier `AboutTableViewCell`.
        static let aboutTableViewCell: Rswift.ReuseIdentifier<AboutTableViewCell> = Rswift.ReuseIdentifier(identifier: "AboutTableViewCell")
        
        /// Reuse identifier `AboutTermPrivacyCell`.
        static let aboutTermPrivacyCell: Rswift.ReuseIdentifier<AboutTermPrivacyCell> = Rswift.ReuseIdentifier(identifier: "AboutTermPrivacyCell")
        
        /// Reuse identifier `AddAccountTableViewCell`.
        static let addAccountTableViewCell: Rswift.ReuseIdentifier<AddAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "AddAccountTableViewCell")
        
        /// Reuse identifier `AddNetworkCollectionReusableView`.
        static let addNetworkCollectionReusableView: Rswift.ReuseIdentifier<AddNetworkCollectionReusableView> = Rswift.ReuseIdentifier(identifier: "AddNetworkCollectionReusableView")
        
        /// Reuse identifier `AddnetworkcollectionCell`.
        static let addnetworkcollectionCell: Rswift.ReuseIdentifier<AddnetworkcollectionCell> = Rswift.ReuseIdentifier(identifier: "AddnetworkcollectionCell")
        
        /// Reuse identifier `BlueInsightsLinkTableViewCell`.
        static let blueInsightsLinkTableViewCell: Rswift.ReuseIdentifier<BlueInsightsLinkTableViewCell> = Rswift.ReuseIdentifier(identifier: "BlueInsightsLinkTableViewCell")
        
        /// Reuse identifier `BluePlusFeatureCell`.
        static let bluePlusFeatureCell: Rswift.ReuseIdentifier<BluePlusFeatureCell> = Rswift.ReuseIdentifier(identifier: "BluePlusFeatureCell")
        
        /// Reuse identifier `BlueSmartDeviceCollectionViewCell`.
        static let blueSmartDeviceCollectionViewCell: Rswift.ReuseIdentifier<BlueSmartDeviceCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "BlueSmartDeviceCollectionViewCell")
        
        /// Reuse identifier `BusinessGridCollectionViewCell`.
        static let businessGridCollectionViewCell: Rswift.ReuseIdentifier<BusinessGridCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "BusinessGridCollectionViewCell")
        
        /// Reuse identifier `EventListCell`.
        static let eventListCell: Rswift.ReuseIdentifier<EventListCell> = Rswift.ReuseIdentifier(identifier: "EventListCell")
        
        /// Reuse identifier `GiftProductCell`.
        static let giftProductCell: Rswift.ReuseIdentifier<GiftProductCell> = Rswift.ReuseIdentifier(identifier: "GiftProductCell")
        
        /// Reuse identifier `GiftProductExCell`.
        static let giftProductExCell: Rswift.ReuseIdentifier<GiftProductExCell> = Rswift.ReuseIdentifier(identifier: "GiftProductExCell")
        
        /// Reuse identifier `GiftProductReferralsCell`.
        static let giftProductReferralsCell: Rswift.ReuseIdentifier<GiftProductReferralsCell> = Rswift.ReuseIdentifier(identifier: "GiftProductReferralsCell")
        
        /// Reuse identifier `GiftProductReferralsListCell`.
        static let giftProductReferralsListCell: Rswift.ReuseIdentifier<GiftProductReferralsListCell> = Rswift.ReuseIdentifier(identifier: "GiftProductReferralsListCell")
        
        /// Reuse identifier `GridCollectionViewCell`.
        static let gridCollectionViewCell: Rswift.ReuseIdentifier<GridCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "GridCollectionViewCell")
        
        /// Reuse identifier `InteractionListCollectionViewCell`.
        static let interactionListCollectionViewCell: Rswift.ReuseIdentifier<InteractionListCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "InteractionListCollectionViewCell")
        
        /// Reuse identifier `InteractionMapCollectionViewCell`.
        static let interactionMapCollectionViewCell: Rswift.ReuseIdentifier<InteractionMapCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "InteractionMapCollectionViewCell")
        
        /// Reuse identifier `InteractionTableViewCell`.
        static let interactionTableViewCell: Rswift.ReuseIdentifier<InteractionTableViewCell> = Rswift.ReuseIdentifier(identifier: "InteractionTableViewCell")
        
        /// Reuse identifier `ListTableViewCell`.
        static let listTableViewCell: Rswift.ReuseIdentifier<ListTableViewCell> = Rswift.ReuseIdentifier(identifier: "ListTableViewCell")
        
        /// Reuse identifier `MutipleAccountTableViewCell`.
        static let mutipleAccountTableViewCell: Rswift.ReuseIdentifier<AddAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "MutipleAccountTableViewCell")
        
        /// Reuse identifier `MyEventListCell`.
        static let myEventListCell: Rswift.ReuseIdentifier<MyEventListCell> = Rswift.ReuseIdentifier(identifier: "MyEventListCell")
        
        /// Reuse identifier `NavigationMenuTableViewCell`.
        static let navigationMenuTableViewCell: Rswift.ReuseIdentifier<NavigationMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "NavigationMenuTableViewCell")
        
        /// Reuse identifier `ProfileBlueInsightsTableViewCell`.
        static let profileBlueInsightsTableViewCell: Rswift.ReuseIdentifier<ProfileBlueInsightsTableViewCell> = Rswift.ReuseIdentifier(identifier: "ProfileBlueInsightsTableViewCell")
        
        /// Reuse identifier `SocialInteractionMapCollectionViewCell`.
        static let socialInteractionMapCollectionViewCell: Rswift.ReuseIdentifier<SocialInteractionMapCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SocialInteractionMapCollectionViewCell")
        
        /// Reuse identifier `SocialLinkCountFooterTableViewCell`.
        static let socialLinkCountFooterTableViewCell: Rswift.ReuseIdentifier<SocialLinkCountFooterTableViewCell> = Rswift.ReuseIdentifier(identifier: "SocialLinkCountFooterTableViewCell")
        
        /// Reuse identifier `SocialLinkCountHeaderTableViewCell`.
        static let socialLinkCountHeaderTableViewCell: Rswift.ReuseIdentifier<SocialLinkCountHeaderTableViewCell> = Rswift.ReuseIdentifier(identifier: "SocialLinkCountHeaderTableViewCell")
        
        /// Reuse identifier `SocialNetworkCollectionViewCell`.
        static let socialNetworkCollectionViewCell: Rswift.ReuseIdentifier<SocialNetworkCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SocialNetworkCollectionViewCell")
        
        /// Reuse identifier `SocialNetworkFooterCollectionReusableView`.
        static let socialNetworkFooterCollectionReusableView: Rswift.ReuseIdentifier<SocialNetworkFooterCollectionReusableView> = Rswift.ReuseIdentifier(identifier: "SocialNetworkFooterCollectionReusableView")
        
        /// Reuse identifier `SocialNetworkHeaderCollectionReusableView`.
        static let socialNetworkHeaderCollectionReusableView: Rswift.ReuseIdentifier<SocialNetworkHeaderCollectionReusableView> = Rswift.ReuseIdentifier(identifier: "SocialNetworkHeaderCollectionReusableView")
        
        /// Reuse identifier `UserNoteTblCell`.
        static let userNoteTblCell: Rswift.ReuseIdentifier<UserNoteTblCell> = Rswift.ReuseIdentifier(identifier: "UserNoteTblCell")
        
        fileprivate init() {}
    }
    
    fileprivate struct intern: Rswift.Validatable {
        fileprivate static func validate() throws {
            try _R.validate()
        }
        
        fileprivate init() {}
    }
    
    fileprivate class Class {}
    
    fileprivate init() {}
}

struct _R: Rswift.Validatable {
    static func validate() throws {
#if os(iOS) || os(tvOS)
        try nib.validate()
#endif
#if os(iOS) || os(tvOS)
        try storyboard.validate()
#endif
    }
    
#if os(iOS) || os(tvOS)
    struct nib: Rswift.Validatable {
        static func validate() throws {
            try _SocialNetworkCollectionViewCell.validate()
            try _SocialNetworkHeaderCollectionReusableView.validate()
        }
        
        struct _SocialLinkCountFooterTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
            typealias ReusableType = SocialLinkCountFooterTableViewCell
            
            let bundle = R.hostingBundle
            let identifier = "SocialLinkCountFooterTableViewCell"
            let name = "SocialLinkCountFooterTableViewCell"
            
            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialLinkCountFooterTableViewCell? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialLinkCountFooterTableViewCell
            }
            
            fileprivate init() {}
        }
        
        struct _SocialLinkCountHeaderTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
            typealias ReusableType = SocialLinkCountHeaderTableViewCell
            
            let bundle = R.hostingBundle
            let identifier = "SocialLinkCountHeaderTableViewCell"
            let name = "SocialLinkCountHeaderTableViewCell"
            
            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialLinkCountHeaderTableViewCell? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialLinkCountHeaderTableViewCell
            }
            
            fileprivate init() {}
        }
        
        struct _SocialNetworkCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
            typealias ReusableType = SocialNetworkCollectionViewCell
            
            let bundle = R.hostingBundle
            let identifier = "SocialNetworkCollectionViewCell"
            let name = "SocialNetworkCollectionViewCell"
            
            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialNetworkCollectionViewCell? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialNetworkCollectionViewCell
            }
            
            static func validate() throws {
                if UIKit.UIImage(named: "ic_tickblue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tickblue' is used in nib 'SocialNetworkCollectionViewCell', but couldn't be loaded.") }
                if #available(iOS 11.0, tvOS 11.0, *) {
                    if UIKit.UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardUpdatedTextColor_(0,130,253)' is used in nib 'SocialNetworkCollectionViewCell', but couldn't be loaded.") }
                }
            }
            
            fileprivate init() {}
        }
        
        struct _SocialNetworkFooterCollectionReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
            typealias ReusableType = SocialNetworkFooterCollectionReusableView
            
            let bundle = R.hostingBundle
            let identifier = "SocialNetworkFooterCollectionReusableView"
            let name = "SocialNetworkFooterCollectionReusableView"
            
            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialNetworkFooterCollectionReusableView? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialNetworkFooterCollectionReusableView
            }
            
            fileprivate init() {}
        }
        
        struct _SocialNetworkHeaderCollectionReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
            typealias ReusableType = SocialNetworkHeaderCollectionReusableView
            
            let bundle = R.hostingBundle
            let identifier = "SocialNetworkHeaderCollectionReusableView"
            let name = "SocialNetworkHeaderCollectionReusableView"
            
            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocialNetworkHeaderCollectionReusableView? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocialNetworkHeaderCollectionReusableView
            }
            
            static func validate() throws {
                if UIKit.UIImage(named: "ExpandNetworkOptions", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ExpandNetworkOptions' is used in nib 'SocialNetworkHeaderCollectionReusableView', but couldn't be loaded.") }
                if #available(iOS 11.0, tvOS 11.0, *) {
                }
            }
            
            fileprivate init() {}
        }
        
        fileprivate init() {}
    }
#endif
    
#if os(iOS) || os(tvOS)
    struct storyboard: Rswift.Validatable {
        static func validate() throws {
            
#if os(iOS) || os(tvOS)
            try launchScreen.validate()
#endif
            
#if os(iOS) || os(tvOS)
            try login.validate()
#endif
            
#if os(iOS) || os(tvOS)
            try userProfile.validate()
#endif
            
#if os(iOS) || os(tvOS)
            try main.validate()
#endif
            
#if os(iOS) || os(tvOS)
            try bluePro.validate()
#endif
            
#if os(iOS) || os(tvOS)
            try blueProUserProfile.validate()
#endif
            
#if os(iOS) || os(tvOS)
            try discover.validate()
#endif
            
#if os(iOS) || os(tvOS)
            try tour.validate()
#endif
            
#if os(iOS) || os(tvOS)
            try nearbyInteraction.validate()
#endif
        }
        
#if os(iOS) || os(tvOS)
        struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
            typealias InitialController = UIKit.UIViewController
            
            let bundle = R.hostingBundle
            let name = "LaunchScreen"
            
            static func validate() throws {
                if UIKit.UIImage(named: "LaunchScreenLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchScreenLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
                if #available(iOS 11.0, tvOS 11.0, *) {
                }
            }
            
            fileprivate init() {}
        }
#endif
        
#if os(iOS) || os(tvOS)
        struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
            typealias InitialController = UIKit.UINavigationController
            
            let bundle = R.hostingBundle
            let name = "Login"
            
            let blueSmartCardVideoVC = StoryboardViewControllerResource<BlueSmartCardVideoVC>(identifier: "BlueSmartCardVideoVC")
            let blueSmartDeviceVC = StoryboardViewControllerResource<BlueSmartDeviceVC>(identifier: "BlueSmartDeviceVC")
            let forgetpasswordVC = StoryboardViewControllerResource<ForgetpasswordVC>(identifier: "ForgetpasswordVC")
            let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
            let loginoptionsVC = StoryboardViewControllerResource<LoginoptionsVC>(identifier: "LoginoptionsVC")
            let mobileNumberVC = StoryboardViewControllerResource<MobileNumberVC>(identifier: "MobileNumberVC")
            let mobileOTPVerificationVC = StoryboardViewControllerResource<MobileOTPVerificationVC>(identifier: "MobileOTPVerificationVC")
            let nav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "nav")
            let otpVerificationVC = StoryboardViewControllerResource<OTPVerificationVC>(identifier: "OTPVerificationVC")
            let resetPasswordVC = StoryboardViewControllerResource<ResetPasswordVC>(identifier: "ResetPasswordVC")
            let signUp1VC = StoryboardViewControllerResource<SignUp1VC>(identifier: "SignUp1VC")
            let signUp2VC = StoryboardViewControllerResource<SignUp2VC>(identifier: "SignUp2VC")
            let signUp3VC = StoryboardViewControllerResource<SignUp3VC>(identifier: "SignUp3VC")
            let socialNetworkVC = StoryboardViewControllerResource<SocialNetworkVC>(identifier: "SocialNetworkVC")
            let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")
            
            func blueSmartCardVideoVC(_: Void = ()) -> BlueSmartCardVideoVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blueSmartCardVideoVC)
            }
            
            func blueSmartDeviceVC(_: Void = ()) -> BlueSmartDeviceVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blueSmartDeviceVC)
            }
            
            func forgetpasswordVC(_: Void = ()) -> ForgetpasswordVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgetpasswordVC)
            }
            
            func loginVC(_: Void = ()) -> LoginVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
            }
            
            func loginoptionsVC(_: Void = ()) -> LoginoptionsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginoptionsVC)
            }
            
            func mobileNumberVC(_: Void = ()) -> MobileNumberVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mobileNumberVC)
            }
            
            func mobileOTPVerificationVC(_: Void = ()) -> MobileOTPVerificationVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mobileOTPVerificationVC)
            }
            
            func nav(_: Void = ()) -> UIKit.UINavigationController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nav)
            }
            
            func otpVerificationVC(_: Void = ()) -> OTPVerificationVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpVerificationVC)
            }
            
            func resetPasswordVC(_: Void = ()) -> ResetPasswordVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordVC)
            }
            
            func signUp1VC(_: Void = ()) -> SignUp1VC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUp1VC)
            }
            
            func signUp2VC(_: Void = ()) -> SignUp2VC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUp2VC)
            }
            
            func signUp3VC(_: Void = ()) -> SignUp3VC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUp3VC)
            }
            
            func socialNetworkVC(_: Void = ()) -> SocialNetworkVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialNetworkVC)
            }
            
            func splashVC(_: Void = ()) -> SplashVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
            }
            
            static func validate() throws {
                
                if UIKit.UIImage(named: "BackArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BackArrow' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "HidePassword", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HidePassword' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "LaunchScreenLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchScreenLogo' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "US.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'US.png' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ValidAccount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ValidAccount' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "createAccountImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'createAccountImage' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_AppLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_AppLogo' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_Back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Back' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_animation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_animation' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_hello", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_hello' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_tickblue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tickblue' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "img_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_background' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "next_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next_arrow' is used in storyboard 'Login', but couldn't be loaded.") }
                
                if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.crop.circle.fill.badge.plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'person.crop.circle.fill.badge.plus' is used in storyboard 'Login', but couldn't be loaded.") } }
                
                if #available(iOS 11.0, tvOS 11.0, *) {
                    
                    if UIKit.UIColor(named: "AddressBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AddressBGColor' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor_(0,125,250)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor_(0,125,250)' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor_(0,125,250,0.1)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor_(0,125,250,0.1)' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardUpdatedTextColor_(0,130,253)' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "NoNearbyuserColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NoNearbyuserColor' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "ShadowColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ShadowColor' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextLightColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightColor' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextLightColor_(138,138,139)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightColor_(138,138,139)' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextfieldNewBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldNewBGColor' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextfieldborderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldborderColor' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TitleTextColor1_(43,43,43)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TitleTextColor1_(43,43,43)' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'White' is used in storyboard 'Login', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "textWhiteBlackColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textWhiteBlackColor' is used in storyboard 'Login', but couldn't be loaded.") }
                }
                
                if _R.storyboard.login().blueSmartCardVideoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blueSmartCardVideoVC' could not be loaded from storyboard 'Login' as 'BlueSmartCardVideoVC'.") }
                
                if _R.storyboard.login().blueSmartDeviceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blueSmartDeviceVC' could not be loaded from storyboard 'Login' as 'BlueSmartDeviceVC'.") }
                
                if _R.storyboard.login().forgetpasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgetpasswordVC' could not be loaded from storyboard 'Login' as 'ForgetpasswordVC'.") }
                
                if _R.storyboard.login().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Login' as 'LoginVC'.") }
                
                if _R.storyboard.login().loginoptionsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginoptionsVC' could not be loaded from storyboard 'Login' as 'LoginoptionsVC'.") }
                
                if _R.storyboard.login().mobileNumberVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mobileNumberVC' could not be loaded from storyboard 'Login' as 'MobileNumberVC'.") }
                
                if _R.storyboard.login().mobileOTPVerificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mobileOTPVerificationVC' could not be loaded from storyboard 'Login' as 'MobileOTPVerificationVC'.") }
                
                if _R.storyboard.login().otpVerificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpVerificationVC' could not be loaded from storyboard 'Login' as 'OTPVerificationVC'.") }
                
                if _R.storyboard.login().resetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordVC' could not be loaded from storyboard 'Login' as 'ResetPasswordVC'.") }
                
                if _R.storyboard.login().signUp1VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUp1VC' could not be loaded from storyboard 'Login' as 'SignUp1VC'.") }
                
                if _R.storyboard.login().signUp2VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUp2VC' could not be loaded from storyboard 'Login' as 'SignUp2VC'.") }
                
                if _R.storyboard.login().signUp3VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUp3VC' could not be loaded from storyboard 'Login' as 'SignUp3VC'.") }
                
                if _R.storyboard.login().socialNetworkVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialNetworkVC' could not be loaded from storyboard 'Login' as 'SocialNetworkVC'.") }
                
                if _R.storyboard.login().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'Login' as 'SplashVC'.") }
                
                if _R.storyboard.login().nav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nav' could not be loaded from storyboard 'Login' as 'UIKit.UINavigationController'.") }
            }
            
            fileprivate init() {}
        }
#endif
        
#if os(iOS) || os(tvOS)
        struct userProfile: Rswift.StoryboardResourceType, Rswift.Validatable {
            
            let bundle = R.hostingBundle
            let name = "UserProfile"
            
            let addNetworkVC = StoryboardViewControllerResource<AddNetworkVC>(identifier: "AddNetworkVC")
            let editAddressVC = StoryboardViewControllerResource<EditAddressVC>(identifier: "EditAddressVC")
            let editFaceBookVC = StoryboardViewControllerResource<EditFaceBookVC>(identifier: "EditFaceBookVC")
            let editFileVC = StoryboardViewControllerResource<EditFileVC>(identifier: "EditFileVC")
            let editMobileNumberVC = StoryboardViewControllerResource<EditMobileNumberVC>(identifier: "EditMobileNumberVC")
            let editSocialCustomLinkVC = StoryboardViewControllerResource<EditSocialCustomLinkVC>(identifier: "EditSocialCustomLinkVC")
            let editSocialEmailVC = StoryboardViewControllerResource<EditSocialEmailVC>(identifier: "EditSocialEmailVC")
            let socialClickVC = StoryboardViewControllerResource<SocialClickVC>(identifier: "SocialClickVC")
            let userWeChatVC = StoryboardViewControllerResource<UserWeChatVC>(identifier: "UserWeChatVC")
            
            func addNetworkVC(_: Void = ()) -> AddNetworkVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addNetworkVC)
            }
            
            func editAddressVC(_: Void = ()) -> EditAddressVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editAddressVC)
            }
            
            func editFaceBookVC(_: Void = ()) -> EditFaceBookVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editFaceBookVC)
            }
            
            func editFileVC(_: Void = ()) -> EditFileVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editFileVC)
            }
            
            func editMobileNumberVC(_: Void = ()) -> EditMobileNumberVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editMobileNumberVC)
            }
            
            func editSocialCustomLinkVC(_: Void = ()) -> EditSocialCustomLinkVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editSocialCustomLinkVC)
            }
            
            func editSocialEmailVC(_: Void = ()) -> EditSocialEmailVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editSocialEmailVC)
            }
            
            func socialClickVC(_: Void = ()) -> SocialClickVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialClickVC)
            }
            
            func userWeChatVC(_: Void = ()) -> UserWeChatVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userWeChatVC)
            }
            
            static func validate() throws {
                
                if UIKit.UIImage(named: "AddAnotherPlus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AddAnotherPlus' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "BackArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BackArrow' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "EditTitlePencil", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EditTitlePencil' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "GoPro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GoPro' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "US.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'US.png' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_Addressclose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Addressclose' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_AppLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_AppLogo' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_MenuBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_MenuBG' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_Selectedlist", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Selectedlist' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_addcontacts", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_addcontacts' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_backarrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_backarrow' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_closeBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_closeBlue' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_copy' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_facebookpixel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_facebookpixel' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_qr_code", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qr_code' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_share_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_blue' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_wechat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_wechat' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "img_Dashboard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_Dashboard' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "img_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_background' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                
                if #available(iOS 11.0, tvOS 11.0, *) {
                    
                    if UIKit.UIColor(named: "AddressBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AddressBGColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DarkmodeTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DarkmodeTextColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor_(0,125,250)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor_(0,125,250)' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor_(0,125,250,0.1)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor_(0,125,250,0.1)' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardUpdatedTextColor_(0,130,253)' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "ShadowColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ShadowColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "SharBGcolor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SharBGcolor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "SidemenuLineColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SidemenuLineColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TaptoscanColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TaptoscanColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextLightColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextLightColor_(138,138,139)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightColor_(138,138,139)' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextfieldBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldBGColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextfieldNewBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldNewBGColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextfieldborderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldborderColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TitleLightColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TitleLightColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TitleTextColor1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TitleTextColor1' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'White' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "textWhiteBlackColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textWhiteBlackColor' is used in storyboard 'UserProfile', but couldn't be loaded.") }
                }
                
                if _R.storyboard.userProfile().addNetworkVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addNetworkVC' could not be loaded from storyboard 'UserProfile' as 'AddNetworkVC'.") }
                
                if _R.storyboard.userProfile().editAddressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editAddressVC' could not be loaded from storyboard 'UserProfile' as 'EditAddressVC'.") }
                
                if _R.storyboard.userProfile().editFaceBookVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editFaceBookVC' could not be loaded from storyboard 'UserProfile' as 'EditFaceBookVC'.") }
                
                if _R.storyboard.userProfile().editFileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editFileVC' could not be loaded from storyboard 'UserProfile' as 'EditFileVC'.") }
                
                if _R.storyboard.userProfile().editMobileNumberVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editMobileNumberVC' could not be loaded from storyboard 'UserProfile' as 'EditMobileNumberVC'.") }
                
                if _R.storyboard.userProfile().editSocialCustomLinkVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editSocialCustomLinkVC' could not be loaded from storyboard 'UserProfile' as 'EditSocialCustomLinkVC'.") }
                
                if _R.storyboard.userProfile().editSocialEmailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editSocialEmailVC' could not be loaded from storyboard 'UserProfile' as 'EditSocialEmailVC'.") }
                
                if _R.storyboard.userProfile().socialClickVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialClickVC' could not be loaded from storyboard 'UserProfile' as 'SocialClickVC'.") }
                
                if _R.storyboard.userProfile().userWeChatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userWeChatVC' could not be loaded from storyboard 'UserProfile' as 'UserWeChatVC'.") }
            }
            
            fileprivate init() {}
        }
#endif
        
#if os(iOS) || os(tvOS)
        struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
            
            let bundle = R.hostingBundle
            let name = "Main"
            
            let aboutVC = StoryboardViewControllerResource<AboutVC>(identifier: "AboutVC")
            let blueShopVC = StoryboardViewControllerResource<BlueShopVC>(identifier: "BlueShopVC")
            let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
            let configureSmartCardVC = StoryboardViewControllerResource<ConfigureSmartCardVC>(identifier: "ConfigureSmartCardVC")
            let createEventVC = StoryboardViewControllerResource<CreateEventVC>(identifier: "CreateEventVC")
            let eventBroadcastDetailVC = StoryboardViewControllerResource<EventBroadcastDetailVC>(identifier: "EventBroadcastDetailVC")
            let eventDetailVC = StoryboardViewControllerResource<EventDetailVC>(identifier: "EventDetailVC")
            let giftProductListVC = StoryboardViewControllerResource<GiftProductListVC>(identifier: "GiftProductListVC")
            let myEventListViewVC = StoryboardViewControllerResource<MyEventListViewVC>(identifier: "MyEventListViewVC")
            let offerDetailVC = StoryboardViewControllerResource<OfferDetailVC>(identifier: "OfferDetailVC")
            let settingVC = StoryboardViewControllerResource<SettingVC>(identifier: "SettingVC")
            let userAddNoteVC = StoryboardViewControllerResource<UserAddNoteVC>(identifier: "UserAddNoteVC")
            let userNoteVC = StoryboardViewControllerResource<UserNoteVC>(identifier: "UserNoteVC")
            let webContentVC = StoryboardViewControllerResource<WebContentVC>(identifier: "WebContentVC")
            let contactListVC = StoryboardViewControllerResource<ContactListVC>(identifier: "ContactListVC")
            
            func aboutVC(_: Void = ()) -> AboutVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutVC)
            }
            
            func blueShopVC(_: Void = ()) -> BlueShopVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blueShopVC)
            }
            
            func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
            }
            
            func configureSmartCardVC(_: Void = ()) -> ConfigureSmartCardVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: configureSmartCardVC)
            }
            
            func createEventVC(_: Void = ()) -> CreateEventVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createEventVC)
            }
            
            func eventBroadcastDetailVC(_: Void = ()) -> EventBroadcastDetailVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventBroadcastDetailVC)
            }
            
            func eventDetailVC(_: Void = ()) -> EventDetailVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventDetailVC)
            }
            
            func giftProductListVC(_: Void = ()) -> GiftProductListVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: giftProductListVC)
            }
            
            func myEventListViewVC(_: Void = ()) -> MyEventListViewVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myEventListViewVC)
            }
            
            func offerDetailVC(_: Void = ()) -> OfferDetailVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offerDetailVC)
            }
            
            func settingVC(_: Void = ()) -> SettingVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
            }
            
            func userAddNoteVC(_: Void = ()) -> UserAddNoteVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userAddNoteVC)
            }
            
            func userNoteVC(_: Void = ()) -> UserNoteVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userNoteVC)
            }
            
            func webContentVC(_: Void = ()) -> WebContentVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webContentVC)
            }
            
            func contactListVC(_: Void = ()) -> ContactListVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactListVC)
            }
            
            static func validate() throws {
                
                if UIKit.UIImage(named: "BackArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BackArrow' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "US.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'US.png' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_About_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_About_facebook' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_About_instagram", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_About_instagram' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_About_linkedin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_About_linkedin' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_About_twitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_About_twitter' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_AddAccount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_AddAccount' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_AppLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_AppLogo' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Blue' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_Camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Camera' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_Errors", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Errors' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_backarrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_backarrow' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_copylink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_copylink' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_editprofile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_editprofile' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_eye_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_eye_close' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_hello", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_hello' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_share_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_blue' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_tickblue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tickblue' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "img_Dashboard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_Dashboard' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "img_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_background' is used in storyboard 'Main', but couldn't be loaded.") }
                
                if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "qrcode") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'qrcode' is used in storyboard 'Main', but couldn't be loaded.") } }
                
                if #available(iOS 11.0, tvOS 11.0, *) {
                    
                    if UIKit.UIColor(named: "AddressBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AddressBGColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor_(0,125,250,0.1)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor_(0,125,250,0.1)' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardUpdatedTextColor_(0,130,253)' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "NoNearbyuserColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NoNearbyuserColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "ScanProfileColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ScanProfileColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "SidemenuLineColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SidemenuLineColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TaptoscanColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TaptoscanColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextLightColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextfieldBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldBGColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextfieldNewBGColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldNewBGColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextfieldborderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextfieldborderColor' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'White' is used in storyboard 'Main', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "textWhiteBlackColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textWhiteBlackColor' is used in storyboard 'Main', but couldn't be loaded.") }
                }
                
                if _R.storyboard.main().aboutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutVC' could not be loaded from storyboard 'Main' as 'AboutVC'.") }
                
                if _R.storyboard.main().blueShopVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blueShopVC' could not be loaded from storyboard 'Main' as 'BlueShopVC'.") }
                
                if _R.storyboard.main().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Main' as 'ChangePasswordVC'.") }
                
                if _R.storyboard.main().configureSmartCardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'configureSmartCardVC' could not be loaded from storyboard 'Main' as 'ConfigureSmartCardVC'.") }
                
                if _R.storyboard.main().createEventVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createEventVC' could not be loaded from storyboard 'Main' as 'CreateEventVC'.") }
                
                if _R.storyboard.main().eventBroadcastDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventBroadcastDetailVC' could not be loaded from storyboard 'Main' as 'EventBroadcastDetailVC'.") }
                
                if _R.storyboard.main().eventDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventDetailVC' could not be loaded from storyboard 'Main' as 'EventDetailVC'.") }
                
                if _R.storyboard.main().giftProductListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'giftProductListVC' could not be loaded from storyboard 'Main' as 'GiftProductListVC'.") }
                
                if _R.storyboard.main().myEventListViewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myEventListViewVC' could not be loaded from storyboard 'Main' as 'MyEventListViewVC'.") }
                
                if _R.storyboard.main().offerDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offerDetailVC' could not be loaded from storyboard 'Main' as 'OfferDetailVC'.") }
                
                if _R.storyboard.main().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Main' as 'SettingVC'.") }
                
                if _R.storyboard.main().userAddNoteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userAddNoteVC' could not be loaded from storyboard 'Main' as 'UserAddNoteVC'.") }
                
                if _R.storyboard.main().userNoteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userNoteVC' could not be loaded from storyboard 'Main' as 'UserNoteVC'.") }
                
                if _R.storyboard.main().webContentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webContentVC' could not be loaded from storyboard 'Main' as 'WebContentVC'.") }
            }
            
            fileprivate init() {}
        }
#endif
        
#if os(iOS) || os(tvOS)
        struct bluePro: Rswift.StoryboardResourceType, Rswift.Validatable {
            
            let bundle = R.hostingBundle
            let name = "BluePro"
            
            let addLinkVC = StoryboardViewControllerResource<AddLinkVC>(identifier: "AddLinkVC")
            let bluePlusSubscriptionViewController = StoryboardViewControllerResource<BluePlusSubscriptionViewController>(identifier: "BluePlusSubscriptionViewController")
            let businessDetailVC = StoryboardViewControllerResource<BusinessDetailVC>(identifier: "BusinessDetailVC")
            let downloadInteractionsVC = StoryboardViewControllerResource<DownloadInteractionsVC>(identifier: "DownloadInteractionsVC")
            let interactionsListVC = StoryboardViewControllerResource<InteractionsListVC>(identifier: "InteractionsListVC")
            let interactionsMapVC = StoryboardViewControllerResource<InteractionsMapVC>(identifier: "InteractionsMapVC")
            let scanAndDetectQRCodeVC = StoryboardViewControllerResource<ScanAndDetectQRCodeVC>(identifier: "ScanAndDetectQRCodeVC")
            let shareQRCodeVC = StoryboardViewControllerResource<ShareQRCodeVC>(identifier: "ShareQRCodeVC")
            let capturePhotoVC = StoryboardViewControllerResource<CapturePhotoVC>(identifier: "CapturePhotoVC")
            let businessCardReviewVC = StoryboardViewControllerResource<BusinessCardReviewVC>(identifier: "BusinessCardReviewVC")
            let businessCardScanningVC = StoryboardViewControllerResource<BusinessCardScanningVC>(identifier: "BusinessCardScanningVC")
            let businessCardErrorVC = StoryboardViewControllerResource<BusinessCardErrorVC>(identifier: "BusinessCardErrorVC")
            let businessCardProfileVC = StoryboardViewControllerResource<BusinessCardProfileVC>(identifier: "BusinessCardProfileVC")
            let socialBusinessVC = StoryboardViewControllerResource<SocialBusinessVC>(identifier: "SocialBusinessVC")
            let breakTheIcePopupVC = StoryboardViewControllerResource<BreakTheIcePopupVC>(identifier: "BreakTheIcePopupVC")
            let socialDetailVC = StoryboardViewControllerResource<SocialDetailVC>(identifier: "SocialDetailVC")
            let zapierIntegrationVC = StoryboardViewControllerResource<ZapierIntegrationVC>(identifier: "ZapierIntegrationVC")
            
            func addLinkVC(_: Void = ()) -> AddLinkVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addLinkVC)
            }
            
            func bluePlusSubscriptionViewController(_: Void = ()) -> BluePlusSubscriptionViewController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bluePlusSubscriptionViewController)
            }
            
            func businessDetailVC(_: Void = ()) -> BusinessDetailVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: businessDetailVC)
            }
            
            func downloadInteractionsVC(_: Void = ()) -> DownloadInteractionsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: downloadInteractionsVC)
            }
            
            func interactionsListVC(_: Void = ()) -> InteractionsListVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: interactionsListVC)
            }
            
            func interactionsMapVC(_: Void = ()) -> InteractionsMapVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: interactionsMapVC)
            }
            
            func scanAndDetectQRCodeVC(_: Void = ()) -> ScanAndDetectQRCodeVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanAndDetectQRCodeVC)
            }
            
            func shareQRCodeVC(_: Void = ()) -> ShareQRCodeVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareQRCodeVC)
            }
            
            func capturePhotoVC(_: Void = ()) -> CapturePhotoVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: capturePhotoVC)
            }
            
            func businessCardReviewVC(_: Void = ()) -> BusinessCardReviewVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: businessCardReviewVC)
            }
            
            func businessCardScanningVC(_: Void = ()) -> BusinessCardScanningVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: businessCardScanningVC)
            }
            
            func businessCardErrorVC(_: Void = ()) -> BusinessCardErrorVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: businessCardErrorVC)
            }
            
            func businessCardProfileVC(_: Void = ()) -> BusinessCardProfileVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: businessCardProfileVC)
            }
            
            func socialBusinessVC(_: Void = ()) -> SocialBusinessVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialBusinessVC)
            }
            
            func breakTheIcePopupVC(_: Void = ()) -> BreakTheIcePopupVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: breakTheIcePopupVC)
            }
            
            func socialDetailVC(_: Void = ()) -> SocialDetailVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialDetailVC)
            }
            
            func zapierIntegrationVC(_: Void = ()) -> ZapierIntegrationVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: zapierIntegrationVC)
            }
            
            static func validate() throws {
                
                if UIKit.UIImage(named: "AddAnotherPlus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AddAnotherPlus' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "BlueProLargeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BlueProLargeIcon' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "DownloadInteraction", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DownloadInteraction' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "DownloadQRCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DownloadQRCode' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "EditTitlePencil", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EditTitlePencil' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "GoPro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GoPro' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "IsPremiumUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IsPremiumUser' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "IsPremiumUserDefault", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IsPremiumUserDefault' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "LeftArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LeftArrow' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "LeftArrow_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LeftArrow_blue' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "MailQRCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MailQRCode' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "PrintQRCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PrintQRCode' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ProfileQRCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfileQRCode' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "RightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RightArrow' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ShareQRCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ShareQRCode' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "SubscriptionScreenImage1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SubscriptionScreenImage1' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "UserImagePlaceholer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UserImagePlaceholer' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ValidAccount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ValidAccount' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "White_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'White_close' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "blue-1.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blue-1.png' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "blue-logo.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blue-logo.png' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "zapier", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'zapier' is used in storyboard 'BluePro', but couldn't be loaded.") }
                
                if #available(iOS 11.0, tvOS 11.0, *) {
                    
                    if UIKit.UIColor(named: "DashboardColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor_(0,125,250)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor_(0,125,250)' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardColor_(0,125,250,0.1)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor_(0,125,250,0.1)' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardUpdatedTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardUpdatedTextColor' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardUpdatedTextColor_(0,130,253)' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "Grey(18,18,18,0.3)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey(18,18,18,0.3)' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "Grey_TextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey_TextColor' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextColor_(49,49,49)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextColor_(49,49,49)' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextLightColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightColor' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextLightColor_(138,138,139)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightColor_(138,138,139)' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TitleLightColor_(138,138,142)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TitleLightColor_(138,138,142)' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TitleTextColor1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TitleTextColor1' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TitleTextColor1_(43,43,43)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TitleTextColor1_(43,43,43)' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'White' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "White_(255,255,255,0.2)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'White_(255,255,255,0.2)' is used in storyboard 'BluePro', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "textWhiteBlackColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'textWhiteBlackColor' is used in storyboard 'BluePro', but couldn't be loaded.") }
                }
                
                if _R.storyboard.bluePro().addLinkVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addLinkVC' could not be loaded from storyboard 'BluePro' as 'AddLinkVC'.") }
                
                if _R.storyboard.bluePro().bluePlusSubscriptionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bluePlusSubscriptionViewController' could not be loaded from storyboard 'BluePro' as 'BluePlusSubscriptionViewController'.") }
                
                if _R.storyboard.bluePro().businessDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'businessDetailVC' could not be loaded from storyboard 'BluePro' as 'BusinessDetailVC'.") }
                
                if _R.storyboard.bluePro().downloadInteractionsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'downloadInteractionsVC' could not be loaded from storyboard 'BluePro' as 'DownloadInteractionsVC'.") }
                
                if _R.storyboard.bluePro().interactionsListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'interactionsListVC' could not be loaded from storyboard 'BluePro' as 'InteractionsListVC'.") }
                
                if _R.storyboard.bluePro().interactionsMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'interactionsMapVC' could not be loaded from storyboard 'BluePro' as 'InteractionsMapVC'.") }
                
                if _R.storyboard.bluePro().scanAndDetectQRCodeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanAndDetectQRCodeVC' could not be loaded from storyboard 'BluePro' as 'ScanAndDetectQRCodeVC'.") }
                
                if _R.storyboard.bluePro().shareQRCodeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareQRCodeVC' could not be loaded from storyboard 'BluePro' as 'ShareQRCodeVC'.") }
                
                if _R.storyboard.bluePro().capturePhotoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'capturePhotoVC' could not be loaded from storyboard 'BluePro' as 'CapturePhotoVC'.") }
                
                if _R.storyboard.bluePro().businessCardReviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'businessCardReviewVC' could not be loaded from storyboard 'BluePro' as 'BusinessCardReviewVC'.") }
                
                if _R.storyboard.bluePro().businessCardScanningVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'businessCardScanningVC' could not be loaded from storyboard 'BluePro' as 'BusinessCardScanningVC'.") }
                
                if _R.storyboard.bluePro().businessCardErrorVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'businessCardErrorVC' could not be loaded from storyboard 'BluePro' as 'BusinessCardErrorVC'.") }
                
                if _R.storyboard.bluePro().businessCardProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'businessCardProfileVC' could not be loaded from storyboard 'BluePro' as 'BusinessCardProfileVC'.") }
                
                if _R.storyboard.bluePro().socialBusinessVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialBusinessVC' could not be loaded from storyboard 'BluePro' as 'SocialBusinessVC'.") }
                
                if _R.storyboard.bluePro().breakTheIcePopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'breakTheIcePopupVC' could not be loaded from storyboard 'BluePro' as 'BreakTheIcePopupVC'.") }
                
                if _R.storyboard.bluePro().socialDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialDetailVC' could not be loaded from storyboard 'BluePro' as 'SocialDetailVC'.") }
                
                if _R.storyboard.bluePro().zapierIntegrationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'zapierIntegrationVC' could not be loaded from storyboard 'BluePro' as 'ZapierIntegrationVC'.") }
            }
            
            fileprivate init() {}
        }
#endif
        
#if os(iOS) || os(tvOS)
        struct blueProUserProfile: Rswift.StoryboardResourceType, Rswift.Validatable {
            
            let bundle = R.hostingBundle
            let name = "BlueProUserProfile"
            
            let addBioVC = StoryboardViewControllerResource<AddBioVC>(identifier: "AddBioVC")
            let editSocialProfileVC = StoryboardViewControllerResource<EditSocialProfileVC>(identifier: "EditSocialProfileVC")
            let editUserProfileVC = StoryboardViewControllerResource<EditUserProfileVC>(identifier: "EditUserProfileVC")
            let linksBlueInsightsVC = StoryboardViewControllerResource<LinksBlueInsightsVC>(identifier: "LinksBlueInsightsVC")
            let profileBlueInsightsVC = StoryboardViewControllerResource<ProfileBlueInsightsVC>(identifier: "ProfileBlueInsightsVC")
            
            func addBioVC(_: Void = ()) -> AddBioVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addBioVC)
            }
            
            func editSocialProfileVC(_: Void = ()) -> EditSocialProfileVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editSocialProfileVC)
            }
            
            func editUserProfileVC(_: Void = ()) -> EditUserProfileVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editUserProfileVC)
            }
            
            func linksBlueInsightsVC(_: Void = ()) -> LinksBlueInsightsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: linksBlueInsightsVC)
            }
            
            func profileBlueInsightsVC(_: Void = ()) -> ProfileBlueInsightsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileBlueInsightsVC)
            }
            
            static func validate() throws {
                
                if UIKit.UIImage(named: "BackArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BackArrow' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "GetPaid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GetPaid' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "PrivateModeLock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PrivateModeLock' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ValidAccount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ValidAccount' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                
                if #available(iOS 11.0, tvOS 11.0, *) {
                    
                    if UIKit.UIColor(named: "DashboardColor_(0,125,250)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardColor_(0,125,250)' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardUpdatedTextColor_(0,130,253)' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "Grey_(138,138,139)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey_(138,138,139)' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextColor_(49,49,49)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextColor_(49,49,49)' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TitleTextColor1_(43,43,43)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TitleTextColor1_(43,43,43)' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'White' is used in storyboard 'BlueProUserProfile', but couldn't be loaded.") }
                }
                
                if _R.storyboard.blueProUserProfile().addBioVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addBioVC' could not be loaded from storyboard 'BlueProUserProfile' as 'AddBioVC'.") }
                
                if _R.storyboard.blueProUserProfile().editSocialProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editSocialProfileVC' could not be loaded from storyboard 'BlueProUserProfile' as 'EditSocialProfileVC'.") }
                
                if _R.storyboard.blueProUserProfile().editUserProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editUserProfileVC' could not be loaded from storyboard 'BlueProUserProfile' as 'EditUserProfileVC'.") }
                
                if _R.storyboard.blueProUserProfile().linksBlueInsightsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'linksBlueInsightsVC' could not be loaded from storyboard 'BlueProUserProfile' as 'LinksBlueInsightsVC'.") }
                
                if _R.storyboard.blueProUserProfile().profileBlueInsightsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileBlueInsightsVC' could not be loaded from storyboard 'BlueProUserProfile' as 'ProfileBlueInsightsVC'.") }
            }
            
            fileprivate init() {}
        }
#endif
        
#if os(iOS) || os(tvOS)
        struct discover: Rswift.StoryboardResourceType, Rswift.Validatable {
            
            let bundle = R.hostingBundle
            let name = "Discover"
            
            let bstHistoryVC = StoryboardViewControllerResource<BSTHistoryVC>(identifier: "BSTHistoryVC")
            let bstSendTokenVC = StoryboardViewControllerResource<BSTSendTokenVC>(identifier: "BSTSendTokenVC")
            let bstSendTokenListVC = StoryboardViewControllerResource<BSTSendTokenListVC>(identifier: "BSTSendTokenListVC")
            let blueInsightsVC = StoryboardViewControllerResource<BlueInsightsVC>(identifier: "BlueInsightsVC")
            let dashboardVC = StoryboardViewControllerResource<DashboardVC>(identifier: "DashboardVC")
            let interactionsListMapVC = StoryboardViewControllerResource<InteractionsListMapVC>(identifier: "InteractionsListMapVC")
            let mainTabbarController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "MainTabbarController")
            let navigationMenuVC = StoryboardViewControllerResource<NavigationMenuVC>(identifier: "NavigationMenuVC")
            
            func bstHistoryVC(_: Void = ()) -> BSTHistoryVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bstHistoryVC)
            }
            
            func bstSendTokenVC(_: Void = ()) -> BSTSendTokenVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bstSendTokenVC)
            }
            
            func bstSendTokenListVC(_: Void = ()) -> BSTSendTokenListVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bstSendTokenListVC)
            }
            
            func blueInsightsVC(_: Void = ()) -> BlueInsightsVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blueInsightsVC)
            }
            
            func dashboardVC(_: Void = ()) -> DashboardVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardVC)
            }
            
            func interactionsListMapVC(_: Void = ()) -> InteractionsListMapVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: interactionsListMapVC)
            }
            
            func mainTabbarController(_: Void = ()) -> UIKit.UITabBarController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabbarController)
            }
            
            func navigationMenuVC(_: Void = ()) -> NavigationMenuVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: navigationMenuVC)
            }
            
            static func validate() throws {
                
                if UIKit.UIImage(named: "BluePro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BluePro' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "DashboardArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DashboardArrow' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "Discover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Discover' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "DiscoverSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DiscoverSelected' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "DownloadQRCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DownloadQRCode' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "Insights", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Insights' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "InsightsSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InsightsSelected' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "Interactions", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Interactions' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "InteractionsSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InteractionsSelected' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "IsPremiumUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IsPremiumUser' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "Logout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logout' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "RightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RightArrow' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "UserImagePlaceholer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UserImagePlaceholer' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "WhiteDownArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WhiteDownArrow' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "WhiteQRCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WhiteQRCode' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "blue-1.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blue-1.png' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "bluetooth.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bluetooth.png' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_AddAccount", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_AddAccount' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_Shop_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Shop_n' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_correct", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_correct' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "ic_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu' is used in storyboard 'Discover', but couldn't be loaded.") }
                
                if #available(iOS 11.0, tvOS 11.0, *) {
                    
                    if UIKit.UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardUpdatedTextColor_(0,130,253)' is used in storyboard 'Discover', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "Grey(18,18,18,0.3)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey(18,18,18,0.3)' is used in storyboard 'Discover', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextColor_(49,49,49)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextColor_(49,49,49)' is used in storyboard 'Discover', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TextLightColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TextLightColor' is used in storyboard 'Discover', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "TitleTextColor1_(43,43,43)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'TitleTextColor1_(43,43,43)' is used in storyboard 'Discover', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'White' is used in storyboard 'Discover', but couldn't be loaded.") }
                }
                
                if _R.storyboard.discover().bstHistoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bstHistoryVC' could not be loaded from storyboard 'Discover' as 'BSTHistoryVC'.") }
                
                if _R.storyboard.discover().bstSendTokenVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bstSendTokenVC' could not be loaded from storyboard 'Discover' as 'BSTSendTokenVC'.") }
                
                if _R.storyboard.discover().bstSendTokenListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bstSendTokenListVC' could not be loaded from storyboard 'Discover' as 'BSTSendTokenListVC'.") }
                
                if _R.storyboard.discover().blueInsightsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blueInsightsVC' could not be loaded from storyboard 'Discover' as 'BlueInsightsVC'.") }
                
                if _R.storyboard.discover().dashboardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardVC' could not be loaded from storyboard 'Discover' as 'DashboardVC'.") }
                
                if _R.storyboard.discover().interactionsListMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'interactionsListMapVC' could not be loaded from storyboard 'Discover' as 'InteractionsListMapVC'.") }
                
                if _R.storyboard.discover().mainTabbarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabbarController' could not be loaded from storyboard 'Discover' as 'UIKit.UITabBarController'.") }
                
                if _R.storyboard.discover().navigationMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'navigationMenuVC' could not be loaded from storyboard 'Discover' as 'NavigationMenuVC'.") }
            }
            
            fileprivate init() {}
        }
#endif
        
#if os(iOS) || os(tvOS)
        struct tour: Rswift.StoryboardResourceType, Rswift.Validatable {
            
            let bundle = R.hostingBundle
            let name = "Tour"
            
            let tourPageMasterViewController = StoryboardViewControllerResource<TourPageMasterViewController>(identifier: "TourPageMasterViewController")
            let tourScreen1ViewController = StoryboardViewControllerResource<TourScreen1ViewController>(identifier: "TourScreen1ViewController")
            let tourScreen2ViewController = StoryboardViewControllerResource<TourScreen2ViewController>(identifier: "TourScreen2ViewController")
            let tourScreen3ViewController = StoryboardViewControllerResource<TourScreen3ViewController>(identifier: "TourScreen3ViewController")
            let tourScreen4ViewController = StoryboardViewControllerResource<TourScreen4ViewController>(identifier: "TourScreen4ViewController")
            let tourScreen5ViewController = StoryboardViewControllerResource<TourScreen5ViewController>(identifier: "TourScreen5ViewController")
            
            func tourPageMasterViewController(_: Void = ()) -> TourPageMasterViewController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tourPageMasterViewController)
            }
            
            func tourScreen1ViewController(_: Void = ()) -> TourScreen1ViewController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tourScreen1ViewController)
            }
            
            func tourScreen2ViewController(_: Void = ()) -> TourScreen2ViewController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tourScreen2ViewController)
            }
            
            func tourScreen3ViewController(_: Void = ()) -> TourScreen3ViewController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tourScreen3ViewController)
            }
            
            func tourScreen4ViewController(_: Void = ()) -> TourScreen4ViewController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tourScreen4ViewController)
            }
            
            func tourScreen5ViewController(_: Void = ()) -> TourScreen5ViewController? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tourScreen5ViewController)
            }
            
            static func validate() throws {
                
                if UIKit.UIImage(named: "BreakTheIceWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BreakTheIceWhite' is used in storyboard 'Tour', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "DiscoverModeWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DiscoverModeWhite' is used in storyboard 'Tour', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "NFCWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NFCWhite' is used in storyboard 'Tour', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "WhiteQRCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WhiteQRCode' is used in storyboard 'Tour', but couldn't be loaded.") }
                
                if UIKit.UIImage(named: "shareYourProfileWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shareYourProfileWhite' is used in storyboard 'Tour', but couldn't be loaded.") }
                
                if #available(iOS 11.0, tvOS 11.0, *) {
                    
                    if UIKit.UIColor(named: "DashboardUpdatedTextColor_(0,130,253)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DashboardUpdatedTextColor_(0,130,253)' is used in storyboard 'Tour', but couldn't be loaded.") }
                    
                    if UIKit.UIColor(named: "White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'White' is used in storyboard 'Tour', but couldn't be loaded.") }
                }
                
                if _R.storyboard.tour().tourPageMasterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tourPageMasterViewController' could not be loaded from storyboard 'Tour' as 'TourPageMasterViewController'.") }
                
                if _R.storyboard.tour().tourScreen1ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tourScreen1ViewController' could not be loaded from storyboard 'Tour' as 'TourScreen1ViewController'.") }
                
                if _R.storyboard.tour().tourScreen2ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tourScreen2ViewController' could not be loaded from storyboard 'Tour' as 'TourScreen2ViewController'.") }
                
                if _R.storyboard.tour().tourScreen3ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tourScreen3ViewController' could not be loaded from storyboard 'Tour' as 'TourScreen3ViewController'.") }
                
                if _R.storyboard.tour().tourScreen4ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tourScreen4ViewController' could not be loaded from storyboard 'Tour' as 'TourScreen4ViewController'.") }
                
                if _R.storyboard.tour().tourScreen5ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tourScreen5ViewController' could not be loaded from storyboard 'Tour' as 'TourScreen5ViewController'.") }
            }
            
            fileprivate init() {}
        }
#endif
        
#if os(iOS) || os(tvOS)
        struct nearbyInteraction: Rswift.StoryboardResourceType, Rswift.Validatable {
            let bundle = R.hostingBundle
            let name = "NearbyInteraction"
            
            let nearbyRequestVC = StoryboardViewControllerResource<NearbyRequestVC>(identifier: "NearbyRequestVC")
            let nearbyDirectionVC = StoryboardViewControllerResource<NearbyDirectionVC>(identifier: "NearbyDirectionVC")
            let nearbyDistanceVC = StoryboardViewControllerResource<NearbyDistanceVC>(identifier: "NearbyDistanceVC")
            let nearbyDeclinedRequestVC = StoryboardViewControllerResource<NearbyDeclinedRequestVC>(identifier: "NearbyDeclinedRequestVC")
            let nearbySendRequestVC = StoryboardViewControllerResource<NearbySendRequestVC>(identifier: "NearbySendRequestVC")
            let nearbyProofOfInteractionVC = StoryboardViewControllerResource<NearbyProofOfInteractionVC>(identifier: "NearbyProofOfInteractionVC")
            let nearbyInteractionValidatedVC = StoryboardViewControllerResource<NearbyInteractionValidatedVC>(identifier: "NearbyInteractionValidatedVC")
            let nearbyInteractionPendingVC = StoryboardViewControllerResource<NearbyInteractionPendingVC>(identifier: "NearbyInteractionPendingVC")
            let interactionBSTVC = StoryboardViewControllerResource<InteractionBSTVC>(identifier: "InteractionBSTVC")
            let nearbyWaitingApprovalVC = StoryboardViewControllerResource<NearbyWaitingApprovalVC>(identifier: "NearbyWaitingApprovalVC")
            
            func nearbyWaitingApprovalVC(_: Void = ()) -> NearbyWaitingApprovalVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearbyWaitingApprovalVC)
            }
            
            func interactionBSTVC(_: Void = ()) -> InteractionBSTVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: interactionBSTVC)
            }
            
            func nearbyInteractionPendingVC(_: Void = ()) -> NearbyInteractionPendingVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearbyInteractionPendingVC)
            }
            
            func nearbyRequestVC(_: Void = ()) -> NearbyRequestVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearbyRequestVC)
            }
            
            func nearbyDirectionVC(_: Void = ()) -> NearbyDirectionVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearbyDirectionVC)
            }
            
            func nearbyDistanceVC(_: Void = ()) -> NearbyDistanceVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearbyDistanceVC)
            }
            
            func nearbyDeclinedRequestVC(_: Void = ()) -> NearbyDeclinedRequestVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearbyDeclinedRequestVC)
            }
            
            func nearbySendRequestVC(_: Void = ()) -> NearbySendRequestVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearbySendRequestVC)
            }
            
            func nearbyProofOfInteractionVC(_: Void = ()) -> NearbyProofOfInteractionVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearbyProofOfInteractionVC)
            }
            
            func nearbyInteractionValidatedVC(_: Void = ()) -> NearbyInteractionValidatedVC? {
                return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nearbyInteractionValidatedVC)
            }
            
            static func validate() throws {
                
                if _R.storyboard.nearbyInteraction().nearbyRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nearbyRequestVC' could not be loaded from storyboard 'NearbyInteraction' as 'NearbyRequestVC'.") }
                
                if _R.storyboard.nearbyInteraction().nearbyDirectionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nearbyDirectionVC' could not be loaded from storyboard 'NearbyInteraction' as 'NearbyDirectionVC'.") }
                
                if _R.storyboard.nearbyInteraction().nearbyDistanceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nearbyDistanceVC' could not be loaded from storyboard 'NearbyInteraction' as 'NearbyDirectionVC'.") }
                
                if _R.storyboard.nearbyInteraction().nearbyDeclinedRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nearbyDeclinedRequestVC' could not be loaded from storyboard 'NearbyInteraction' as 'NearbyDeclinedRequestVC'.") }
                
                if _R.storyboard.nearbyInteraction().nearbySendRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nearbySendRequestVC' could not be loaded from storyboard 'NearbyInteraction' as 'NearbySendRequestVC'.") }
                
                if _R.storyboard.nearbyInteraction().nearbyProofOfInteractionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nearbyProofOfInteractionVC' could not be loaded from storyboard 'NearbyInteraction' as 'NearbyProofOfInteractionVC'.") }
                
                if _R.storyboard.nearbyInteraction().nearbyInteractionValidatedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nearbyInteractionValidatedVC' could not be loaded from storyboard 'NearbyInteraction' as 'NearbyInteractionValidatedVC'.") }
                
                if _R.storyboard.nearbyInteraction().nearbyInteractionPendingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'NearbyInteractionPendingVC' could not be loaded from storyboard 'NearbyInteraction' as 'NearbyInteractionPendingVC'.") }
                
                if _R.storyboard.nearbyInteraction().interactionBSTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'interactionBSTVC' could not be loaded from storyboard 'NearbyInteraction' as 'InteractionBSTVC'.") }
                
                if _R.storyboard.nearbyInteraction().nearbyWaitingApprovalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nearbyWaitingApprovalVC' could not be loaded from storyboard 'NearbyInteraction' as 'NearbyWaitingApprovalVC'.") }
            }
            fileprivate init() {}
        }
#endif
        
        fileprivate init() {}
    }
#endif
    
    fileprivate init() {}
}
