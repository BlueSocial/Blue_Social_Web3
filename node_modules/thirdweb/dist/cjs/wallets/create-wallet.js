"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.walletConnect = exports.createWallet = void 0;
const track_js_1 = require("../analytics/track.js");
const webStorage_js_1 = require("../utils/storage/webStorage.js");
const isMobile_js_1 = require("../utils/web/isMobile.js");
const openWindow_js_1 = require("../utils/web/openWindow.js");
const coinbase_wallet_js_1 = require("./coinbase/coinbase-wallet.js");
const coinbaseWebSDK_js_1 = require("./coinbase/coinbaseWebSDK.js");
const constants_js_1 = require("./constants.js");
const in_app_js_1 = require("./in-app/web/in-app.js");
const smart_wallet_js_1 = require("./smart/smart-wallet.js");
const wallet_emitter_js_1 = require("./wallet-emitter.js");
// TODO: figure out how to define the type without tuple args type and using function overloads
/**
 * Creates a wallet based on the provided ID and arguments.
 * @param args - The arguments for creating the wallet.
 * @returns - The created wallet.
 * @example
 * ```ts
 * import { createWallet } from "thirdweb/wallets";
 *
 * const metamaskWallet = createWallet("io.metamask");
 *
 * const account = await metamaskWallet.connect({
 *  client,
 * });
 * ```
 * @wallet
 */
function createWallet(...args) {
    const [id, creationOptions] = args;
    switch (id) {
        /**
         * SMART WALLET
         */
        case "smart": {
            return (0, smart_wallet_js_1.smartWallet)(creationOptions);
        }
        /**
         * IN-APP WALLET
         */
        case "embedded":
        case "inApp": {
            return (0, in_app_js_1.inAppWallet)(creationOptions);
        }
        /**
         * COINBASE WALLET VIA SDK
         * -> if no injected coinbase found, we'll use the coinbase SDK
         */
        case constants_js_1.COINBASE: {
            const options = creationOptions;
            return (0, coinbase_wallet_js_1.coinbaseWalletSDK)({
                createOptions: options,
                providerFactory: () => (0, coinbaseWebSDK_js_1.getCoinbaseWebProvider)(options),
                onConnectRequested: async (provider) => {
                    // on the web, make sure to show the coinbase popup IMMEDIATELY on connection requested
                    // otherwise the popup might get blocked in safari
                    // TODO awaiting the provider is fast only thanks to preloading that happens in our components
                    // these probably need to actually imported / created synchronously to be used headless properly
                    const { showCoinbasePopup } = await Promise.resolve().then(() => require("./coinbase/utils.js"));
                    return showCoinbasePopup(provider);
                },
            });
        }
        /**
         * WALLET CONNECT AND INJECTED WALLETS + walletConnect standalone
         */
        default: {
            const emitter = (0, wallet_emitter_js_1.createWalletEmitter)();
            let account = undefined;
            let chain = undefined;
            const unsubscribeChain = emitter.subscribe("chainChanged", (newChain) => {
                chain = newChain;
            });
            function reset() {
                account = undefined;
                chain = undefined;
            }
            let handleDisconnect = async () => { };
            const unsubscribeDisconnect = emitter.subscribe("disconnect", () => {
                reset();
                unsubscribeChain();
                unsubscribeDisconnect();
            });
            emitter.subscribe("accountChanged", (_account) => {
                account = _account;
            });
            let handleSwitchChain = async () => {
                throw new Error("Not implemented yet");
            };
            // on mobile, deeplink to the wallet app for session handling
            const sessionHandler = (0, isMobile_js_1.isMobile)()
                ? (uri) => (0, openWindow_js_1.openWindow)(uri)
                : undefined;
            const wallet = {
                id,
                subscribe: emitter.subscribe,
                getConfig: () => args[1],
                getChain: () => chain,
                getAccount: () => account,
                autoConnect: async (options) => {
                    const { injectedProvider } = await Promise.resolve().then(() => require("./injected/mipdStore.js"));
                    // injected wallet priority for autoConnect
                    if (id !== "walletConnect" && injectedProvider(id)) {
                        const { autoConnectInjectedWallet } = await Promise.resolve().then(() => require("./injected/index.js"));
                        const [connectedAccount, connectedChain, doDisconnect, doSwitchChain,] = await autoConnectInjectedWallet(id, emitter, options.chain);
                        // set the states
                        account = connectedAccount;
                        chain = connectedChain;
                        handleDisconnect = doDisconnect;
                        handleSwitchChain = doSwitchChain;
                        (0, track_js_1.trackConnect)({
                            client: options.client,
                            walletType: id,
                            walletAddress: account.address,
                        });
                        // return account
                        return account;
                    }
                    if (options && "client" in options) {
                        const { autoConnectWC } = await Promise.resolve().then(() => require("./wallet-connect/controller.js"));
                        const [connectedAccount, connectedChain, doDisconnect, doSwitchChain,] = await autoConnectWC(options, emitter, wallet.id, webStorage_js_1.webLocalStorage, sessionHandler);
                        // set the states
                        account = connectedAccount;
                        chain = connectedChain;
                        handleDisconnect = doDisconnect;
                        handleSwitchChain = doSwitchChain;
                        (0, track_js_1.trackConnect)({
                            client: options.client,
                            walletType: id,
                            walletAddress: account.address,
                        });
                        // return account
                        return account;
                    }
                    throw new Error("Failed to auto connect");
                },
                connect: async (options) => {
                    async function wcConnect(wcOptions) {
                        const { connectWC } = await Promise.resolve().then(() => require("./wallet-connect/controller.js"));
                        const [connectedAccount, connectedChain, doDisconnect, doSwitchChain,] = await connectWC(wcOptions, emitter, wallet.id, webStorage_js_1.webLocalStorage, sessionHandler);
                        // set the states
                        account = connectedAccount;
                        chain = connectedChain;
                        handleDisconnect = doDisconnect;
                        handleSwitchChain = doSwitchChain;
                        (0, track_js_1.trackConnect)({
                            client: wcOptions.client,
                            walletType: id,
                            walletAddress: account.address,
                        });
                        return account;
                    }
                    if (id === "walletConnect") {
                        const { client, chain: _chain, ...walletConnectOptions } = options;
                        return wcConnect({
                            client,
                            chain: _chain,
                            walletConnect: {
                                ...walletConnectOptions,
                            },
                        });
                    }
                    // prefer walletconnect over injected if explicitely passing walletConnect options
                    const forceWalletConnectOption = options && "walletConnect" in options;
                    const { injectedProvider } = await Promise.resolve().then(() => require("./injected/mipdStore.js"));
                    if (injectedProvider(id) && !forceWalletConnectOption) {
                        const { connectInjectedWallet } = await Promise.resolve().then(() => require("./injected/index.js"));
                        const [connectedAccount, connectedChain, doDisconnect, doSwitchChain,] = await connectInjectedWallet(id, options, emitter);
                        // set the states
                        account = connectedAccount;
                        chain = connectedChain;
                        handleDisconnect = doDisconnect;
                        handleSwitchChain = doSwitchChain;
                        (0, track_js_1.trackConnect)({
                            client: options.client,
                            walletType: id,
                            walletAddress: account.address,
                        });
                        // return account
                        return account;
                    }
                    if (options && "client" in options) {
                        return wcConnect(options);
                    }
                    throw new Error("Failed to connect");
                },
                // these get overridden in connect and autoConnect
                disconnect: async () => {
                    reset();
                    await handleDisconnect();
                },
                switchChain: (c) => handleSwitchChain(c),
            };
            return wallet;
        }
    }
}
exports.createWallet = createWallet;
/**
 * Creates a wallet that allows connecting to any wallet that supports the WalletConnect protocol.
 * @returns The created smart wallet.
 * @example
 * ```ts
 * import { walletConnect } from "thirdweb/wallets";
 *
 * const wallet = walletConnect();
 *
 * const account = await wallet.connect({
 *  client
 * });
 * ```
 * @wallet
 */
function walletConnect() {
    return createWallet("walletConnect");
}
exports.walletConnect = walletConnect;
//# sourceMappingURL=create-wallet.js.map