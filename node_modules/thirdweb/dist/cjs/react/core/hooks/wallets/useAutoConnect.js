"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAutoConnectCore = void 0;
const react_query_1 = require("@tanstack/react-query");
const index_js_1 = require("../../../../wallets/manager/index.js");
const timeoutPromise_js_1 = require("../../utils/timeoutPromise.js");
const useConnect_js_1 = require("./useConnect.js");
const useSetActiveWalletConnectionStatus_js_1 = require("./useSetActiveWalletConnectionStatus.js");
function useAutoConnectCore(manager, storage, props, getInstalledWallets) {
    const setConnectionStatus = (0, useSetActiveWalletConnectionStatus_js_1.useSetActiveWalletConnectionStatusCore)(manager);
    const { connect } = (0, useConnect_js_1.useConnectCore)(manager, {
        client: props.client,
        accountAbstraction: props.accountAbstraction,
    });
    const { isAutoConnecting } = manager;
    const { wallets, onConnect } = props;
    const timeout = props.timeout ?? 15000;
    // get the supported wallets from thirdweb provider
    // check the storage for last connected wallets and connect them all
    // check the storage for last active wallet and set it as active
    const autoConnect = async () => {
        let autoConnected = false;
        isAutoConnecting.setValue(true);
        const [lastConnectedWalletIds, lastActiveWalletId] = await Promise.all([
            (0, index_js_1.getStoredConnectedWalletIds)(storage),
            (0, index_js_1.getStoredActiveWalletId)(storage),
        ]);
        // if no wallets were last connected
        if (!lastConnectedWalletIds) {
            return autoConnected;
        }
        const lastConnectedChain = await (0, index_js_1.getLastConnectedChain)(storage);
        async function handleWalletConnection(wallet) {
            return wallet.autoConnect({
                client: props.client,
                chain: lastConnectedChain ?? undefined,
            });
        }
        const availableWallets = [...wallets, ...(getInstalledWallets?.() ?? [])];
        const activeWallet = lastActiveWalletId &&
            availableWallets.find((w) => w.id === lastActiveWalletId);
        if (activeWallet) {
            try {
                setConnectionStatus("connecting"); // only set connecting status if we are connecting the last active EOA
                await (0, timeoutPromise_js_1.timeoutPromise)(handleWalletConnection(activeWallet), {
                    ms: timeout,
                    message: `AutoConnect timeout : ${timeout}ms limit exceeded.`,
                });
                // connected wallet could be activeWallet or smart wallet
                const connectedWallet = await connect(activeWallet);
                if (connectedWallet) {
                    if (onConnect) {
                        try {
                            onConnect(connectedWallet);
                            autoConnected = true;
                        }
                        catch {
                            // ignore
                        }
                    }
                }
                else {
                    setConnectionStatus("disconnected");
                }
            }
            catch (e) {
                console.error("Failed to auto connect last active wallet");
                console.error(e);
                setConnectionStatus("disconnected");
            }
        }
        else {
            setConnectionStatus("disconnected");
        }
        // then connect wallets that were last connected but were not set as active
        const otherWallets = wallets.filter((w) => w.id !== lastActiveWalletId && lastConnectedWalletIds.includes(w.id));
        for (const wallet of otherWallets) {
            try {
                await handleWalletConnection(wallet);
                manager.addConnectedWallet(wallet);
            }
            catch (e) {
                console.error("Failed to auto connect a non-active connected wallet");
                console.error(e);
            }
        }
        isAutoConnecting.setValue(false);
        return autoConnected; // useQuery needs a return value
    };
    // trigger the auto connect on first mount only
    const query = (0, react_query_1.useQuery)({
        queryKey: ["autoConnect", props.client.clientId],
        queryFn: autoConnect,
        refetchOnMount: false,
        refetchOnWindowFocus: false,
    });
    return query;
}
exports.useAutoConnectCore = useAutoConnectCore;
//# sourceMappingURL=useAutoConnect.js.map