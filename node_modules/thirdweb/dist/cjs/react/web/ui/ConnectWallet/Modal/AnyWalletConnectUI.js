"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnyWalletConnectUI = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const isMobile_js_1 = require("../../../../../utils/web/isMobile.js");
const constants_js_1 = require("../../../../../wallets/constants.js");
const mipdStore_js_1 = require("../../../../../wallets/injected/mipdStore.js");
const useWalletConnectionCtx_js_1 = require("../../../../core/hooks/others/useWalletConnectionCtx.js");
const getInjectedWalletLocale_js_1 = require("../../../wallets/injected/locale/getInjectedWalletLocale.js");
const GetStartedScreen_js_1 = require("../../../wallets/shared/GetStartedScreen.js");
const LoadingScreen_js_1 = require("../../../wallets/shared/LoadingScreen.js");
const WalletConnectConnection_js_1 = require("../../../wallets/shared/WalletConnectConnection.js");
const useWalletInfo_js_1 = require("../../hooks/useWalletInfo.js");
const DeepLinkConnectUI_js_1 = require("./DeepLinkConnectUI.js");
const InjectedConnectUI_js_1 = require("./InjectedConnectUI.js");
const CoinbaseSDKWalletConnectUI = /* @__PURE__ */ (0, react_1.lazy)(() => Promise.resolve().then(() => require("../../../wallets/shared/CoinbaseSDKConnection.js")));
const InAppWalletConnectUI = /* @__PURE__ */ (0, react_1.lazy)(() => Promise.resolve().then(() => require("../../../wallets/in-app/InAppWalletConnectUI.js")));
/**
 * @internal
 */
function AnyWalletConnectUI(props) {
    const [screen, setScreen] = (0, react_1.useState)("main");
    const { wallet } = props;
    const walletInfo = (0, useWalletInfo_js_1.useWalletInfo)(props.wallet.id);
    const localeId = (0, useWalletConnectionCtx_js_1.useConnectUI)().locale;
    const localeQuery = (0, react_query_1.useQuery)({
        queryKey: ["injectedWalletLocale", localeId, walletInfo.data?.name],
        queryFn: async () => {
            if (!walletInfo.data) {
                throw new Error("Wallet info not available");
            }
            const w = await (0, getInjectedWalletLocale_js_1.getInjectedWalletLocale)(localeId);
            return w(walletInfo.data.name);
        },
        enabled: !!walletInfo.data,
        refetchOnWindowFocus: false,
        refetchOnMount: false,
    });
    if (!walletInfo.data || !localeQuery.data) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    // if wallet can connect to injected wallet + wallet is injected
    const isInstalled = (0, mipdStore_js_1.getInstalledWalletProviders)().find((w) => w.info.rdns === walletInfo.data.rdns);
    if (screen === "get-started") {
        return ((0, jsx_runtime_1.jsx)(GetStartedScreen_js_1.GetStartedScreen, { locale: localeQuery.data, wallet: props.wallet, walletInfo: walletInfo.data, onBack: () => {
                setScreen("main");
            } }));
    }
    if (walletInfo.data.deepLink &&
        !isInstalled &&
        wallet.getConfig()
            ?.preferDeepLink &&
        (0, isMobile_js_1.isMobile)()) {
        return ((0, jsx_runtime_1.jsx)(DeepLinkConnectUI_js_1.DeepLinkConnectUI, { wallet: props.wallet, walletInfo: walletInfo.data, deepLinkPrefix: walletInfo.data.deepLink.mobile, locale: localeQuery.data, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack }));
    }
    if (walletInfo.data.rdns && isInstalled) {
        return ((0, jsx_runtime_1.jsx)(InjectedConnectUI_js_1.InjectedConnectUI, { wallet: props.wallet, walletInfo: walletInfo.data, done: props.done, locale: localeQuery.data, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack }));
    }
    // coinbase wallet sdk
    if (props.wallet.id === constants_js_1.COINBASE) {
        return ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), children: (0, jsx_runtime_1.jsx)(CoinbaseSDKWalletConnectUI, { locale: localeQuery.data, onGetStarted: () => {
                    setScreen("get-started");
                }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data }) }));
    }
    // wallet connect
    if (walletInfo.data.mobile.native || walletInfo.data.mobile.universal) {
        return ((0, jsx_runtime_1.jsx)(WalletConnectConnection_js_1.WalletConnectConnection, { locale: localeQuery.data, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data }));
    }
    // wallet connect
    if (props.wallet.id === "walletConnect") {
        return ((0, jsx_runtime_1.jsx)(WalletConnectConnection_js_1.WalletConnectStandaloneConnection, { locale: localeQuery.data, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data, setModalVisibility: props.setModalVisibility }));
    }
    if (props.wallet.id === "inApp" || props.wallet.id === "embedded") {
        return ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), children: (0, jsx_runtime_1.jsx)(InAppWalletConnectUI, { wallet: props.wallet, done: props.done, goBack: props.onBack }) }));
    }
    // if can't connect in any way - show get started screen
    return ((0, jsx_runtime_1.jsx)(GetStartedScreen_js_1.GetStartedScreen, { locale: localeQuery.data, wallet: props.wallet, walletInfo: walletInfo.data, onBack: () => {
            setScreen("main");
        } }));
}
exports.AnyWalletConnectUI = AnyWalletConnectUI;
//# sourceMappingURL=AnyWalletConnectUI.js.map