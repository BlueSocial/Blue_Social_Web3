"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const transaction_button_utils_js_1 = require("../../../core/hooks/transaction/transaction-button-utils.js");
const useSendTransaction_js_1 = require("../../hooks/transaction/useSendTransaction.js");
const useActiveAccount_js_1 = require("../../hooks/wallets/useActiveAccount.js");
const Spinner_js_1 = require("../components/Spinner.js");
const buttons_js_1 = require("../components/buttons.js");
/**
 * TransactionButton component is used to render a button that triggers a transaction.
 * - It shows a "Switch Network" button if the connected wallet is on a different chain than the transaction.
 * @param props - The props for this component.
 * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.
 * @example
 * ```tsx
 * <TransactionButton
 *   transaction={() => {}}
 *   onTransactionConfirmed={handleSuccess}
 *   onError={handleError}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 * Customize the styling by passing the `unstyled` prop and your inline styles and/or classes:
 * ```tsx
 * <TransactionButton
 *   transaction={() => {}}
 *   onTransactionConfirmed={handleSuccess}
 *   onError={handleError}
 *   unstyled
 *   className="bg-white text-black rounded-md p-4 flex items-center justify-center"
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 * @component
 */
function TransactionButton(props) {
    const { children, transaction, onTransactionSent, onTransactionConfirmed, onError, onClick, gasless, payModal, disabled, unstyled, ...buttonProps } = props;
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const sendTransaction = (0, useSendTransaction_js_1.useSendTransaction)({ gasless, payModal });
    const { mutate: handleClick, isPending } = (0, transaction_button_utils_js_1.useTransactionButtonMutation)(props, sendTransaction.mutateAsync);
    return ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { gap: "xs", disabled: !account || disabled || isPending, variant: "primary", unstyled: unstyled, "data-is-loading": isPending, onClick: () => handleClick(), ...buttonProps, style: !unstyled
            ? {
                opacity: !account || disabled ? 0.5 : 1,
                minWidth: "150px",
                position: "relative",
                ...buttonProps.style,
            }
            : {
                position: "relative",
                ...buttonProps.style,
            }, theme: (0, CustomThemeProvider_js_1.parseTheme)(props.theme), children: [(0, jsx_runtime_1.jsx)("span", { style: { visibility: isPending ? "hidden" : "visible" }, children: children }), isPending && ((0, jsx_runtime_1.jsx)("div", { style: {
                    position: "absolute",
                    display: "flex",
                    alignItems: "center",
                    height: "100%",
                    top: 0,
                    bottom: 0,
                    margin: "auto",
                }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "md", color: "primaryButtonText" }) }))] }));
}
exports.TransactionButton = TransactionButton;
//# sourceMappingURL=index.js.map