"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasAnyRole = exports.decodeHasAnyRoleResult = exports.encodeHasAnyRole = exports.encodeHasAnyRoleParams = exports.isHasAnyRoleSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x514e62fc";
const FN_INPUTS = [
    {
        name: "user",
        type: "address",
        internalType: "address",
    },
    {
        name: "roles",
        type: "uint256",
        internalType: "uint256",
    },
];
const FN_OUTPUTS = [
    {
        name: "",
        type: "bool",
        internalType: "bool",
    },
];
/**
 * Checks if the `hasAnyRole` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `hasAnyRole` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isHasAnyRoleSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isHasAnyRoleSupported(contract);
 * ```
 */
async function isHasAnyRoleSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isHasAnyRoleSupported = isHasAnyRoleSupported;
/**
 * Encodes the parameters for the "hasAnyRole" function.
 * @param options - The options for the hasAnyRole function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeHasAnyRoleParams } "thirdweb/extensions/modular";
 * const result = encodeHasAnyRoleParams({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
function encodeHasAnyRoleParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.user, options.roles]);
}
exports.encodeHasAnyRoleParams = encodeHasAnyRoleParams;
/**
 * Encodes the "hasAnyRole" function into a Hex string with its parameters.
 * @param options - The options for the hasAnyRole function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeHasAnyRole } "thirdweb/extensions/modular";
 * const result = encodeHasAnyRole({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
function encodeHasAnyRole(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeHasAnyRoleParams(options).slice(2));
}
exports.encodeHasAnyRole = encodeHasAnyRole;
/**
 * Decodes the result of the hasAnyRole function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeHasAnyRoleResult } from "thirdweb/extensions/modular";
 * const result = decodeHasAnyRoleResult("...");
 * ```
 */
function decodeHasAnyRoleResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeHasAnyRoleResult = decodeHasAnyRoleResult;
/**
 * Calls the "hasAnyRole" function on the contract.
 * @param options - The options for the hasAnyRole function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { hasAnyRole } from "thirdweb/extensions/modular";
 *
 * const result = await hasAnyRole({
 *  contract,
 *  user: ...,
 *  roles: ...,
 * });
 *
 * ```
 */
async function hasAnyRole(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.user, options.roles],
    });
}
exports.hasAnyRole = hasAnyRole;
//# sourceMappingURL=hasAnyRole.js.map