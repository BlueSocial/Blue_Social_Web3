"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rolesOf = exports.decodeRolesOfResult = exports.encodeRolesOf = exports.encodeRolesOfParams = exports.isRolesOfSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x2de94807";
const FN_INPUTS = [
    {
        name: "user",
        type: "address",
        internalType: "address",
    },
];
const FN_OUTPUTS = [
    {
        name: "roles",
        type: "uint256",
        internalType: "uint256",
    },
];
/**
 * Checks if the `rolesOf` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `rolesOf` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isRolesOfSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isRolesOfSupported(contract);
 * ```
 */
async function isRolesOfSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isRolesOfSupported = isRolesOfSupported;
/**
 * Encodes the parameters for the "rolesOf" function.
 * @param options - The options for the rolesOf function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeRolesOfParams } "thirdweb/extensions/modular";
 * const result = encodeRolesOfParams({
 *  user: ...,
 * });
 * ```
 */
function encodeRolesOfParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.user]);
}
exports.encodeRolesOfParams = encodeRolesOfParams;
/**
 * Encodes the "rolesOf" function into a Hex string with its parameters.
 * @param options - The options for the rolesOf function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeRolesOf } "thirdweb/extensions/modular";
 * const result = encodeRolesOf({
 *  user: ...,
 * });
 * ```
 */
function encodeRolesOf(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeRolesOfParams(options).slice(2));
}
exports.encodeRolesOf = encodeRolesOf;
/**
 * Decodes the result of the rolesOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeRolesOfResult } from "thirdweb/extensions/modular";
 * const result = decodeRolesOfResult("...");
 * ```
 */
function decodeRolesOfResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeRolesOfResult = decodeRolesOfResult;
/**
 * Calls the "rolesOf" function on the contract.
 * @param options - The options for the rolesOf function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { rolesOf } from "thirdweb/extensions/modular";
 *
 * const result = await rolesOf({
 *  contract,
 *  user: ...,
 * });
 *
 * ```
 */
async function rolesOf(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.user],
    });
}
exports.rolesOf = rolesOf;
//# sourceMappingURL=rolesOf.js.map