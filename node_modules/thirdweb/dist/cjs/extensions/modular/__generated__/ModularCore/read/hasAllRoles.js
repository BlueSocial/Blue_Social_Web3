"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasAllRoles = exports.decodeHasAllRolesResult = exports.encodeHasAllRoles = exports.encodeHasAllRolesParams = exports.isHasAllRolesSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x1cd64df4";
const FN_INPUTS = [
    {
        name: "user",
        type: "address",
        internalType: "address",
    },
    {
        name: "roles",
        type: "uint256",
        internalType: "uint256",
    },
];
const FN_OUTPUTS = [
    {
        name: "",
        type: "bool",
        internalType: "bool",
    },
];
/**
 * Checks if the `hasAllRoles` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `hasAllRoles` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isHasAllRolesSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isHasAllRolesSupported(contract);
 * ```
 */
async function isHasAllRolesSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isHasAllRolesSupported = isHasAllRolesSupported;
/**
 * Encodes the parameters for the "hasAllRoles" function.
 * @param options - The options for the hasAllRoles function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeHasAllRolesParams } "thirdweb/extensions/modular";
 * const result = encodeHasAllRolesParams({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
function encodeHasAllRolesParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.user, options.roles]);
}
exports.encodeHasAllRolesParams = encodeHasAllRolesParams;
/**
 * Encodes the "hasAllRoles" function into a Hex string with its parameters.
 * @param options - The options for the hasAllRoles function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeHasAllRoles } "thirdweb/extensions/modular";
 * const result = encodeHasAllRoles({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
function encodeHasAllRoles(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeHasAllRolesParams(options).slice(2));
}
exports.encodeHasAllRoles = encodeHasAllRoles;
/**
 * Decodes the result of the hasAllRoles function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeHasAllRolesResult } from "thirdweb/extensions/modular";
 * const result = decodeHasAllRolesResult("...");
 * ```
 */
function decodeHasAllRolesResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeHasAllRolesResult = decodeHasAllRolesResult;
/**
 * Calls the "hasAllRoles" function on the contract.
 * @param options - The options for the hasAllRoles function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { hasAllRoles } from "thirdweb/extensions/modular";
 *
 * const result = await hasAllRoles({
 *  contract,
 *  user: ...,
 *  roles: ...,
 * });
 *
 * ```
 */
async function hasAllRoles(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.user, options.roles],
    });
}
exports.hasAllRoles = hasAllRoles;
//# sourceMappingURL=hasAllRoles.js.map