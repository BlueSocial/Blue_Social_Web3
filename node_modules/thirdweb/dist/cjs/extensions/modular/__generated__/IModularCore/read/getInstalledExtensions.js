"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstalledExtensions = exports.decodeGetInstalledExtensionsResult = exports.isGetInstalledExtensionsSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x5357aa5e";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        name: "",
        type: "tuple[]",
        internalType: "struct IModularCore.InstalledExtension[]",
        components: [
            {
                name: "implementation",
                type: "address",
                internalType: "address",
            },
            {
                name: "config",
                type: "tuple",
                internalType: "struct IExtensionConfig.ExtensionConfig",
                components: [
                    {
                        name: "registerInstallationCallback",
                        type: "bool",
                        internalType: "bool",
                    },
                    {
                        name: "requiredInterfaces",
                        type: "bytes4[]",
                        internalType: "bytes4[]",
                    },
                    {
                        name: "supportedInterfaces",
                        type: "bytes4[]",
                        internalType: "bytes4[]",
                    },
                    {
                        name: "callbackFunctions",
                        type: "tuple[]",
                        internalType: "struct IExtensionConfig.CallbackFunction[]",
                        components: [
                            {
                                name: "selector",
                                type: "bytes4",
                                internalType: "bytes4",
                            },
                        ],
                    },
                    {
                        name: "fallbackFunctions",
                        type: "tuple[]",
                        internalType: "struct IExtensionConfig.FallbackFunction[]",
                        components: [
                            {
                                name: "selector",
                                type: "bytes4",
                                internalType: "bytes4",
                            },
                            {
                                name: "permissionBits",
                                type: "uint256",
                                internalType: "uint256",
                            },
                        ],
                    },
                ],
            },
        ],
    },
];
/**
 * Checks if the `getInstalledExtensions` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getInstalledExtensions` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGetInstalledExtensionsSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGetInstalledExtensionsSupported(contract);
 * ```
 */
async function isGetInstalledExtensionsSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetInstalledExtensionsSupported = isGetInstalledExtensionsSupported;
/**
 * Decodes the result of the getInstalledExtensions function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeGetInstalledExtensionsResult } from "thirdweb/extensions/modular";
 * const result = decodeGetInstalledExtensionsResult("...");
 * ```
 */
function decodeGetInstalledExtensionsResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetInstalledExtensionsResult = decodeGetInstalledExtensionsResult;
/**
 * Calls the "getInstalledExtensions" function on the contract.
 * @param options - The options for the getInstalledExtensions function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getInstalledExtensions } from "thirdweb/extensions/modular";
 *
 * const result = await getInstalledExtensions({
 *  contract,
 * });
 *
 * ```
 */
async function getInstalledExtensions(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.getInstalledExtensions = getInstalledExtensions;
//# sourceMappingURL=getInstalledExtensions.js.map