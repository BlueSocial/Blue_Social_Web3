"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSupportedCallbackFunctions = exports.decodeGetSupportedCallbackFunctionsResult = exports.isGetSupportedCallbackFunctionsSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xf147db8a";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        name: "",
        type: "tuple[]",
        internalType: "struct IModularCore.SupportedCallbackFunction[]",
        components: [
            {
                name: "selector",
                type: "bytes4",
                internalType: "bytes4",
            },
            {
                name: "mode",
                type: "uint8",
                internalType: "enum IModularCore.CallbackMode",
            },
        ],
    },
];
/**
 * Checks if the `getSupportedCallbackFunctions` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getSupportedCallbackFunctions` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGetSupportedCallbackFunctionsSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGetSupportedCallbackFunctionsSupported(contract);
 * ```
 */
async function isGetSupportedCallbackFunctionsSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetSupportedCallbackFunctionsSupported = isGetSupportedCallbackFunctionsSupported;
/**
 * Decodes the result of the getSupportedCallbackFunctions function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeGetSupportedCallbackFunctionsResult } from "thirdweb/extensions/modular";
 * const result = decodeGetSupportedCallbackFunctionsResult("...");
 * ```
 */
function decodeGetSupportedCallbackFunctionsResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetSupportedCallbackFunctionsResult = decodeGetSupportedCallbackFunctionsResult;
/**
 * Calls the "getSupportedCallbackFunctions" function on the contract.
 * @param options - The options for the getSupportedCallbackFunctions function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getSupportedCallbackFunctions } from "thirdweb/extensions/modular";
 *
 * const result = await getSupportedCallbackFunctions({
 *  contract,
 * });
 *
 * ```
 */
async function getSupportedCallbackFunctions(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.getSupportedCallbackFunctions = getSupportedCallbackFunctions;
//# sourceMappingURL=getSupportedCallbackFunctions.js.map