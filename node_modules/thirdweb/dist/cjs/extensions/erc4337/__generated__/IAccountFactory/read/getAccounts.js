"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccounts = exports.decodeGetAccountsResult = exports.encodeGetAccounts = exports.encodeGetAccountsParams = exports.isGetAccountsSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xe68a7c3b";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "start",
    },
    {
        type: "uint256",
        name: "end",
    },
];
const FN_OUTPUTS = [
    {
        type: "address[]",
    },
];
/**
 * Checks if the `getAccounts` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAccounts` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isGetAccountsSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isGetAccountsSupported(contract);
 * ```
 */
async function isGetAccountsSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetAccountsSupported = isGetAccountsSupported;
/**
 * Encodes the parameters for the "getAccounts" function.
 * @param options - The options for the getAccounts function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAccountsParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetAccountsParams({
 *  start: ...,
 *  end: ...,
 * });
 * ```
 */
function encodeGetAccountsParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.start, options.end]);
}
exports.encodeGetAccountsParams = encodeGetAccountsParams;
/**
 * Encodes the "getAccounts" function into a Hex string with its parameters.
 * @param options - The options for the getAccounts function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAccounts } "thirdweb/extensions/erc4337";
 * const result = encodeGetAccounts({
 *  start: ...,
 *  end: ...,
 * });
 * ```
 */
function encodeGetAccounts(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetAccountsParams(options).slice(2));
}
exports.encodeGetAccounts = encodeGetAccounts;
/**
 * Decodes the result of the getAccounts function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetAccountsResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetAccountsResult("...");
 * ```
 */
function decodeGetAccountsResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetAccountsResult = decodeGetAccountsResult;
/**
 * Calls the "getAccounts" function on the contract.
 * @param options - The options for the getAccounts function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getAccounts } from "thirdweb/extensions/erc4337";
 *
 * const result = await getAccounts({
 *  contract,
 *  start: ...,
 *  end: ...,
 * });
 *
 * ```
 */
async function getAccounts(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.start, options.end],
    });
}
exports.getAccounts = getAccounts;
//# sourceMappingURL=getAccounts.js.map