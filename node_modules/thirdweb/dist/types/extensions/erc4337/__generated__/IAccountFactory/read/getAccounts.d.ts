import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getAccounts" function.
 */
export type GetAccountsParams = {
    start: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "start";
    }>;
    end: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "end";
    }>;
};
export declare const FN_SELECTOR: "0xe68a7c3b";
/**
 * Checks if the `getAccounts` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAccounts` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isGetAccountsSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isGetAccountsSupported(contract);
 * ```
 */
export declare function isGetAccountsSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getAccounts" function.
 * @param options - The options for the getAccounts function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAccountsParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetAccountsParams({
 *  start: ...,
 *  end: ...,
 * });
 * ```
 */
export declare function encodeGetAccountsParams(options: GetAccountsParams): `0x${string}`;
/**
 * Encodes the "getAccounts" function into a Hex string with its parameters.
 * @param options - The options for the getAccounts function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAccounts } "thirdweb/extensions/erc4337";
 * const result = encodeGetAccounts({
 *  start: ...,
 *  end: ...,
 * });
 * ```
 */
export declare function encodeGetAccounts(options: GetAccountsParams): `0xe68a7c3b${string}`;
/**
 * Decodes the result of the getAccounts function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetAccountsResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetAccountsResult("...");
 * ```
 */
export declare function decodeGetAccountsResult(result: Hex): readonly string[];
/**
 * Calls the "getAccounts" function on the contract.
 * @param options - The options for the getAccounts function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getAccounts } from "thirdweb/extensions/erc4337";
 *
 * const result = await getAccounts({
 *  contract,
 *  start: ...,
 *  end: ...,
 * });
 *
 * ```
 */
export declare function getAccounts(options: BaseTransactionOptions<GetAccountsParams>): Promise<readonly string[]>;
//# sourceMappingURL=getAccounts.d.ts.map