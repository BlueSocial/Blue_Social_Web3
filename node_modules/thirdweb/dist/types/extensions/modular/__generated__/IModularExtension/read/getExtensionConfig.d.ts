import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x7c173ecc";
/**
 * Checks if the `getExtensionConfig` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getExtensionConfig` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGetExtensionConfigSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGetExtensionConfigSupported(contract);
 * ```
 */
export declare function isGetExtensionConfigSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the getExtensionConfig function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeGetExtensionConfigResult } from "thirdweb/extensions/modular";
 * const result = decodeGetExtensionConfigResult("...");
 * ```
 */
export declare function decodeGetExtensionConfigResult(result: Hex): {
    registerInstallationCallback: boolean;
    requiredInterfaces: readonly `0x${string}`[];
    supportedInterfaces: readonly `0x${string}`[];
    callbackFunctions: readonly {
        selector: `0x${string}`;
    }[];
    fallbackFunctions: readonly {
        selector: `0x${string}`;
        permissionBits: bigint;
    }[];
};
/**
 * Calls the "getExtensionConfig" function on the contract.
 * @param options - The options for the getExtensionConfig function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getExtensionConfig } from "thirdweb/extensions/modular";
 *
 * const result = await getExtensionConfig({
 *  contract,
 * });
 *
 * ```
 */
export declare function getExtensionConfig(options: BaseTransactionOptions): Promise<{
    registerInstallationCallback: boolean;
    requiredInterfaces: readonly `0x${string}`[];
    supportedInterfaces: readonly `0x${string}`[];
    callbackFunctions: readonly {
        selector: `0x${string}`;
    }[];
    fallbackFunctions: readonly {
        selector: `0x${string}`;
        permissionBits: bigint;
    }[];
}>;
//# sourceMappingURL=getExtensionConfig.d.ts.map