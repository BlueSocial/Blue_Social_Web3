import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x25692962";
/**
 * Checks if the `requestOwnershipHandover` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `requestOwnershipHandover` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isRequestOwnershipHandoverSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isRequestOwnershipHandoverSupported(contract);
 * ```
 */
export declare function isRequestOwnershipHandoverSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Prepares a transaction to call the "requestOwnershipHandover" function on the contract.
 * @param options - The options for the "requestOwnershipHandover" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { requestOwnershipHandover } from "thirdweb/extensions/modular";
 *
 * const transaction = requestOwnershipHandover();
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function requestOwnershipHandover(options: BaseTransactionOptions): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=requestOwnershipHandover.d.ts.map