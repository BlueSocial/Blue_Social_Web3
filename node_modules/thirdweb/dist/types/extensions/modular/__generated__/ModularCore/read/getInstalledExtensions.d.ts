import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x5357aa5e";
/**
 * Checks if the `getInstalledExtensions` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getInstalledExtensions` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGetInstalledExtensionsSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGetInstalledExtensionsSupported(contract);
 * ```
 */
export declare function isGetInstalledExtensionsSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the getInstalledExtensions function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeGetInstalledExtensionsResult } from "thirdweb/extensions/modular";
 * const result = decodeGetInstalledExtensionsResult("...");
 * ```
 */
export declare function decodeGetInstalledExtensionsResult(result: Hex): readonly {
    implementation: string;
    config: {
        registerInstallationCallback: boolean;
        requiredInterfaces: readonly `0x${string}`[];
        supportedInterfaces: readonly `0x${string}`[];
        callbackFunctions: readonly {
            selector: `0x${string}`;
        }[];
        fallbackFunctions: readonly {
            selector: `0x${string}`;
            permissionBits: bigint;
        }[];
    };
}[];
/**
 * Calls the "getInstalledExtensions" function on the contract.
 * @param options - The options for the getInstalledExtensions function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getInstalledExtensions } from "thirdweb/extensions/modular";
 *
 * const result = await getInstalledExtensions({
 *  contract,
 * });
 *
 * ```
 */
export declare function getInstalledExtensions(options: BaseTransactionOptions): Promise<readonly {
    implementation: string;
    config: {
        registerInstallationCallback: boolean;
        requiredInterfaces: readonly `0x${string}`[];
        supportedInterfaces: readonly `0x${string}`[];
        callbackFunctions: readonly {
            selector: `0x${string}`;
        }[];
        fallbackFunctions: readonly {
            selector: `0x${string}`;
            permissionBits: bigint;
        }[];
    };
}[]>;
//# sourceMappingURL=getInstalledExtensions.d.ts.map