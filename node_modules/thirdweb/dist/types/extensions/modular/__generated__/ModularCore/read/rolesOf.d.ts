import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "rolesOf" function.
 */
export type RolesOfParams = {
    user: AbiParameterToPrimitiveType<{
        name: "user";
        type: "address";
        internalType: "address";
    }>;
};
export declare const FN_SELECTOR: "0x2de94807";
/**
 * Checks if the `rolesOf` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `rolesOf` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isRolesOfSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isRolesOfSupported(contract);
 * ```
 */
export declare function isRolesOfSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "rolesOf" function.
 * @param options - The options for the rolesOf function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeRolesOfParams } "thirdweb/extensions/modular";
 * const result = encodeRolesOfParams({
 *  user: ...,
 * });
 * ```
 */
export declare function encodeRolesOfParams(options: RolesOfParams): `0x${string}`;
/**
 * Encodes the "rolesOf" function into a Hex string with its parameters.
 * @param options - The options for the rolesOf function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeRolesOf } "thirdweb/extensions/modular";
 * const result = encodeRolesOf({
 *  user: ...,
 * });
 * ```
 */
export declare function encodeRolesOf(options: RolesOfParams): `0x2de94807${string}`;
/**
 * Decodes the result of the rolesOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeRolesOfResult } from "thirdweb/extensions/modular";
 * const result = decodeRolesOfResult("...");
 * ```
 */
export declare function decodeRolesOfResult(result: Hex): bigint;
/**
 * Calls the "rolesOf" function on the contract.
 * @param options - The options for the rolesOf function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { rolesOf } from "thirdweb/extensions/modular";
 *
 * const result = await rolesOf({
 *  contract,
 *  user: ...,
 * });
 *
 * ```
 */
export declare function rolesOf(options: BaseTransactionOptions<RolesOfParams>): Promise<bigint>;
//# sourceMappingURL=rolesOf.d.ts.map