import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "uninstallExtension" function.
 */
export type UninstallExtensionParams = WithOverrides<{
    extension: AbiParameterToPrimitiveType<{
        name: "_extension";
        type: "address";
        internalType: "address";
    }>;
    data: AbiParameterToPrimitiveType<{
        name: "_data";
        type: "bytes";
        internalType: "bytes";
    }>;
}>;
export declare const FN_SELECTOR: "0x42b7d0c8";
/**
 * Checks if the `uninstallExtension` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `uninstallExtension` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isUninstallExtensionSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isUninstallExtensionSupported(contract);
 * ```
 */
export declare function isUninstallExtensionSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "uninstallExtension" function.
 * @param options - The options for the uninstallExtension function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeUninstallExtensionParams } "thirdweb/extensions/modular";
 * const result = encodeUninstallExtensionParams({
 *  extension: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeUninstallExtensionParams(options: UninstallExtensionParams): `0x${string}`;
/**
 * Encodes the "uninstallExtension" function into a Hex string with its parameters.
 * @param options - The options for the uninstallExtension function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeUninstallExtension } "thirdweb/extensions/modular";
 * const result = encodeUninstallExtension({
 *  extension: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeUninstallExtension(options: UninstallExtensionParams): `0x42b7d0c8${string}`;
/**
 * Prepares a transaction to call the "uninstallExtension" function on the contract.
 * @param options - The options for the "uninstallExtension" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { uninstallExtension } from "thirdweb/extensions/modular";
 *
 * const transaction = uninstallExtension({
 *  contract,
 *  extension: ...,
 *  data: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function uninstallExtension(options: BaseTransactionOptions<UninstallExtensionParams | {
    asyncParams: () => Promise<UninstallExtensionParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=uninstallExtension.d.ts.map