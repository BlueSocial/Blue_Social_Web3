import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "ownershipHandoverExpiresAt" function.
 */
export type OwnershipHandoverExpiresAtParams = {
    pendingOwner: AbiParameterToPrimitiveType<{
        name: "pendingOwner";
        type: "address";
        internalType: "address";
    }>;
};
export declare const FN_SELECTOR: "0xfee81cf4";
/**
 * Checks if the `ownershipHandoverExpiresAt` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `ownershipHandoverExpiresAt` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isOwnershipHandoverExpiresAtSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isOwnershipHandoverExpiresAtSupported(contract);
 * ```
 */
export declare function isOwnershipHandoverExpiresAtSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "ownershipHandoverExpiresAt" function.
 * @param options - The options for the ownershipHandoverExpiresAt function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeOwnershipHandoverExpiresAtParams } "thirdweb/extensions/modular";
 * const result = encodeOwnershipHandoverExpiresAtParams({
 *  pendingOwner: ...,
 * });
 * ```
 */
export declare function encodeOwnershipHandoverExpiresAtParams(options: OwnershipHandoverExpiresAtParams): `0x${string}`;
/**
 * Encodes the "ownershipHandoverExpiresAt" function into a Hex string with its parameters.
 * @param options - The options for the ownershipHandoverExpiresAt function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeOwnershipHandoverExpiresAt } "thirdweb/extensions/modular";
 * const result = encodeOwnershipHandoverExpiresAt({
 *  pendingOwner: ...,
 * });
 * ```
 */
export declare function encodeOwnershipHandoverExpiresAt(options: OwnershipHandoverExpiresAtParams): `0xfee81cf4${string}`;
/**
 * Decodes the result of the ownershipHandoverExpiresAt function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeOwnershipHandoverExpiresAtResult } from "thirdweb/extensions/modular";
 * const result = decodeOwnershipHandoverExpiresAtResult("...");
 * ```
 */
export declare function decodeOwnershipHandoverExpiresAtResult(result: Hex): bigint;
/**
 * Calls the "ownershipHandoverExpiresAt" function on the contract.
 * @param options - The options for the ownershipHandoverExpiresAt function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { ownershipHandoverExpiresAt } from "thirdweb/extensions/modular";
 *
 * const result = await ownershipHandoverExpiresAt({
 *  contract,
 *  pendingOwner: ...,
 * });
 *
 * ```
 */
export declare function ownershipHandoverExpiresAt(options: BaseTransactionOptions<OwnershipHandoverExpiresAtParams>): Promise<bigint>;
//# sourceMappingURL=ownershipHandoverExpiresAt.d.ts.map