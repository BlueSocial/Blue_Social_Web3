import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "completeOwnershipHandover" function.
 */
export type CompleteOwnershipHandoverParams = WithOverrides<{
    pendingOwner: AbiParameterToPrimitiveType<{
        name: "pendingOwner";
        type: "address";
        internalType: "address";
    }>;
}>;
export declare const FN_SELECTOR: "0xf04e283e";
/**
 * Checks if the `completeOwnershipHandover` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `completeOwnershipHandover` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isCompleteOwnershipHandoverSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isCompleteOwnershipHandoverSupported(contract);
 * ```
 */
export declare function isCompleteOwnershipHandoverSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "completeOwnershipHandover" function.
 * @param options - The options for the completeOwnershipHandover function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeCompleteOwnershipHandoverParams } "thirdweb/extensions/modular";
 * const result = encodeCompleteOwnershipHandoverParams({
 *  pendingOwner: ...,
 * });
 * ```
 */
export declare function encodeCompleteOwnershipHandoverParams(options: CompleteOwnershipHandoverParams): `0x${string}`;
/**
 * Encodes the "completeOwnershipHandover" function into a Hex string with its parameters.
 * @param options - The options for the completeOwnershipHandover function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeCompleteOwnershipHandover } "thirdweb/extensions/modular";
 * const result = encodeCompleteOwnershipHandover({
 *  pendingOwner: ...,
 * });
 * ```
 */
export declare function encodeCompleteOwnershipHandover(options: CompleteOwnershipHandoverParams): `0xf04e283e${string}`;
/**
 * Prepares a transaction to call the "completeOwnershipHandover" function on the contract.
 * @param options - The options for the "completeOwnershipHandover" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { completeOwnershipHandover } from "thirdweb/extensions/modular";
 *
 * const transaction = completeOwnershipHandover({
 *  contract,
 *  pendingOwner: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function completeOwnershipHandover(options: BaseTransactionOptions<CompleteOwnershipHandoverParams | {
    asyncParams: () => Promise<CompleteOwnershipHandoverParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=completeOwnershipHandover.d.ts.map