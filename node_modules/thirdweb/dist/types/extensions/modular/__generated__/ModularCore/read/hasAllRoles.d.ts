import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "hasAllRoles" function.
 */
export type HasAllRolesParams = {
    user: AbiParameterToPrimitiveType<{
        name: "user";
        type: "address";
        internalType: "address";
    }>;
    roles: AbiParameterToPrimitiveType<{
        name: "roles";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0x1cd64df4";
/**
 * Checks if the `hasAllRoles` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `hasAllRoles` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isHasAllRolesSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isHasAllRolesSupported(contract);
 * ```
 */
export declare function isHasAllRolesSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "hasAllRoles" function.
 * @param options - The options for the hasAllRoles function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeHasAllRolesParams } "thirdweb/extensions/modular";
 * const result = encodeHasAllRolesParams({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
export declare function encodeHasAllRolesParams(options: HasAllRolesParams): `0x${string}`;
/**
 * Encodes the "hasAllRoles" function into a Hex string with its parameters.
 * @param options - The options for the hasAllRoles function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeHasAllRoles } "thirdweb/extensions/modular";
 * const result = encodeHasAllRoles({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
export declare function encodeHasAllRoles(options: HasAllRolesParams): `0x1cd64df4${string}`;
/**
 * Decodes the result of the hasAllRoles function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeHasAllRolesResult } from "thirdweb/extensions/modular";
 * const result = decodeHasAllRolesResult("...");
 * ```
 */
export declare function decodeHasAllRolesResult(result: Hex): boolean;
/**
 * Calls the "hasAllRoles" function on the contract.
 * @param options - The options for the hasAllRoles function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { hasAllRoles } from "thirdweb/extensions/modular";
 *
 * const result = await hasAllRoles({
 *  contract,
 *  user: ...,
 *  roles: ...,
 * });
 *
 * ```
 */
export declare function hasAllRoles(options: BaseTransactionOptions<HasAllRolesParams>): Promise<boolean>;
//# sourceMappingURL=hasAllRoles.d.ts.map