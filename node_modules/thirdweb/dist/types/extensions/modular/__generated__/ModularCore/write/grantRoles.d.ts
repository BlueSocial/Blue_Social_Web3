import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "grantRoles" function.
 */
export type GrantRolesParams = WithOverrides<{
    user: AbiParameterToPrimitiveType<{
        name: "user";
        type: "address";
        internalType: "address";
    }>;
    roles: AbiParameterToPrimitiveType<{
        name: "roles";
        type: "uint256";
        internalType: "uint256";
    }>;
}>;
export declare const FN_SELECTOR: "0x1c10893f";
/**
 * Checks if the `grantRoles` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `grantRoles` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGrantRolesSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGrantRolesSupported(contract);
 * ```
 */
export declare function isGrantRolesSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "grantRoles" function.
 * @param options - The options for the grantRoles function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeGrantRolesParams } "thirdweb/extensions/modular";
 * const result = encodeGrantRolesParams({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
export declare function encodeGrantRolesParams(options: GrantRolesParams): `0x${string}`;
/**
 * Encodes the "grantRoles" function into a Hex string with its parameters.
 * @param options - The options for the grantRoles function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeGrantRoles } "thirdweb/extensions/modular";
 * const result = encodeGrantRoles({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
export declare function encodeGrantRoles(options: GrantRolesParams): `0x1c10893f${string}`;
/**
 * Prepares a transaction to call the "grantRoles" function on the contract.
 * @param options - The options for the "grantRoles" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { grantRoles } from "thirdweb/extensions/modular";
 *
 * const transaction = grantRoles({
 *  contract,
 *  user: ...,
 *  roles: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function grantRoles(options: BaseTransactionOptions<GrantRolesParams | {
    asyncParams: () => Promise<GrantRolesParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=grantRoles.d.ts.map