import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "hasAnyRole" function.
 */
export type HasAnyRoleParams = {
    user: AbiParameterToPrimitiveType<{
        name: "user";
        type: "address";
        internalType: "address";
    }>;
    roles: AbiParameterToPrimitiveType<{
        name: "roles";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0x514e62fc";
/**
 * Checks if the `hasAnyRole` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `hasAnyRole` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isHasAnyRoleSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isHasAnyRoleSupported(contract);
 * ```
 */
export declare function isHasAnyRoleSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "hasAnyRole" function.
 * @param options - The options for the hasAnyRole function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeHasAnyRoleParams } "thirdweb/extensions/modular";
 * const result = encodeHasAnyRoleParams({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
export declare function encodeHasAnyRoleParams(options: HasAnyRoleParams): `0x${string}`;
/**
 * Encodes the "hasAnyRole" function into a Hex string with its parameters.
 * @param options - The options for the hasAnyRole function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeHasAnyRole } "thirdweb/extensions/modular";
 * const result = encodeHasAnyRole({
 *  user: ...,
 *  roles: ...,
 * });
 * ```
 */
export declare function encodeHasAnyRole(options: HasAnyRoleParams): `0x514e62fc${string}`;
/**
 * Decodes the result of the hasAnyRole function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeHasAnyRoleResult } from "thirdweb/extensions/modular";
 * const result = decodeHasAnyRoleResult("...");
 * ```
 */
export declare function decodeHasAnyRoleResult(result: Hex): boolean;
/**
 * Calls the "hasAnyRole" function on the contract.
 * @param options - The options for the hasAnyRole function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { hasAnyRole } from "thirdweb/extensions/modular";
 *
 * const result = await hasAnyRole({
 *  contract,
 *  user: ...,
 *  roles: ...,
 * });
 *
 * ```
 */
export declare function hasAnyRole(options: BaseTransactionOptions<HasAnyRoleParams>): Promise<boolean>;
//# sourceMappingURL=hasAnyRole.d.ts.map