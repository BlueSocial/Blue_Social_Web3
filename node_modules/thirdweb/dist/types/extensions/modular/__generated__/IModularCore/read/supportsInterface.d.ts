import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "supportsInterface" function.
 */
export type SupportsInterfaceParams = {
    interfaceID: AbiParameterToPrimitiveType<{
        name: "interfaceID";
        type: "bytes4";
        internalType: "bytes4";
    }>;
};
export declare const FN_SELECTOR: "0x01ffc9a7";
/**
 * Checks if the `supportsInterface` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `supportsInterface` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isSupportsInterfaceSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isSupportsInterfaceSupported(contract);
 * ```
 */
export declare function isSupportsInterfaceSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "supportsInterface" function.
 * @param options - The options for the supportsInterface function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSupportsInterfaceParams } "thirdweb/extensions/modular";
 * const result = encodeSupportsInterfaceParams({
 *  interfaceID: ...,
 * });
 * ```
 */
export declare function encodeSupportsInterfaceParams(options: SupportsInterfaceParams): `0x${string}`;
/**
 * Encodes the "supportsInterface" function into a Hex string with its parameters.
 * @param options - The options for the supportsInterface function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSupportsInterface } "thirdweb/extensions/modular";
 * const result = encodeSupportsInterface({
 *  interfaceID: ...,
 * });
 * ```
 */
export declare function encodeSupportsInterface(options: SupportsInterfaceParams): `0x01ffc9a7${string}`;
/**
 * Decodes the result of the supportsInterface function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeSupportsInterfaceResult } from "thirdweb/extensions/modular";
 * const result = decodeSupportsInterfaceResult("...");
 * ```
 */
export declare function decodeSupportsInterfaceResult(result: Hex): boolean;
/**
 * Calls the "supportsInterface" function on the contract.
 * @param options - The options for the supportsInterface function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { supportsInterface } from "thirdweb/extensions/modular";
 *
 * const result = await supportsInterface({
 *  contract,
 *  interfaceID: ...,
 * });
 *
 * ```
 */
export declare function supportsInterface(options: BaseTransactionOptions<SupportsInterfaceParams>): Promise<boolean>;
//# sourceMappingURL=supportsInterface.d.ts.map