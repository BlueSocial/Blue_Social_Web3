import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "installExtension" function.
 */
export type InstallExtensionParams = WithOverrides<{
    extensionContract: AbiParameterToPrimitiveType<{
        name: "extensionContract";
        type: "address";
        internalType: "address";
    }>;
    data: AbiParameterToPrimitiveType<{
        name: "data";
        type: "bytes";
        internalType: "bytes";
    }>;
}>;
export declare const FN_SELECTOR: "0xaca696f5";
/**
 * Checks if the `installExtension` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `installExtension` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isInstallExtensionSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isInstallExtensionSupported(contract);
 * ```
 */
export declare function isInstallExtensionSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "installExtension" function.
 * @param options - The options for the installExtension function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeInstallExtensionParams } "thirdweb/extensions/modular";
 * const result = encodeInstallExtensionParams({
 *  extensionContract: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeInstallExtensionParams(options: InstallExtensionParams): `0x${string}`;
/**
 * Encodes the "installExtension" function into a Hex string with its parameters.
 * @param options - The options for the installExtension function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeInstallExtension } "thirdweb/extensions/modular";
 * const result = encodeInstallExtension({
 *  extensionContract: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeInstallExtension(options: InstallExtensionParams): `0xaca696f5${string}`;
/**
 * Prepares a transaction to call the "installExtension" function on the contract.
 * @param options - The options for the "installExtension" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { installExtension } from "thirdweb/extensions/modular";
 *
 * const transaction = installExtension({
 *  contract,
 *  extensionContract: ...,
 *  data: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function installExtension(options: BaseTransactionOptions<InstallExtensionParams | {
    asyncParams: () => Promise<InstallExtensionParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=installExtension.d.ts.map