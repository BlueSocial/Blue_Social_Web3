import { type SendTransactionConfig } from "../../../core/hooks/transaction/useSendTransaction.js";
/**
 * A hook to send a transaction.
 * @returns A mutation object to send a transaction.
 * @param config Configuration for the `useSendTransaction` hook.
 * Refer to [`SendTransactionConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionConfig) for more details.
 * @example
 * ```tsx
 * import { useSendTransaction } from "thirdweb/react";
 * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
 *
 * // later
 * sendTx(tx);
 * ```
 *
 * @transaction
 */
export declare function useSendTransaction(config?: SendTransactionConfig): import("@tanstack/react-query").UseMutationResult<{
    readonly transactionHash: `0x${string}`;
    client: import("../../../../client/client.js").ThirdwebClient;
    chain: {
        readonly id: number;
        readonly name?: string | undefined;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        } | undefined;
        readonly nativeCurrency?: {
            name?: string | undefined;
            symbol?: string | undefined;
            /**
             * A hook to send a transaction.
             * @returns A mutation object to send a transaction.
             * @param config Configuration for the `useSendTransaction` hook.
             * Refer to [`SendTransactionConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionConfig) for more details.
             * @example
             * ```tsx
             * import { useSendTransaction } from "thirdweb/react";
             * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
             *
             * // later
             * sendTx(tx);
             * ```
             *
             * @transaction
             */
            decimals?: number | undefined;
        } | undefined;
        readonly blockExplorers?: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        }[] | undefined;
        readonly testnet?: true | undefined;
        readonly experimental?: {
            increaseZeroByteCount?: boolean | undefined;
        } | undefined;
    };
    maxBlocksWaitTime?: number | undefined;
}, Error, import("../../../../transaction/prepare-transaction.js").PreparedTransaction>;
//# sourceMappingURL=useSendTransaction.d.ts.map