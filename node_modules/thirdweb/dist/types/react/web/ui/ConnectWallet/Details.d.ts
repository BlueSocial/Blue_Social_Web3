/// <reference types="react" />
import type { Chain } from "../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import { type Theme } from "../../../core/design-system/index.js";
import type { LocaleId } from "../types.js";
import type { ConnectButtonProps, ConnectButton_detailsButtonOptions, ConnectButton_detailsModalOptions, PayUIOptions } from "./ConnectButtonProps.js";
import { type NetworkSelectorProps } from "./NetworkSelector.js";
import type { SupportedTokens } from "./defaultTokens.js";
import type { ConnectLocale } from "./locale/types.js";
/**
 * @internal
 */
export declare const ConnectedWalletDetails: React.FC<{
    onDisconnect: () => void;
    detailsButton?: ConnectButton_detailsButtonOptions;
    detailsModal?: ConnectButton_detailsModalOptions;
    theme: "light" | "dark" | Theme;
    supportedTokens?: SupportedTokens;
    chains: Chain[];
    chain?: Chain;
    switchButton: ConnectButtonProps["switchButton"];
    connectLocale: ConnectLocale;
    client: ThirdwebClient;
}>;
export type UseWalletDetailsModalOptions = {
    /**
     * A client is the entry point to the thirdweb SDK.
     * It is required for all other actions.
     * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.
     *
     * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.
     *
     * ```tsx
     * import { createThirdwebClient } from "thirdweb";
     *
     * const client = createThirdwebClient({
     *  clientId: "<your_client_id>",
     * })
     * ```
     */
    client: ThirdwebClient;
    /**
     * Set the theme for the Wallet Details Modal. By default it is set to `"dark"`
     *
     * theme can be set to either `"dark"`, `"light"` or a custom theme object.
     * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)
     * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)
     * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.
     * @example
     * ```ts
     * import { lightTheme } from "thirdweb/react";
     *
     * const customTheme = lightTheme({
     *  colors: {
     *    modalBg: 'red'
     *  }
     * })
     *
     * ```
     */
    theme?: "light" | "dark" | Theme;
    /**
     * Customize the tokens shown in the "Send Funds" screen in Details Modal for various networks.
     *
     * By default, The "Send Funds" screen shows a few popular tokens for default chains and the native token. For other chains it only shows the native token.
     * @example
     *
     * supportedTokens prop allows you to customize this list as shown below which shows  "Dai Stablecoin" when users wallet is connected to the "Base" mainnet.
     *
     * ```tsx
     * import { ConnectButton } from 'thirdweb/react';
     *
     * function Example() {
     *   return (
     * 		<ConnectButton
     * 			supportedTokens={{
     *        // when connected to "Base" mainnet - show balance of DAI stablecoin
     * 				84532: [
     * 					{
     * 						address: '0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb', // token contract address
     * 						name: 'Dai Stablecoin',
     * 						symbol: 'DAI',
     * 						icon: 'https://assets.coingecko.com/coins/images/9956/small/Badge_Dai.png?1687143508',
     * 					},
     * 				],
     * 			}}
     * 		/>
     * 	);
     * }
     * ```
     */
    supportedTokens?: SupportedTokens;
    /**
     * By default - ConnectButton UI uses the `en-US` locale for english language users.
     *
     * You can customize the language used in the ConnectButton UI by setting the `locale` prop.
     *
     * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.
     */
    locale?: LocaleId;
    /**
     * Array of chains that your app supports. They will be displayed in the network selector in the screen.
     *
     * This is only relevant if your app is a multi-chain app and works across multiple blockchains.
     * If your app only works on a single blockchain, you should only specify the `chain` prop.
     *
     * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.
     * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.
     *
     * ```tsx
     * import { defineChain } from "thirdweb/react";
     *
     * const polygon = defineChain({
     *   id: 137,
     * });
     * ```
     */
    chains?: Chain[];
    /**
     * Show a "Request Testnet funds" link in Wallet Details Modal when user is connected to a testnet.
     *
     * By default it is `false`, If you want to show the "Request Testnet funds" link when user is connected to a testnet, set this prop to `true`
     */
    showTestnetFaucet?: boolean;
    /**
     * customize the Network selector shown in the Wallet Details Modal
     */
    networkSelector?: NetworkSelectorProps;
    /**
     * Hide the "Disconnect Wallet" button in the Wallet Details Modal.
     *
     * By default it is `false`
     */
    hideDisconnect?: boolean;
    /**
     * Render custom UI at the bottom of the Details Modal
     */
    footer?: (props: {
        close: () => void;
    }) => JSX.Element;
    /**
     * Configure options for thirdweb Pay.
     *
     * thirdweb Pay allows users to buy tokens using crypto or fiat currency.
     */
    payOptions?: PayUIOptions;
    /**
     * Display the balance of a token instead of the native token in `ConnectButton` details button.
     * @example
     * ```tsx
     * const displayBalanceToken = {
     *   // show USDC balance when connected to Ethereum mainnet or Polygon
     *   [ethereum.id]: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
     *   [polygon.id]: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359",
     * }
     * ```
     */
    displayBalanceToken?: Record<number, string>;
};
/**
 * Hook to open the Wallet Details Modal that shows various information about the connected wallet and allows users to perform various actions like sending funds, receiving funds, switching networks, Buying tokens, etc.
 *
 * @example
 * ```tsx
 * import { createThirdwebClient } from "thirdweb";
 * import { useWalletDetailsModal } from "thirdweb/react";
 *
 * const client = createThirdwebClient({
 *  clientId: "<your_client_id>",
 * });
 *
 * function Example() {
 *   const { open } = useWalletDetailsModal();
 *
 *   function handleClick() {
 *      open({ client, theme: 'light' });
 *   }
 *
 *   return <button onClick={handleClick}> Show Wallet Details </button>
 * }
 * ```
 */
export declare function useWalletDetailsModal(): {
    open: (props: UseWalletDetailsModalOptions) => void;
};
//# sourceMappingURL=Details.d.ts.map