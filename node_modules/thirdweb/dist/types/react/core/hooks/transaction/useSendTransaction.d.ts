import { type UseMutationResult } from "@tanstack/react-query";
import type { Chain } from "../../../../chains/types.js";
import type { GaslessOptions } from "../../../../transaction/actions/gasless/types.js";
import type { WaitForReceiptOptions } from "../../../../transaction/actions/wait-for-tx-receipt.js";
import type { PreparedTransaction } from "../../../../transaction/prepare-transaction.js";
import type { Wallet } from "../../../../wallets/interfaces/wallet.js";
import { type GetWalletBalanceResult } from "../../../../wallets/utils/getWalletBalance.js";
import type { SupportedTokens } from "../../../web/ui/ConnectWallet/defaultTokens.js";
import type { LocaleId } from "../../../web/ui/types.js";
import type { Theme } from "../../design-system/index.js";
/**
 * Configuration for the "Pay Modal" that opens when the user doesn't have enough funds to send a transaction.
 * Set `payModal: false` to disable the "Pay Modal" popup
 *
 * This configuration object includes the following properties to configure the "Pay Modal" UI:
 *
 * ### `locale`
 * The language to use for the "Pay Modal" UI. Defaults to `"en_US"`.
 *
 * ### `supportedTokens`
 * An object of type [`SupportedTokens`](https://portal.thirdweb.com/references/typescript/v5/SupportedTokens) to configure the tokens to show for a chain.
 *
 * ### `theme`
 * The theme to use for the "Pay Modal" UI. Defaults to `"dark"`.
 *
 * It can be set to `"light"` or `"dark"` or an object of type [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) for a custom theme.
 *
 * Refer to [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)
 * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme) helper functions to use the default light or dark theme and customize it.
 */
export type SendTransactionPayModalConfig = {
    locale?: LocaleId;
    supportedTokens?: SupportedTokens;
    theme?: Theme | "light" | "dark";
    buyWithCrypto?: false;
    buyWithFiat?: false | {
        testMode?: boolean;
    };
} | false;
/**
 * Configuration for the `useSendTransaction` hook.
 */
export type SendTransactionConfig = {
    /**
     * Refer to [`SendTransactionPayModalConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionPayModalConfig) for more details.
     */
    payModal?: SendTransactionPayModalConfig;
    /**
     * Configuration for gasless transactions.
     * Refer to [`GaslessOptions`](https://portal.thirdweb.com/references/typescript/v5/GaslessOptions) for more details.
     */
    gasless?: GaslessOptions;
};
type ShowModalData = {
    tx: PreparedTransaction;
    sendTx: () => void;
    rejectTx: () => void;
    totalCostWei: bigint;
    walletBalance: GetWalletBalanceResult;
};
/**
 * A hook to send a transaction.
 * @returns A mutation object to send a transaction.
 * @example
 * ```jsx
 * import { useSendTransaction } from "thirdweb/react";
 * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
 *
 * // later
 * sendTx(tx);
 * ```
 * @internal
 */
export declare function useSendTransactionCore(args: {
    showPayModal?: (data: ShowModalData) => void;
    gasless?: GaslessOptions;
    wallet: Wallet | undefined;
    switchChain: (chain: Chain) => Promise<void>;
}): UseMutationResult<WaitForReceiptOptions, Error, PreparedTransaction>;
export declare function getTotalTxCostForBuy(tx: PreparedTransaction, from?: string): Promise<bigint>;
export {};
//# sourceMappingURL=useSendTransaction.d.ts.map