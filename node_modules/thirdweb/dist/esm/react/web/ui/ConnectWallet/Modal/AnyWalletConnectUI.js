"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { Suspense, lazy, useState } from "react";
import { isMobile } from "../../../../../utils/web/isMobile.js";
import { COINBASE } from "../../../../../wallets/constants.js";
import { getInstalledWalletProviders } from "../../../../../wallets/injected/mipdStore.js";
import { useConnectUI } from "../../../../core/hooks/others/useWalletConnectionCtx.js";
import { getInjectedWalletLocale } from "../../../wallets/injected/locale/getInjectedWalletLocale.js";
import { GetStartedScreen } from "../../../wallets/shared/GetStartedScreen.js";
import { LoadingScreen } from "../../../wallets/shared/LoadingScreen.js";
import { WalletConnectConnection, WalletConnectStandaloneConnection, } from "../../../wallets/shared/WalletConnectConnection.js";
import { useWalletInfo } from "../../hooks/useWalletInfo.js";
import { DeepLinkConnectUI } from "./DeepLinkConnectUI.js";
import { InjectedConnectUI } from "./InjectedConnectUI.js";
const CoinbaseSDKWalletConnectUI = /* @__PURE__ */ lazy(() => import("../../../wallets/shared/CoinbaseSDKConnection.js"));
const InAppWalletConnectUI = /* @__PURE__ */ lazy(() => import("../../../wallets/in-app/InAppWalletConnectUI.js"));
/**
 * @internal
 */
export function AnyWalletConnectUI(props) {
    const [screen, setScreen] = useState("main");
    const { wallet } = props;
    const walletInfo = useWalletInfo(props.wallet.id);
    const localeId = useConnectUI().locale;
    const localeQuery = useQuery({
        queryKey: ["injectedWalletLocale", localeId, walletInfo.data?.name],
        queryFn: async () => {
            if (!walletInfo.data) {
                throw new Error("Wallet info not available");
            }
            const w = await getInjectedWalletLocale(localeId);
            return w(walletInfo.data.name);
        },
        enabled: !!walletInfo.data,
        refetchOnWindowFocus: false,
        refetchOnMount: false,
    });
    if (!walletInfo.data || !localeQuery.data) {
        return _jsx(LoadingScreen, {});
    }
    // if wallet can connect to injected wallet + wallet is injected
    const isInstalled = getInstalledWalletProviders().find((w) => w.info.rdns === walletInfo.data.rdns);
    if (screen === "get-started") {
        return (_jsx(GetStartedScreen, { locale: localeQuery.data, wallet: props.wallet, walletInfo: walletInfo.data, onBack: () => {
                setScreen("main");
            } }));
    }
    if (walletInfo.data.deepLink &&
        !isInstalled &&
        wallet.getConfig()
            ?.preferDeepLink &&
        isMobile()) {
        return (_jsx(DeepLinkConnectUI, { wallet: props.wallet, walletInfo: walletInfo.data, deepLinkPrefix: walletInfo.data.deepLink.mobile, locale: localeQuery.data, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack }));
    }
    if (walletInfo.data.rdns && isInstalled) {
        return (_jsx(InjectedConnectUI, { wallet: props.wallet, walletInfo: walletInfo.data, done: props.done, locale: localeQuery.data, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack }));
    }
    // coinbase wallet sdk
    if (props.wallet.id === COINBASE) {
        return (_jsx(Suspense, { fallback: _jsx(LoadingScreen, {}), children: _jsx(CoinbaseSDKWalletConnectUI, { locale: localeQuery.data, onGetStarted: () => {
                    setScreen("get-started");
                }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data }) }));
    }
    // wallet connect
    if (walletInfo.data.mobile.native || walletInfo.data.mobile.universal) {
        return (_jsx(WalletConnectConnection, { locale: localeQuery.data, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data }));
    }
    // wallet connect
    if (props.wallet.id === "walletConnect") {
        return (_jsx(WalletConnectStandaloneConnection, { locale: localeQuery.data, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data, setModalVisibility: props.setModalVisibility }));
    }
    if (props.wallet.id === "inApp" || props.wallet.id === "embedded") {
        return (_jsx(Suspense, { fallback: _jsx(LoadingScreen, {}), children: _jsx(InAppWalletConnectUI, { wallet: props.wallet, done: props.done, goBack: props.onBack }) }));
    }
    // if can't connect in any way - show get started screen
    return (_jsx(GetStartedScreen, { locale: localeQuery.data, wallet: props.wallet, walletInfo: walletInfo.data, onBack: () => {
            setScreen("main");
        } }));
}
//# sourceMappingURL=AnyWalletConnectUI.js.map