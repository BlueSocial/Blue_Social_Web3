import { ethereum } from "../../../../chains/chain-definitions/ethereum.js";
import { UserWalletStatus } from "../authentication/type.js";
/**
 * Checks if the provided wallet is an in-app wallet.
 *
 * @param wallet - The wallet to check.
 * @returns True if the wallet is an in-app wallet, false otherwise.
 */
export function isInAppWallet(wallet) {
    return wallet.id === "inApp" || wallet.id === "embedded";
}
/**
 * @internal
 */
export async function connectInAppWallet(options, createOptions, connector) {
    const authResult = await connector.authenticate(options);
    const authAccount = authResult.user.account;
    if (createOptions?.smartAccount) {
        return convertToSmartAccount({
            client: options.client,
            authAccount,
            smartAccountOptions: createOptions.smartAccount,
            chain: options.chain,
        });
    }
    return [
        authAccount,
        options.chain || createOptions?.smartAccount?.chain || ethereum,
    ];
}
/**
 * @internal
 */
export async function autoConnectInAppWallet(options, createOptions, connector) {
    const user = await getAuthenticatedUser(connector);
    if (!user) {
        throw new Error("not authenticated");
    }
    const authAccount = user.account;
    if (createOptions?.smartAccount) {
        return convertToSmartAccount({
            client: options.client,
            authAccount,
            smartAccountOptions: createOptions.smartAccount,
            chain: options.chain,
        });
    }
    return [
        authAccount,
        options.chain || createOptions?.smartAccount?.chain || ethereum,
    ];
}
async function convertToSmartAccount(options) {
    const [{ smartWallet }, { connectSmartWallet }] = await Promise.all([
        import("../../../smart/smart-wallet.js"),
        import("../../../smart/index.js"),
    ]);
    const sa = smartWallet(options.smartAccountOptions);
    return connectSmartWallet(sa, {
        client: options.client,
        personalAccount: options.authAccount,
        chain: options.chain,
    }, options.smartAccountOptions);
}
async function getAuthenticatedUser(connector) {
    const user = await connector.getUser();
    switch (user.status) {
        case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
            return user;
        }
    }
    return undefined;
}
//# sourceMappingURL=index.js.map