{"version":3,"file":"CoinbaseWalletSDK.js","sourceRoot":"","sources":["../src/CoinbaseWalletSDK.ts"],"names":[],"mappings":"AAAA,OAAO,iBAAiB,MAAM,2BAA2B,CAAC;AAQ1D,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AAE1E,MAAM,UAAU,SAAS,CAAC,EACxB,WAAW,EACX,OAAO,EACP,eAAe,GACK;IACpB,iBAAiB,CAAC,SAAS,CAAC;QAC1B,WAAW,EAAE,WAAW,CAAC,QAAQ,EAAE;QACnC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE;QAC5B,eAAe;KAChB,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,cAAyB;IAEzB,MAAM,OAAO,GACX,cAAc,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QAC7B,OAAO;YACL,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;YACzC,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,KAAK;SACnC,CAAC;IACJ,CAAC,CAAC,IAAI,EAAE,CAAC;IAEX,OAAO,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC;AAChF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,OAAiB,EACjB,OAAiB;IAEjB,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QAC5C,OAAO;YACL,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;YACzC,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,KAAK;SACnC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,iBAAiB,CAAC,WAAW,CAAC;QACzC,OAAO,EAAE,cAAc;QACvB,OAAO;KACR,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,GAAQ;IACrC,OAAO,iBAAiB,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC1D,CAAC;AAED,MAAM,UAAU,yBAAyB;IACvC,OAAO,iBAAiB,CAAC,yBAAyB,EAAE,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,WAAW;IACzB,OAAO,iBAAiB,CAAC,WAAW,EAAE,CAAC;AACzC,CAAC;AAED,MAAM,UAAU,YAAY;IAC1B,iBAAiB,CAAC,YAAY,EAAE,CAAC;AACnC,CAAC","sourcesContent":["import CoinbaseWalletSDK from \"./CoinbaseWalletSDKModule\";\nimport {\n  Action,\n  Account,\n  ConfigurationParams,\n  Result,\n} from \"./CoinbaseWalletSDK.types\";\n\nexport { WalletMobileSDKEVMProvider } from \"./WalletMobileSDKEVMProvider\";\n\nexport function configure({\n  callbackURL,\n  hostURL,\n  hostPackageName,\n}: ConfigurationParams) {\n  CoinbaseWalletSDK.configure({\n    callbackURL: callbackURL.toString(),\n    hostURL: hostURL?.toString(),\n    hostPackageName,\n  });\n}\n\nexport async function initiateHandshake(\n  initialActions?: Action[]\n): Promise<[Result[], Account?]> {\n  const actions =\n    initialActions?.map((action) => {\n      return {\n        method: action.method,\n        paramsJson: JSON.stringify(action.params),\n        optional: action.optional ?? false,\n      };\n    }) ?? [];\n\n  return await CoinbaseWalletSDK.initiateHandshake({ initialActions: actions });\n}\n\nexport async function makeRequest(\n  actions: Action[],\n  account?: Account\n): Promise<Result[]> {\n  const requestActions = actions.map((action) => {\n    return {\n      method: action.method,\n      paramsJson: JSON.stringify(action.params),\n      optional: action.optional ?? false,\n    };\n  });\n\n  return await CoinbaseWalletSDK.makeRequest({\n    actions: requestActions,\n    account,\n  });\n}\n\nexport function handleResponse(url: URL): boolean {\n  return CoinbaseWalletSDK.handleResponse(url.toString());\n}\n\nexport function isCoinbaseWalletInstalled(): boolean {\n  return CoinbaseWalletSDK.isCoinbaseWalletInstalled();\n}\n\nexport function isConnected(): boolean {\n  return CoinbaseWalletSDK.isConnected();\n}\n\nexport function resetSession() {\n  CoinbaseWalletSDK.resetSession();\n}\n"]}