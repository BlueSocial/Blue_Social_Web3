/// <reference types="node" />
import { Buffer } from '@craftzdog/react-native-buffer';
import type { AnyAlgorithm, KeyUsage, SubtleAlgorithm } from './keys';
import { type CipherKey } from 'crypto';
export type BufferLike = ArrayBuffer | Buffer | ArrayBufferView;
export type BinaryLike = string | ArrayBuffer | Buffer;
export type BinaryLikeNode = CipherKey | BinaryLike;
export type BinaryToTextEncoding = 'base64' | 'base64url' | 'hex' | 'binary';
export type CharacterEncoding = 'utf8' | 'utf-8' | 'utf16le' | 'latin1';
export type LegacyCharacterEncoding = 'ascii' | 'binary' | 'ucs2' | 'ucs-2';
export type Encoding = BinaryToTextEncoding | CharacterEncoding | LegacyCharacterEncoding;
export type CipherEncoding = Encoding | 'buffer';
type DOMName = string | {
    name: string;
    cause: any;
};
export declare function setDefaultEncoding(encoding: CipherEncoding): void;
export declare function getDefaultEncoding(): CipherEncoding;
export declare const kEmptyObject: any;
export declare function toArrayBuffer(buf: Buffer): ArrayBuffer;
export declare function bufferLikeToArrayBuffer(buf: BufferLike): ArrayBuffer;
export declare function binaryLikeToArrayBuffer(input: BinaryLikeNode, // CipherKey adds compat with node types
encoding?: string): ArrayBuffer;
export declare function ab2str(buf: ArrayBuffer, encoding?: string): string;
export declare function validateString(str: any, name?: string): str is string;
export declare function validateFunction(f: any): f is Function;
export declare function isStringOrBuffer(val: any): val is string | ArrayBuffer;
export declare function validateObject<T>(value: any, name: string, options?: {
    allowArray: boolean;
    allowFunction: boolean;
    nullable: boolean;
} | null): value is T;
export declare function validateInt32(value: any, name: string, min?: number, max?: number): void;
export declare function validateUint32(value: number, name: string, positive?: boolean): void;
export declare function hasAnyNotIn(set: string[], checks: string[]): boolean;
export declare function lazyDOMException(message: string, domName: DOMName): Error;
export type Operation = 'digest' | 'generateKey' | 'sign' | 'verify' | 'importKey' | 'deriveBits' | 'encrypt' | 'decrypt' | 'get key length' | 'wrapKey' | 'unwrapKey';
export declare const validateMaxBufferLength: (data: BinaryLike | BufferLike, name: string) => void;
export declare const normalizeAlgorithm: (algorithm: SubtleAlgorithm | AnyAlgorithm, op: Operation) => SubtleAlgorithm;
export declare const validateBitLength: (length: number, name: string, required?: boolean) => void;
export declare const validateByteLength: (buf: BufferLike, name: string, target: number) => void;
export declare const validateKeyOps: (keyOps: KeyUsage[] | undefined, usagesSet: KeyUsage[]) => void;
export declare const getHashes: () => string[];
export declare const getCiphers: () => string[];
export * from './Hashnames';
//# sourceMappingURL=Utils.d.ts.map