import { type ImportFormat, type SubtleAlgorithm, type KeyUsage, CryptoKey, type AnyAlgorithm, type JWK } from './keys';
import { type BufferLike, type BinaryLike } from './Utils';
declare class Subtle {
    digest(algorithm: SubtleAlgorithm | AnyAlgorithm, data: BufferLike): Promise<ArrayBuffer>;
    deriveBits(algorithm: SubtleAlgorithm, baseKey: CryptoKey, length: number): Promise<ArrayBuffer>;
    importKey(format: ImportFormat, data: BufferLike | BinaryLike | JWK, algorithm: SubtleAlgorithm | AnyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
    exportKey(format: ImportFormat, key: CryptoKey): Promise<ArrayBuffer | any>;
}
export declare const subtle: Subtle;
export {};
//# sourceMappingURL=subtle.d.ts.map