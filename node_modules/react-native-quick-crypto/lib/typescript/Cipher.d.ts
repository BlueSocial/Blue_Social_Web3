/// <reference types="node" />
import { type BinaryLike, type BinaryLikeNode } from './Utils';
import type { CipherCCMOptions, CipherCCMTypes, CipherGCMTypes, CipherGCMOptions, CipherOCBOptions, CipherOCBTypes, DecipherGCM, DecipherOCB, DecipherCCM, CipherCCM, CipherOCB, CipherGCM } from 'crypto';
import { Buffer } from '@craftzdog/react-native-buffer';
export declare function createDecipher(algorithm: CipherCCMTypes, password: BinaryLikeNode, options: CipherCCMOptions): DecipherCCM;
export declare function createDecipher(algorithm: CipherGCMTypes, password: BinaryLikeNode, options?: CipherGCMOptions): DecipherGCM;
export declare function createDecipheriv(algorithm: CipherCCMTypes, key: BinaryLikeNode, iv: BinaryLike, options: CipherCCMOptions): DecipherCCM;
export declare function createDecipheriv(algorithm: CipherOCBTypes, key: BinaryLikeNode, iv: BinaryLike, options: CipherOCBOptions): DecipherOCB;
export declare function createDecipheriv(algorithm: CipherGCMTypes, key: BinaryLikeNode, iv: BinaryLike, options?: CipherGCMOptions): DecipherGCM;
export declare function createCipher(algorithm: CipherCCMTypes, password: BinaryLikeNode, options: CipherCCMOptions): CipherCCM;
export declare function createCipher(algorithm: CipherGCMTypes, password: BinaryLikeNode, options?: CipherGCMOptions): CipherGCM;
export declare function createCipheriv(algorithm: CipherCCMTypes, key: BinaryLikeNode, iv: BinaryLike, options: CipherCCMOptions): CipherCCM;
export declare function createCipheriv(algorithm: CipherOCBTypes, key: BinaryLikeNode, iv: BinaryLike, options: CipherOCBOptions): CipherOCB;
export declare function createCipheriv(algorithm: CipherGCMTypes, key: BinaryLikeNode, iv: BinaryLike, options?: CipherGCMOptions): CipherGCM;
export declare const publicEncrypt: (options: {
    key: any;
    encoding?: string;
    format?: any;
    padding?: any;
    oaepHash?: any;
    oaepLabel?: any;
    passphrase?: string;
}, buffer: BinaryLike) => Buffer;
export declare const publicDecrypt: (options: {
    key: any;
    encoding?: string;
    format?: any;
    padding?: any;
    oaepHash?: any;
    oaepLabel?: any;
    passphrase?: string;
}, buffer: BinaryLike) => Buffer;
export declare const privateDecrypt: (options: {
    key: any;
    encoding?: string;
    format?: any;
    padding?: any;
    oaepHash?: any;
    oaepLabel?: any;
    passphrase?: string;
}, buffer: BinaryLike) => Buffer;
type GenerateKeyPairOptions = {
    modulusLength: number;
    publicExponent?: number;
    hashAlgorithm?: string;
    mgf1HashAlgorithm?: string;
    saltLength?: number;
    divisorLength?: number;
    namedCurve?: string;
    prime?: Buffer;
    primeLength?: number;
    generator?: number;
    groupName?: string;
    publicKeyEncoding?: any;
    privateKeyEncoding?: any;
    paramEncoding?: string;
    hash?: any;
    mgf1Hash?: any;
};
type GenerateKeyPairCallback = (error: unknown | null, publicKey?: Buffer, privateKey?: Buffer) => void;
export declare function generateKeyPair(type: string, callback: GenerateKeyPairCallback): void;
export declare function generateKeyPair(type: string, options: GenerateKeyPairOptions, callback: GenerateKeyPairCallback): void;
export declare function generateKeyPairSync(type: string): {
    publicKey: any;
    privateKey: any;
};
export declare function generateKeyPairSync(type: string, options: GenerateKeyPairOptions): {
    publicKey: any;
    privateKey: any;
};
export {};
//# sourceMappingURL=Cipher.d.ts.map